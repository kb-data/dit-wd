1537713562210:install.packages("C:/Users/Kate/Downloads/plyr_1.8.4.tar.gz", repos = NULL, type = "source")
1537713746192:install.packages("vioplot")
1537713791850:packageDescription("vioplot")
1537713897210:install.packages("devtools")
1537713939772:installed.packages()
1537713962063:old.packages()
1537707126831:library()
1537707241234:install.packages("plyr")
1537721045377:salary<-readRDS("salary.rds")
1537721096435:ls
1537721308524:help(readRDS)
1537721330947:salary
1537721342398:salary<-readRDS("salary.rds")
1537721357405:dir
1537721428572:salary<-readRDS("salary.rds")
1537721437061:names(salary)
1537721497218:salary$gender
1537721512153:str(salary$gender)
1537721522840:summary(salary$gender)
1537721530644:summary(salary$salary)
1537721547904:summary(salary)
1537721574762:plyr
1537721580353:help(plyr)
1537721594259:install.packages('plyr')
1537721610310:library('plyr'')
1537721620152:library('plyr')
1537721635434:count(salary$gender)
1537721645747:summary(salary$gender)
1537721718700:tab
1537721725321:tab<-table(salary$gender, salary$rank)
1537721725328:admarine(tab)
1537721725333:tab
1537721742847:prop.table(tab)
1537721751953:distribution
1537722047811:unique(salary$salary)
1537722056467:salary$salary
1537722069403:help("unique")
1537722106990:help("match")
1537722376468:uniqv<-unique(salary$salary)
1537722387807:uniqve
1537722392029:uniqv
1537722418307:match(salary$salary,uniqv)
1537722450592:tabulate(match(salary$salary,uniqv))
1537722458621:help(tabulate)
1537722519242:which.max(tabulate(match(salary$salary,uniqv)))
1537722533402:uniqv[which.max(tabulate(match(salary$salary,uniqv)))]
1537722601319:salary<-readRDS("salary.rds")
1537722601326:tab<-table(salary$gender, salary$rank)
1537722601331:admarine(tab)
1537722601336:tab
1537722601350:getmode<-function(v)
1537722601355:{
1537722601355:uniqv<-unique(v)
1537722601362:uniqv[which.max(tabulate(match(v,uniqv)))]
1537722601365:}
1537722601371:getmode(salary$salary)
1537724062025:mean(salary$salary)
1537724072467:meansal<-mean(salary$salary)
1537724077221:meansal
1537724092247:print(meansal, digits=1)
1537724106090:median(salary$salary)
1537724119850:range(salary$salary)
1537724129877:quantile(salary$salary)
1537724145445:IQR(salary$salary)
1537724153437:var(salary$salary)
1537724159886:sd(salary$salary)
1537724173004:round(sd(salary$salary),2)
1537724200341:install.packages('Rcmdr')
1537724331095:library('Rcmdr')
1537725092544:install.packages('tidyverse')
1537991201886:#Initiate ggplot2
1537991201890:library(ggplot2)
1537991218053:library(ggplot2)
1537991218055:library(reshape)
1537991218061:library(plyr)
1537991218124:library (Hmisc)
1537991262135:package('reshape')
1537991300032:install.packages('rshape')
1537991327515:library(reshape)
1537991422046:install.packages('ggplot2')
1537991432305:install.packages("ggplot2")
1537991450327:install.packages("plyr")
1537991462986:install.packages("rshap")
1537991471170:install.packages("rshape")
1537991506740:install.packages("reshape")
1537991523013:install.packages("Hmisc")
1537991533502:library(ggplot2)
1537991537429:library(reshape)
1537991537444:library(plyr)
1537991537461:library (Hmisc)
1537991562911:facebookData <- read.delim("facebookNarcissim.dat",  header = TRUE)
1537991562944:graph <- ggplot(facebookData, aes(NPQC_R_Total, Rating))
1537991562975:graph + geom_point() + ggtitle("geompoint")
1537991562977:ggsave("Week2 Example with point.png", plot=last_plot())
1537991563102:graph + geom_point(shape = 17) + ggtitle("geom_point(shape = 17)")
1537991563103:ggsave("Week2 Example with triangle.png", plot=last_plot())
1537991563152:graph + geom_point(size = 6) + ggtitle ("geom_point(size = 3)")
1537991563152:ggsave("Week2 Example changing size.png", plot=last_plot())
1537991563207:#using a black and white theme, using Triangles
1537991563208:graph + theme_bw(base_size=13)  + geom_point(shape = 17) + ggtitle ("theme_bw(base_size=13")
1537991563210:ggsave("Week2 using theme.png", plot=last_plot())
1537991563253:#using another theme, using Triangles
1537991563253:graph + theme_dark() + geom_point(shape = 17) + ggtitle ("theme_dark")
1537991563253:ggsave("Week2 using another theme.png", plot=last_plot())
1537991563313:#show each rating as a different colour
1537991563314:graph + geom_point(aes(colour = Rating_Type)) + ggtitle("geom_point(aes(colour = Rating_Type))")
1537991563316:ggsave("Week2 Example changing colour.png", plot=last_plot())
1537991563368:#Jitter adds a small amount of random variation to the location of each point - spreads the data out
1537991563370:graph + geom_point(aes(colour = Rating_Type), position = "jitter") + ggtitle ("geom_point(aes(colour = Rating_Type), position = jitter)")
1537991563370:ggsave("Week2 Example jitter.png", plot=last_plot())
1537991583224:facebookData
1537991634346:facebookData <- read.delim("facebookNarcissism.dat",  header = TRUE)
1537991641780:facebookData
1537991656557:graph <- ggplot(facebookData, aes(NPQC_R_Total, Rating))
1537991656561:graph + geom_point() + ggtitle("geompoint")
1537991657059:ggsave("Week2 Example with point.png", plot=last_plot())
1537991678532:graph
1537991706216:graph + geom_point(shape = 17) + ggtitle("geom_point(shape = 17)")
1537991706416:ggsave("Week2 Example with triangle.png", plot=last_plot())
1537991707080:graph + geom_point(size = 6) + ggtitle ("geom_point(size = 3)")
1537991707270:ggsave("Week2 Example changing size.png", plot=last_plot())
1537991707904:#using a black and white theme, using Triangles
1537991707905:graph + theme_bw(base_size=13)  + geom_point(shape = 17) + ggtitle ("theme_bw(base_size=13")
1537991708129:ggsave("Week2 using theme.png", plot=last_plot())
1537991708803:#using another theme, using Triangles
1537991708804:graph + theme_dark() + geom_point(shape = 17) + ggtitle ("theme_dark")
1537991709016:ggsave("Week2 using another theme.png", plot=last_plot())
1537991709925:#show each rating as a different colour
1537991709928:graph + geom_point(aes(colour = Rating_Type)) + ggtitle("geom_point(aes(colour = Rating_Type))")
1537991710539:ggsave("Week2 Example changing colour.png", plot=last_plot())
1537991711536:#Jitter adds a small amount of random variation to the location of each point - spreads the data out
1537991711537:graph + geom_point(aes(colour = Rating_Type), position = "jitter") + ggtitle ("geom_point(aes(colour = Rating_Type), position = jitter)")
1537991712050:ggsave("Week2 Example jitter.png", plot=last_plot())
1538225401630:ChickWeight
1538226825122:type(ChickWeight)
1538226885608:typeof(ChickWeight)
1538226923932:ChickWeight$names
1538227006853:names(ChickWeight)
1538227042369:ChickWeight(head)
1538227047711:ChickWeight.head()
1538227050113:ChickWeight.head
1538227083723:ChickWeight$weight
1538227521486:?ChickWeight
1538227554336:ChickWeight$Time
1538227611523:ChickWeight$Time[ChickWeight$Time=21]
1538227615533:ChickWeight$Time[ChickWeight$Time==21]
1538227624459:ChickWeight$weight[ChickWeight$Time==21]
1538227637116:ave(ChickWeight$weight[ChickWeight$Time==21])
1538228422956:ChickWeight$Time==21
1538228432678:ChickWeight$weight[ChickWeight$Time==21]
1538228459492:x<-ChickWeight$weight[ChickWeight$Time==21]
1538228462643:ave(x)
1538228471493:typeof(x)
1538228477672:dim(x)
1538228485457:length(x)
1538228555847:typeof(ChickWeight)
1538228568614:typeof(ChickWeight$weight[ChickWeight$Time==21])
1538228577492:typeof(ChickWeight$Time==21)
1538228594746:x
1538228607975:y=ave(x)
1538228609841:y
1538228619914:typeof(y)
1538228774980:typeof(ChickWeight$weight[ChickWeight$Time==21])
1538228805946:z<-c(1,2,3)
1538228807202:z
1538228812646:typeof(z)
1538228824820:ave(z)
1538229192608:ave(ChickWeight$weight[ChickWeight$Time==21])
1538229220098:ave.(ChickWeight$weight[ChickWeight$Time==21])
1538229268929:ave(ChickWeight$weight[ChickWeight$Time==21])[1]
1538229311909:ChickWeight$chick[ChickWeight$weight]
1538229328229:ChickWeight$Time==21
1538229339803:21day <- ChickWeight$Time==21
1538229353191:ChickWeight$Time==21
1538229359683:day21 <- ChickWeight$Time==21
1538229362627:dat21
1538229367238:day21
1538229394759:ave(ChickWeight$weight[day21])[1]
1538229409172:ave21 <- ave(ChickWeight$weight[day21])[1]
1538229455557:ChickWeight$Chick[ChickWeight$weight > ave21]
1538229467012:ChickWeight$weight > ave21
1538229522958:typeof(ChickWeight$weight > ave21)
1538229571740:greaterave21 <-ChickWeight$weight > ave21
1538229575740:greaterave21
1538229589240:greaterave21 =T
1538229595474:greaterave21 == T
1538229598455:greaterave21 <-ChickWeight$weight > ave21
1538229605592:greaterave21 == T
1538229627616:greaterave21[greaterave21 == T]
1538229644456:length(greaterave21[greaterave21 == T])
1538229693216:ChickWeight
1538229753537:typeof(ChickWeight)
1538229782211:?count
1538229792351:library(plyr)
1538229795893:?count
1538229820723:count(ChickWeight$chicks)
1538229829696:count(ChickWeight$weight)
1538229848511:count(ChickWeight$Diet)
1538230384255:?aggregate
1538230401832:aggregate(ChickWeight)
1538230413058:aggregate(ChickWeight,mean())
1538230429971:aggregate(ChickWeight,mean
1538230438609:aggregate(ChickWeight,mean)
1538230446145:aggregate(ChickWeight,FUN=mean)
1538230810726:aggregate(ChickWeight,FUN=mean)
1538230820130:Titanic
1538230884005:typeof(Titanic)
1538230939432:list_to_dataframe(Titanic)
1538230958644:list_to_dataframe(Titanic)
1538230979612:library(plyr)
1538230982708:plyr
1538230986145:?plyr
1538231032925:list_to_dataframe(Titanic)
1538231039614:?list_to_dataframe
1538231076895:install.packages(plyr)
1538231081394:install.packages('plyr')
1538231087332:install.packages("plyr")
1538231096789:list_to_dataframe(Titanic)
1538231105536:library(plyr)
1538231109431:list_to_dataframe(Titanic)
1538231152831:library(dplyr)
1538231161985:list_to_dataframe(Titanic)
1538231192978:library(ldplyr)
1538231212367:library(ldply)
1538231326254:as.data.frame(Titanic)
1538231351200:tdf <- as.data.frame(Titanic)
1538231353461:tdf
1538231374717:count(tdf)
1538231383519:count(tdf$Survived)
1538231426555:table(tdf$Survived)
1538231433107:table(tdf$Survived)[1]
1538231442614:table(tdf$Survived)[[1,2]]
1538231447129:table(tdf$Survived)[[1]]
1538231489380:?count
1538231510476:?sum
1538231534695:?aggregate
1538231597344:aggregate(tdf$Freq, by=tdf$Survived, FUN=sum())
1538231600476:aggregate(tdf$Freq, by=tdf$Survived, FUN=sum
1538231607086:aggregate(tdf$Freq, by=tdf$Survived, FUN=sum)
1538231625018:tdf$Survived
1538231641510:type(tdf$Survived)
1538231646881:typeof(tdf$Survived)
1538231660392:aggregate(tdf$Freq, by=list(tdf$Survived), FUN=sum)
1538231684898:aggregate(tdf$Freq, by=list(tdf$Survived=='Yes'), FUN=sum)
1538231810008:aggregate(tdf$Freq, by=list(tdf$Survived), FUN=sum)
1538231829036:sum(tfd$freq)
1538231838522:sum(tdf$freq)
1538231844534:tdf$freq
1538231849305:tdf
1538231856767:sum(tdf$Freq)
1538231879519:sumFreq <- sum(tdf$Freq)
1538231889067:sumFreq <- sum(tdf$Freq)
1538231939115:aggregate(tdf$Freq, by=list(tdf$Survived), FUN=sum*100)
1538231948539:aggregate(tdf$Freq, by=list(tdf$Survived), FUN=(sum*100))
1538232012347:?summary
1538232217868:aggregate(tdf$Freq, by=list(tdf$Survived), FUN=sum)
1538232229457:typeof(aggregate(tdf$Freq, by=list(tdf$Survived), FUN=sum))
1538232244370:ag<-aggregate(tdf$Freq, by=list(tdf$Survived), FUN=sum)
1538232251602:ag$x
1538232289583:ag$x/sumFreq
1538232309712:ag$x*100/sumFreq
1538232336369:ag[[3]]<-ag$x*100/sumFreq
1538232338319:ag
1538232374614:sumFreq <- sum(tdf$Freq)
1538232374615:ag<-aggregate(tdf$Freq, by=list(tdf$Survived), FUN=sum)
1538232374617:ag[[3]]<-ag$x*100/sumFreq
1538232377768:ag
1538232539056:sumFreq
1538232545429:sumFreqF <- sum(tdf$Freq[tdf$Sex == 'Female'])
1538232548284:sumFreqF
1538232624056:ag<-aggregate(tdf$Freq, by=list(tdf$Survived), FUN=sum)
1538232625740:ag<-aggregate(tdf$Freq, by=list(tdf$Survived), FUN=sum)
1538232625746:ag[[3]]<-ag$x*100/sum(tdf$Freq)
1538232627615:ag
1538232675119:agF<-aggregate(tdf$Freq[tdf$Sex == 'Female'], by=list(tdf$Survived[tdf$Sex == 'Female']), FUN=sum)
1538232675122:agF[[3]]<-ag$x*100/sum(tdf$Freq[tdf$Sex == 'Female'])
1538232677347:ag
1538232681713:agF
1538232706652:agF<-aggregate(tdf$Freq[tdf$Sex == 'Female'], by=list(tdf$Survived[tdf$Sex == 'Female']), FUN=sum)
1538232706654:agF[[3]]<-agF$x*100/sum(tdf$Freq[tdf$Sex == 'Female'])
1538232710757:agF
1538232754272:tdf
1538232817378:agF<-aggregate(tdf$Freq, by=list(tdf$Class, tdf$Survived), FUN=sum)
1538232824025:aggregate(tdf$Freq, by=list(tdf$Class, tdf$Survived), FUN=sum)
1538232902354:aggregate(tdf$Freq, by=list(tdf$Class, tdf$Sex, tdf$Age, tdf$Survived), FUN=sum)
1538233063741:tdfY <- tdf[tdf$Survived == 'Yes']
1538233267912:tdfY <- tdf[tdf[,'Survived'] == 'Yes']
1538233278260:tdf[,'Survived']
1538233292089:tdf[,'Survived'] == 'Yes'
1538233302737:tdf[tdf[,'Survived'] == 'Yes']
1538233315206:tdf[tdf[,'Survived'] == 'Yes',]
1538233323051:tdfY <- tdf[tdf[,'Survived'] == 'Yes',]
1538233331083:tdfN <- tdf[tdf[,'Survived'] == 'No',]
1538233351110:?merge
1538233413054:merge(tdfY,tdfN,by=c('Class','Sex','Age'))
1538233506744:merge(tdfY,tdfN,by=c('Class','Sex','Age'),suffixes = (Y,N))
1538233588023:merge(tdfY,tdfN,by=c('Class','Sex','Age'),suffixes = c('.Y','.N'))
1538233630292:merge(tdfY,tdfN,by=c('Class','Sex','Age'),suffixes = c('.Y','.N')).drop(c(Survived.Y,Survived.N))
1538233646277:merge(tdfY,tdfN,by=c('Class','Sex','Age'),suffixes = c('.Y','.N')).drop(c('Survived.Y','Survived.N'))
1538233667166:tdfm <- merge(tdfY,tdfN,by=c('Class','Sex','Age'),suffixes = c('.Y','.N'))
1538233680756:tdfm.drop(c('Survived.Y','Survived.N'))
1538233763961:tdfm$Survived.Y<-NULL
1538233767587:tdfm$Survived.N<-NULL
1538233771744:tdfm
1538233816644:tdfm$Freq.N+tdfm$Freq.Y
1538233840207:tdfm['Sum']<-tdfm$Freq.N+tdfm$Freq.Y
1538233884933:tdfm['Perc_S']<-tdfm$Freq.Y*100/tdfm$Sum
1538233888300:tdfm
1538233941273:?order
1538233985022:order(tdfm,tdfm$Sum, tdfm$Perc_S)
1538234035806:tdfms <- tdfm[order(tdfm,tdfm$Sum, tdfm$Perc_S),]
1538234086776:tdfm[is.nan(tdfm)]=0
1538235928140:ChickWeight
1538235985135:Titanic
1538235998773:tdf
1538236063307:ddply(tdf, 'class', tot = sum('freq'))
1538236085861:ddply(tdf, 'class', summarise, tot = sum('freq'))
1538236094988:ddply(tdf, 'class', summarise, tot = sum(tdf['freq']))
1538236124315:ddply(tdf, 'class', summarise, tot = sum(freq))
1538236165633:library(ddplyr)
1538236168851:library(ddply)
1538236178737:?plyr
1538236263675:ddply(tdf, 'class', summarise, tot = sum(.freq))
1538236296292:ddply(tdf, 'class', summarise, tot.freq = sum(freq))
1538236338744:ddply(tdf, .'class', summarise, tot.freq = sum(freq))
1538236348257:ddply(tdf, .class, summarise, tot.freq = sum(freq))
1538236357717:ddply(tdf, .Class, summarise, tot.freq = sum(freq))
1538236366303:tdf
1538236446508:dfx <- data.frame(
1538236446509:group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
1538236446510:sex = sample(c("M", "F"), size = 29, replace = TRUE),
1538236446511:age = runif(n = 29, min = 18, max = 54)
1538236446512:)
1538236449945:dfx
1538236466313:ddply(dfx, .(group, sex), summarize,
1538236466314:mean = round(mean(age), 2),
1538236466316:sd = round(sd(age), 2))
1538236539302:ddply(dfx, .(group, sex), summarize, mean = round(mean(age), 2),sd = round(sd(age), 2))
1538236584823:ddply(dfx, .(group, sex), summarize, sumx = sum(age))
1538236662348:ddply(tdf, .(class), summarise, sumxy=sum(freq))
1538236682196:typeof(dfx)
1538236691809:typeof(tdf)
1538236702154:ddply(tdf, .(class,sex), summarise, sumxy=sum(freq))
1538236709762:tdf
1538236719641:ddply(tdf, .(Class,Sex), summarise, sumxy=sum(freq))
1538236725613:ddply(tdf, .(Class,Sex), summarise, sumxy=sum(Freq))
1538236734400:tdf
1538237028585:ddply(tdf, .(Class), summarise, sumxy=sum(Freq))
1538237035191:ddply(tdf, .Class, summarise, sumxy=sum(Freq))
1538237045254:ddply(tdf, .(Survived), summarise, sumxy=sum(Freq))
1538237125510:ddply(tdf[tdf$Class == 'Crew'], .(Survived), summarise, sumFreq=sum(Freq))
1538237152880:tdf[tdf$Class == 'Crew']
1538237169676:tdf$Class
1538237301199:tdf[tdf$Class == Crew]
1538237314825:tdf[tdf$Class == 'Crew']
1538237330300:tdf[tdf$Class = 'Crew']
1538237374315:ddply(tdf, .(Survived), summarise, sumxy=sum(Freq))
1538237385510:ddply(tdf, .(Class, Survived), summarise, sumxy=sum(Freq))
1538237449884:ddply(tdf, .(Class, Survived), summarise, sumfreq=sum(Freq))
1538237475429:ddply(tdf, .(Class, Survived), summarise, sumfreq=sum(Freq))[tdf$Class=='Crew']
1538237483564:ddd<- ddply(tdf, .(Class, Survived), summarise, sumfreq=sum(Freq))
1538237571276:tdfY <- tdf[tdf[,'Survived'] == 'Yes',]
1538237654142:ddd<- ddply(tdf[tdf[,'Class'] == 'Crew',], .(Class, Survived), summarise, sumfreq=sum(Freq))
1538237657491:ddd
1538237762623:sum(tdf$Freq)
1538237792720:sum(tdf[tdf[,'Class'] == 'Crew',]$Freq)
1538237814495:ddply(tdf[tdf[,'Class'] == 'Crew',], .(Class, Survived), summarise, sumfreq=sum(Freq)/sum(tdf[tdf[,'Class'] == 'Crew',]$Freq))
1538237825482:ddply(tdf[tdf[,'Class'] == 'Crew',], .(Class, Survived), summarise, sumfreq=sum(Freq)*100/sum(tdf[tdf[,'Class'] == 'Crew',]$Freq))
1538237961495:ddd<-ddply(tdf[tdf[,'Class'] == 'Crew',], .(Class, Survived), summarise, sumfreq=sum(Freq)*100/sum(tdf[tdf[,'Class'] == 'Crew',]$Freq))
1538237973201:ddd[1]
1538237983322:ddd[3]
1538237990858:ddd[3,2]
1538238001543:ddd[[3,2]]
1538238011227:ddd[3,1]
1538238018335:ddd[1,3]
1538238024878:ddd[2,3]
1538238035617:ddply(tdf[tdf[,'Class'] == 'Crew',], .(Class, Survived), summarise, sumfreq=sum(Freq)*100/sum(tdf[tdf[,'Class'] == 'Crew',]$Freq))[2,3]
1538238078588:ddply(tdf[tdf[,'Class'] == 'Crew',], .(Class, Survived), summarise, sumfreq=sum(Freq)*100/sum(tdf[tdf[,'Class'] == 'Crew',]$Freq))
1538238125764:ddply(tdf[tdf[,'Class'] == 'Crew',], .(Class, Survived), summarise, sumfreq=sum(Freq)*100/sum(tdf[tdf[,'Class'] == 'Crew',]$Freq))
1538238128187:tdf[tdf[,'Class'] == 'Crew',]
1538238282232:tdf[tdf[,'Class'] == 'Crew',][tdf[,'Class'] == 'Female',]
1538238293105:tdf[tdf[,'Class'] == 'Crew',][tdf[,'Sex'] == 'Female',]
1538238310319:tdf[tdf[tdf[,'Sex'] == 'Female',]
1538238321880:tdf[tdf[tdf[,'Sex'] == 'Female',]]
1538238332023:tdf[tdf[,'Sex'] == 'Female',]
1538238581996:tdf[tdf[tdf[,'Sex'] == 'Female',]
1538238605353:subset(tdf, Class = 'Crew')
1538238615840:x<-subset(tdf, Class = 'Crew')
1538238617606:x
1538238637180:?subset
1538238673544:subset(tdf, Class = 'Crew', Class)
1538238686326:subset(tdf, Class == 'Crew', Class)
1538238806347:subset(tdf, Class == 'Crew' | Sex == 'Female', Class)
1538238819706:subset(tdf, Class == 'Crew' & Sex == 'Female', Class)
1538238858650:?names
1538238865444:names(tdf)
1538238876259:subset(tdf, Class == 'Crew' & Sex == 'Female', names(tdf))
1538238916458:ddply(tdf[tdf[,'Class'] == 'Crew',], .(Class, Survived), summarise, sumfreq=sum(Freq)*100/sum(tdf[tdf[,'Class'] == 'Crew',]$Freq))
1538238945765:ddply(subset(tdf, Class == 'Crew', names(tdf)), .(Class, Survived), summarise, sumfreq=sum(Freq)*100/sum(tdf[tdf[,'Class'] == 'Crew',]$Freq))
1538238993666:ddply(subset(tdf, Class == 'Crew', names(tdf)), .(Class, Survived), summarise, sumfreq=sum(Freq)*100/sum(tdf[tdf[,'Class'] == 'Crew',]$Freq))[2,3]
1538239053010:ddply(subset(tdf, Class == 'Crew'& Sex == 'Female', names(tdf)), .(Class, Survived), summarise, sumfreq=sum(Freq)*100/sum(tdf[tdf[,'Class'] == 'Crew',]$Freq))[2,3]
1538239065256:ddply(subset(tdf, Class == 'Crew'& Sex == 'Female', names(tdf)), .(Class, Survived), summarise, sumfreq=sum(Freq)*100/sum(tdf[tdf[,'Class'] == 'Crew',]$Freq))
1538239084756:ddply(subset(tdf, Class == 'Crew'& Sex == 'Female', names(tdf)), .(Class, Sex, Survived), summarise, sumfreq=sum(Freq)*100/sum(tdf[tdf[,'Class'] == 'Crew',]$Freq))
1538239118746:ddply(subset(tdf, Class == 'Crew'& Sex == 'Female', names(tdf)), .(Class, Sex, Survived), summarise, sumfreq=sum(Freq)*100/sum(subset(tdf, Class == 'Crew'& Sex == 'Female'$Freq))
1538239149347:ddply(subset(tdf, Class == 'Crew'& Sex == 'Female', names(tdf)), .(Class, Sex, Survived), summarise, sumfreq=sum(Freq)*100/sum(subset(tdf, Class == 'Crew'& Sex == 'Female'$Freq)))
1538239163027:ddply(subset(tdf, Class == 'Crew'& Sex == 'Female', names(tdf)), .(Class, Sex, Survived), summarise, sumfreq=sum(Freq)*100/sum(subset(tdf, Class == 'Crew'& Sex == 'Female')$Freq))
1538239221842:ddply(subset(tdf, Class == 'Crew'& Sex == 'Female', names(tdf)), .(Class, Sex, Survived), summarise, countfreq = sum(Freq), percfreq=sum(Freq)*100/sum(subset(tdf, Class == 'Crew'& Sex == 'Female')$Freq))
1538240967343:ddply(tdf, .(Class, Sex, Survived), summarise, countfreq = sum(Freq), percfreq=sum(Freq)*100/sum(subset(tdf, Class == 'Crew'& Sex == 'Female')$Freq))
1538241367702:tdf
1538242041842:ddply(tdf, .(Class, Sex, Survived), summarise, countfreq = sum(Freq), percfreq=sum(Freq)*100/sum(subset(tdf, Class == 'Crew'& Sex == 'Female')$Freq))
1538242048210:?count
1538242056397:?summarise_
1538242064256:?sum
1538242186707:tdf['Sum']<-aggregate(tdf$Freq, sum)
1538242195674:?aggregate
1538242254329:tdf['Sum']<-aggregate(tdf$Freq, by = c('Class','Sex', 'Age', FUN= sum)
1538242271764:aggregate(tdf$Freq, by = c('Class','Sex', 'Age'), FUN= sum)
1538242279260:aggregate(tdf$Freq, by = list('Class','Sex', 'Age'), FUN= sum)
1538242683670:day21 <- ChickWeight$Time==21
1538242683672:ave21 <- ave(ChickWeight$weight[day21])[1]
1538242689569:ave21
1538242771273:state.x77
1538242864058:aggregate(state.x77, list(Region=state.region, Cold = state.x77[,'Frost']>130))
1538242873213:aggregate(state.x77, list(Region=state.region, Cold = state.x77[,'Frost']>130), mean
1538242875819:)
1538242908847:ChickWeight
1538243004407:aggregate(ChickWeight, list(weight21 = ChickWeight[,'Weight']==21), mean)
1538243020173:aggregate(ChickWeight, list(weight21 = ChickWeight[,'weight']==21), mean)
1538243038324:ave21
1538243068134:tdf['Sum']<-aggregate(tdf$Freq, by = c('Class','Sex', 'Age', FUN= sum)
1538243072702:)
1538243099272:tdf
1538243882879:iris
1538243888190:?iris
1538243936601:?ddply
1538243997852:ddply(iris, .(Class, Sex, Survived), summarise, countfreq = sum(Freq), percfreq=sum(Freq)*100/sum(subset(tdf, Class == 'Crew'& Sex == 'Female')$Freq))
1538244028169:iris$Sepal.Length/iris$Petal.Length
1538244401589:ddply( iris, .(Species), iris$Sepal.Length/iris$Petal.Length)
1538244410055:?ddply
1538244442066:ddply( iris, .(Species), mean)
1538244499068:ddply( iris, .(Species), mean(na.rm=TRUE))
1538245354382:install.packages("swirl")
1538245385961:library('swirl')
1538245424696:swirl()
1538422094506:swirl()
1538422149168:5+7
1538422179695:x<-5+7
1538422185381:x
1538422198974:y<-x-3
1538422251011:y
1538422314854:c(1.1,9,3.14)
1538422346308:z<-c(1.1,9,3.14)
1538422353871:c?
1538422363708:?c
1538422415803:z
1538422440443:c(z,555,z)
1538422461400:z+2+100
1538422468113:z*2+100
1538422526707:my_sqrt<-z-1
1538422539488:my_sqrt<-sqrt(z-1)
1538422562240:my_sqrt
1538422591897:my_div<-z/my_sqrt
1538422609672:my_div
1538422802244:c(1,2,3,4)+c(0,10)
1538422864360:c(1,2,3,4)+c(0,10,100)
1538422911055:z*2+1000
1538422961345:my_div
1538422993334:swirl()
1538423288650:getwd()
1538423314115:ls()
1538423349192:x<-9
1538423359733:ls
1538423363379:ls()
1538423371867:dir()
1538423380402:list.files()
1538423395703:?list.files
1538423535607:args(list.files)
1538423569895:old.dir<-dir()
1538423581527:old.dir<-getwd()
1538423660247:testdir<-dir.create()
1538423711088:dir.create(testdir)
1538423749067:?dir.create
1538424019425:getwd()
1538424043256:dir.create(C:/Users/Kate/Dcuments/R/testdir)
1538424066867:dir.create(C:/Users/Kate/Documents/R/testdir)
1538424115031:dir.create(C:\Users\Kate\Documents\R\testdir)
1538424245894:info()
1538424355166:dir.create('testdir')
1538424429180:setwd('testdir')
1538424547049:file.create('mytest.R')
1538424554019:ls()
1538424563958:list.files()
1538424574381:dir()
1538424592904:file.exists('mytest.R')
1538424635256:file.info('mytest.R')
1538424700335:?file.rename
1538424775473:file.rename('mytest2.R')
1538424790927:file.rename('mytest.R','mytest2.R')
1538424835069:file.copy('mytest2R','mytest3.R')
1538424901539:file.copy('mytest2.R','mytest3.R')
1538424939928:file.path('mytest.R')
1538424949815:file.path('mytest3.R')
1538425007148:file.path('mytest3.R', 'folder1', 'folder2')
1538425020381:file.path('folder1', 'folder2')
1538425038424:?dir.create
1538425245227:dir.create(file.path('testdir2','testdir3'))
1538425260293:dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
1538425275932:setwd(old.dir)
1538425386431:1:20
1538425396283:pi:10
1538425482131:15:1
1538425586255:?':'
1538425601834:seq(1:20)
1538425621549:seq(1, 20)
1538425649576:seq(1, 20, by=0.5)
1538425664652:seq(1, 10, by=0.5)
1538425692224:seq(0, 10, by=0.5)
1538425731246:seq(5, 10, seq=30)
1538425746783:seq(5, 10, length=30)
1538425775210:my_seq<-seq(5, 10, length=30)
1538425787532:length(my_seq)
1538425860317:seq(1:length(my_seq))
1538426059805:1:length(my_seq)
1538426086251:seq(along.with = my_seq)
1538426130421:seq_along(my_seq)
1538426252958:rep(0, times=40)
1538426274505:rep(c(0,1,2), times=40)
1538426285866:rep(c(0,1,2), times=10)
1538426324811:rep(c(0,1,2), each=10)
1538426349554:swirl()
1538595764089:?load
1538595777707:load(regression.sav)
1538595820001:setwd("~/R/Stats/wk3")
1538595824680:load(regression.sav)
1538595837270:load(Regression.sav)
1538595849158:load('Regression.sav')
1538595862866:x<-load('Regression.sav')
1538595964634:x
1538595984616:library(foreign)
1538595994746:regression <- read.spss("regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1538596001456:head(regression)
1538596019613:?read.spss
1538596047831:colnames(regression)
1538596071633:colnames(regression)<-tolower(col(regression))
1538596083941:colnames(regression) <- tolower(colnames(regression))
1538596094242:colnames(regression)
1538596435107:hist(normexam)
1538596445760:hist(regression$normexam)
1538596501973:hist(regression$standlrt)
1538596532929:?corr
1538596537401:?correlation
1538596580708:skew(regression$standlrt)
1538596600567:library(semTools)
1538596657691:?cor
1538596698451:cor(regression$normexam,regression$standlrt)
1538596754153:/scatter
1538596759161:?scatter
1538596797729:plot(regression$normexam,regression$standlrt)
1538596994438:?plyr
1538597000347:??plyr
1538597009201:?dplyr
1538597019773:?type
1538597030600:typeof(regression)
1538597164861:regression_girl <- filter(regression, girl==1)
1538597178779:colnames(regression)
1538597194226:regression$girl
1538597204962:regression_girl <- filter(regression, girl=1)
1538597220636:regression_girl <- filter(regression, girl==1)
1538597224290:?filter
1538597245047:regression_girl <- filter(regression$girl, girl==1)
1538597284175:regression_girl <- filter(regression, 1)
1538597293606:regression_girl
1538597371518:filter(regression, girl==1)
1538597454939:head(regression$girl)
1538597490457:dplyr.filter(regression, girl==1)
1538597505939:library(dplyr)
1538597512272:dplyr.filter(regression, girl==1)
1538597519351:?dplyr.filter
1538597708407:plot(regression$normexam,regression$standlrt)
1538597708518:cor(regression$normexam,regression$standlrt)
1538597895507:hist(regression$tpstress)
1538597919390:hist(regression$tposaff)
1538597935288:head(regression$tposaff)
1538597946874:regression$tposaff
1538673624221:df <- read.table('data.csv', sep = ',')
1538673639900:setwd("~/R/Working with Data/scripts")
1538673643145:View(df)
1538673658367:df <- read.table('data.csv', sep = ',')
1538673658377:View(df)
1538673780649:view(randomData.txt)
1538673784821:view('randomData.txt'')
1538673790150:view('randomData.txt')
1538673849796:setwd("~/R/Working with Data/scripts/1_base")
1538673908636:read.table('s2.randomData.txt')
1538673918368:read.table('s2/randomData.txt')
1538673930629:setwd("~/R/Working with Data/scripts")
1538673938005:read.table('scripts/s2/randomData.txt')
1538673949663:read.table('base_1/s2/randomData.txt')
1538673965633:read.table('1_base/s2/randomData.txt')
1538673990163:df<-read.table('1_base/s2/randomData.txt')
1538673996653:head(df)
1538674060120:setwd("~/R/Working with Data/scripts")
1538674292508:df<-read.table('1_base/s2/randomData.txt', sep=',', header=T, stringsAsFactors = F)
1538674306929:df<-read.table('1_base/s2/randomData.txt', sep=',', header=T, stringsAsFactors = F)
1538674306931:head(df)
1538674600057:df<-read.table('1_base/s2/randomData.txt', sep=',', header=T, stringsAsFactors = F, na.strings=c('','?','NA'))
1538674601596:head(df)
1538674614697:?colnames
1538674620838:read.table
1538674624950:?read.table
1538674746755:df<-read.table('1_base/s2/randomData.txt', col.names = ('id', 'state', 'households', 'moe',sep=',', header=T, stringsAsFactors = F, na.strings=c('','?','NA'))
1538674756230:df<-read.table('1_base/s2/randomData.txt', col.names = c('id', 'state', 'households', 'moe',sep=',', header=T, stringsAsFactors = F, na.strings=c('','?','NA'))
1538674763268:df<-read.table('1_base/s2/randomData.txt', col.names = c('id', 'state', 'households', 'moe'),sep=',', header=T, stringsAsFactors = F, na.strings=c('','?','NA'))
1538674766268:head(df)
1538674774523:df<-read.table('1_base/s2/randomData.txt', col.names = c('id', 'state', 'households', 'moe'),sep=',', header=T, stringsAsFactors = F, na.strings=c('','?','NA'))
1538674774526:head(df)
1538674957304:library('readr')
1538674999384:tbl <- read_csv('data.csv')
1538675047518:tbl <- read_csv('2_read/s7/data.csv')
1538675068982:tbl <- read_csv('2_read/s7/missing')
1538675080650:tbl <- read_csv('2_read/s7/missing.txt')
1538675116050:tbl
1538675184091:tbl <- read_csv('2_read/s7/missing.txt', na.strings=c('','?','NA'))
1538675187724:tbl
1538675199223:?read_csv
1538675217661:tbl <- read_csv('2_read/s7/missing.txt', na=c('','?','NA'))
1538675219746:tbl
1538675392128:tbl <- read_csv('1_base/s3/missing.txt', na=c('','?','NA'))
1538675393174:tbl
1538675483377:problems(tbl)
1538675570082:tbl <- read_csv('1_read/s7/missing.txt', na=c('','?','NA'), ol_types = 'i_l')
1538675579041:tbl <- read_csv('1_read/s7/missing.txt', na=c('','?','NA'), col_types = 'i_l')
1538675586729:tbl <- read_csv('2_read/s7/missing.txt', na=c('','?','NA'), col_types = 'i_l')
1538675590003:tbl
1538675687657:tbl2<-read_fwf('2_read/s9/data.txt')
1538675691566:tbl2
1538675694541:tbl2<-read_fwf('2_read/s9/data.txt')
1538675706192:?read_fwf
1538675773976:fwf_sample <- readr_example("fwf-sample.txt")
1538675773984:cat(read_lines(fwf_sample))
1538675786222:fwf_sample
1538675828008:read_fwf(fwf_sample, fwf_empty(fwf_sample, col_names = c("first", "last", "state", "ssn")))
1538675861549:read_fwf(fwf_sample, fwf_cols(name = c(1, 10), ssn = c(30, 42)))
1538675895027:read_fwf(fwf_sample, fwf_cols(name = c(1, 12), ssn = c(30, 42)))
1538675945942:read_fwf(fwf_sample, fwf_cols(name = c(1, 12), ssn = c(30, 42)))
1538675977458:tbl2
1538675987615:#fwf = fixed width file
1538675987617:tbl2<-read_fwf('2_read/s9/data.txt', fwf_cols(name = c(1, 12), ssn = c(30, 42)))
1538675994418:tbl2
1538676078007:#fwf = fixed width file
1538676078008:tbl2<-read_fwf('2_read/s9/data.txt', fwf_cols(price = c(1, 12), stock = c(30, 42), price = c(1, 12), purchased = c(30, 42)))
1538676124855:#fwf = fixed width file
1538676124856:tbl2<-read_fwf('2_read/s9/data.txt', fwf_cols(price = c(1, 12), stock item = c(30, 42), ignore = c(1, 12), purchased6 = c(30, 42)))
1538676253819:#fwf = fixed width file
1538676253820:tbl2<-read_fwf('2_read/s9/data.txt', col_names = c('price', 'stock_item', 'ignore', 'purchased'), fwf_cols(price = c(1, 12), stock_item = c(30, 42), ignore = c(1, 12), purchased = c(30, 42)))
1538676336758:#fwf = fixed width file
1538676336793:tbl2<-read_fwf('2_read/s9/data.txt', col_names = c('price', 'stock_item', 'ignore', 'purchased'))
1538676422313:tbl2<-read_fwf('2_read/s9/data.txt', fwf_cols(price = c(1, 12), 'stock_item' = c(30, 42), ignore = c(1, 12), purchased = c(30, 42)))
1538676451907:tbl2<-read_fwf('2_read/s9/data.txt', fwf_cols(price = c(1, 5), 'stock_item' = c(6, 10), ignore = c(11, 12), purchased = c(13, 42)))
1538676454895:tbl2
1538676558005:tbl2<-read_fwf('2_read/s9/data.txt', fwf_cols(price = c(1, 3), 'stock_item' = c(4, 10), ignore = c(11, 12), purchased = c(13, 42)))
1538676560975:tbl2
1538676588188:tbl2<-read_fwf('2_read/s9/data.txt', header = T, fwf_cols(price = c(1, 3), 'stock_item' = c(4, 10), ignore = c(11, 12), purchased = c(13, 42)))
1538676633742:tbl2<-read_fwf('2_read/s9/data.txt', fwf_cols(price = c(1, 3), 'stock_item' = c(4, 12), ignore = c(11, 12), purchased = c(13, 42)))
1538676634861:tbl2
1538676643128:tbl2<-read_fwf('2_read/s9/data.txt', fwf_cols(price = c(1, 3), 'stock_item' = c(4, 15), ignore = c(11, 12), purchased = c(13, 42)))
1538676656255:tbl2<-read_fwf('2_read/s9/data.txt', fwf_cols(price = c(1, 3), 'stock_item' = c(4, 15), ignore = c(15, 20), purchased = c(21, 42)))
1538676662689:tbl2<-read_fwf('2_read/s9/data.txt', fwf_cols(price = c(1, 3), 'stock_item' = c(4, 15), ignore = c(16, 20), purchased = c(21, 42)))
1538676665972:tbl2
1538676763039:tbl2<-read_fwf('2_read/s9/data.txt', fwf_cols(price = c(1, 3), 'stock_item' = c(4, 15), ignore = c(16, 22), purchased = c(23, 42)))
1538676764368:tbl2
1538676788288:tbl2<-read_fwf('2_read/s9/data.txt', fwf_cols(price = c(1, 3), 'stock_item' = c(4, 15), ignore = c(16, 25), purchased = c(26, 42)))
1538676791273:tbl2
1538676808680:tbl2<-read_fwf('2_read/s9/data.txt', fwf_cols(price = c(1, 3), 'stock_item' = c(4, 15), ignore = c(16, 30), purchased = c(31, 42)))
1538676810285:tbl2
1538676822653:tbl2<-read_fwf('2_read/s9/data.txt', skip = 1, fwf_cols(price = c(1, 3), 'stock_item' = c(4, 15), ignore = c(16, 30), purchased = c(31, 42)))
1538676824065:tbl2
1538676851460:tbl2<-read_fwf('2_read/s9/data.txt', skip = 1, fwf_cols(price = c(1, 3), 'stock_item' = c(4, 15), ignore = c(16, 18), purchased = c(31, 42)))
1538676852882:tbl2
1538676863673:tbl2<-read_fwf('2_read/s9/data.txt', skip = 1, fwf_cols(price = c(1, 3), 'stock_item' = c(4, 15), ignore = c(16, 17), purchased = c(31, 42)))
1538676864762:tbl2
1538676872738:tbl2<-read_fwf('2_read/s9/data.txt', skip = 1, fwf_cols(price = c(1, 3), 'stock_item' = c(4, 15), ignore = c(16, 17), purchased = c(18, 19)))
1538676873432:tbl2
1538677002167:tbl3<-read_excel('3_excel/s11/example.xls', sheet='missing')
1538677021012:library('readxl')
1538677025891:tbl3<-read_excel('3_excel/s11/example.xls', sheet='missing')
1538677031145:tbl3
1538677055113:range = cell_rows(1:3)
1538677062475:range
1538677080236:cell_rows(1:3)
1538677176424:excel_sheets('3_excel/s11/example.xls')
1538677244355:tbl3<-read_excel('3_excel/s11/example.xls', sheet='missing', na.strings=c('','?','NA'))
1538677249362:tbl3
1538677259691:tbl3<-read_excel('3_excel/s11/example.xls', sheet='missing', na=c('','?','NA'))
1538677261385:tbl3
1538677438358:load('_import/data.RData')
1538677447470:load('4_import/data.RData')
1538677457893:readRDS('4_import/data.rds')
1538677462154:library('readr')
1538677469672:read_rds('4_import/data.rds')
1538677510303:Sepal.Length
1538677663081:url<-'http://www.revenue.ie/en/corporate/documents/statistics/farmers/farmer-income-county.csv'
1538677664608:farmInc <- erad.csv(url, stringsAsFactors = FALSE)
1538677670693:farmInc <- read.csv(url, stringsAsFactors = FALSE)
1538677694975:head(farmInc)
1538677782659:download.file('http://cli.met.ie/cli/climate_data/webdata/dly375.zip', destfile = 'data.zip')
1538677931836:unzip('data.zip',exdir='./dly345')
1538677946803:unzip('data.zip',exdir='./dly375')
1538678092882:library('rvest')
1538678144496:webpage<-read_html('https://www.theguardian.com/football/premierleague/table')
1538678150103:webpage
1538678164090:head(webpage)
1538678271842:tblNodes <- html_nodes(webpage, 'table')
1538678301080:tblNodes
1538678465303:tblNodes <- html_nodes(webpage, 'table')
1538678467109:tbls <- htmltable(tblNodes)
1538678473046:tbls <- html_table(tblNodes)
1538678475178:premLeagueTable<-tbls[[1]]
1538678479981:prem<-premLeagueTable<-tbls[[1]]
1538678485141:View(prem)
1538678614799:premLeagueTable<-tbls[[1]]
1538678615992:View(premLeagueTable)
1538680690175:library('r2excel')
1538680722076:help(package = 'r2excel')
1538680756535:devtools::install_github('kassambra/r2excel')
1538680803566:devtools::install_github('kassambara/r2excel')
1538680841609:library('r2excel')
1538680959430:R.version
1538681138863:library(r2excel)
1538681142881:wb <- createWorkbook()
1538681146934:s1 <- createSheet(wb, sheetName = 'Iris')
1538681150885:xlsx.addTable(wb, sheet = s1, data = iris)
1538681155632:head(wb)
1538681162260:wb
1538681168814:saveWorkbook(wb, file = 'Flowers.xlsx')
1538681533524:rm()
1538681739456:day21 <- ChickWeight$Time==21
1538681739458:ave21 <- ave(ChickWeight$weight[day21])[1]
1538681739460:#How many chicks weigh more than this average?
1538681739461:greaterave21 <-ChickWeight$weight > ave21
1538681739463:length(greaterave21[greaterave21 == T])
1538681739466:#How many chicks are on each diet?
1538681739467:count(ChickWeight$Diet)
1538681773433:?count
1538899319008:swirl()
1538899330066:swirl
1538899334319:?swirl
1538899403663:library('swirl')
1538899426195:ls()
1538899436040:rm(list=ls())
1538899441136:swirl()
1538899472317:swirl()
1538899575496:swirl()
1538901342866:c(0.5, 55, -10, 6)
1538901354813:num_vect <- c(0.5, 55, -10, 6)
1538901384149:tf <- num_vect(num_vect < 1)
1538901398798:tf <- num_vect[num_vect < 1]
1538901409286:tf <- num_vect < 1
1538901421464:tf
1538901466338:num_vect >= 6
1538902028926:c('My', 'name', 'is')
1538902042767:c("My", "name", "is")
1538902054549:my_char <- c('My', 'name', 'is')
1538902060961:my_char
1538902091305:paste(my_char, collapse = ' ')
1538902120864:c(my_char, 'Kate')
1538902136842:my_name <- c(my_char, 'Kate')
1538902140979:my_name
1538902159092:paste(my_name, collapse = ' ')
1538902190757:paste('Hello', 'world!', sep = ' ')
1538902229058:paste(c(1:3), c('X', 'Y', 'Z'), sep = '')
1538902254085:paste(LETTERS, 1:4, sep == '-')
1538902258482:paste(LETTERS, 1:4, sep = '-')
1538902325050:x <- c(44, NA, 5, NA)
1538902330712:3*x
1538902346569:y <- rnorm(1000)
1538902357459:z <- rep(NA, 1000)
1538902362414:x
1538902364961:y
1538902368300:z
1538902407692:my_date <- sample(c(y,z), 100)
1538902424030:my_data <- sample(c(y,z), 100)
1538902445245:my_na <- is.na(my_data)
1538902452389:my_na
1538902475274:my_data == NA
1538902513210:sum(my_na)
1538902519365:my_data
1538902532508:0/0
1538902539489:Inf - Inf
1538903283929:x
1538903298958:x[1:10]
1538903355573:x[is.na(x)]
1538903383651:y<-[!is.na(x)]
1538903390304:y<-x[!is.na(x)]
1538903393369:y
1538903428364:y[y>0]
1538903438786:x[x>0]
1538903466895:x[!is.na(x) & x>0]
1538903572117:x[c(3,5,7)]
1538903585994:x[0]
1538903594790:x[3000]
1538903616715:x[c(-2, -10)]
1538903626459:x[-c(2, 10)]
1538903671313:vect <- c(foo=11, bar=2, norf=NA)
1538903678927:vect
1538903687727:names(vect)
1538903701226:vect2 <- c(11, 2, NA)
1538903728275:names(vect) <- c('foo', 'bar', 'norf')
1538903737577:names(vect2) <- c('foo', 'bar', 'norf')
1538903748885:identical(vect, vect2)
1538903770485:vect['bar']
1538903785684:vect[c('foo', 'bar')]
1538904330501:my_vector <- 1:20
1538904337428:my_vector
1538904346460:dim(my_vector)
1538904362221:length(my_vector)
1538904382117:dim(my_vector) <- c(4,5)
1538904397610:dim(my_vector)
1538904408764:attributes(my_vector)
1538904423258:my_vector
1538904432898:class(my_vector)
1538904445727:my_matrix <- my_vector
1538904458962:?matrix
1538904503428:my_matrix2 <- matrix(1:20, 4, 5)
1538904521603:identical(my_matrix, my_matrix2)
1538904563617:patients <- c('Bill', 'Gina', 'Kelly', 'Sean')
1538904580382:cbind(patients, my_matrix)
1538904622823:my_data <- data.frame(patients, my_matrix)
1538904627920:my_data
1538904645862:class(data.frame)
1538904658034:class(my_data)
1538904734269:cnames <- c('patient', 'age', 'weight', 'bp', 'rating', 'test')
1538904762922:colnames(my_data, cnames)
1538904769642:?colnames
1538904788214:colnames(my_data) <- cnames
1538904791994:my_data
1538905837660:TRUE == TRUE
1538905866538:(F == T) == F
1538905881229:(FALSE == TRUE) == FALSE
1538905887177:6 ==7
1538905900158:6<7
1538905913913:10<=10
1538905981279:5!=7
1538906009609:!(5==7)
1538906066447:FALSE & FALSE
1538906096471:TRUE & c(TRUE, FALSE, FALSE)
1538906115827:TRUE && c(TRUE, FALSE, FALSE)
1538906143883:TRUE | c(TRUE, FALSE, FALSE)
1538906150835:TRUE || c(TRUE, FALSE, FALSE)
1538906212211:5>8 || 6 !=8 && 4>3.9
1538906332638:isTRUE(6>7)
1538906336933:isTRUE(6>4)
1538906396043:identacal('twins', 'twins')
1538906400722:identical('twins', 'twins')
1538906440184:xor(5==6, !FALSE)
1538906490274:ints <- sample(10)
1538906494449:ints
1538906550311:ints>5
1538906578155:?which
1538906617948:which(ints>7)
1538906915152:any(ints<0)
1538906922025:all(ints>0)
1538906990273:sys.date()
1538906997653:Sys.Date()
1538907103594:mean(c(2,4,5))
1538907159049:submit()
1538907180075:boring_function('My first function!')
1538907202800:boring_function()
1538907208052:boring_function
1538907267470:submit()
1538907284873:submit()
1538907300429:my_mean(c(4, 5, 10))
1538907480558:submit()
1538907489707:remainder(5)
1538907510959:remainder(11, 5)
1538907548792:remainder(divisor = 11, num = 5)
1538907576472:remainder(4, div=2)
1538907593089:args(remainder)
1538907708695:submit()
1538907798651:evaluate(sd, c(1.4,3.6,7.9,8.8))
1538907840492:evaluate(function(x){x+1}, 6)
1538907877255:evaluate(function(x){x[1]}, c(8,4,0))
1538907888042:evaluate(function(x){x[length(x)]}, c(8,4,0))
1538907895097:?paste
1538907931078:paste('Programming', 'is', 'fun!')
1538908330720:submit()
1538908350275:telegram('hello','help')
1538908380829:telegram(c(1, 2, 3))
1538909328772:submit()
1538909362113:mad_libs('dublin','happy','person')
1538909844245:submit()
1538909880395:submit()
1538909912626:'I' %p% 'love' %p% 'R!'
1538910239542:head(flags)
1538910250477:dim(flags)
1538910278574:viewinfo()
1538910306291:class(flags)
1538910349371:cls_list <- lapply(flags, class)
1538910354252:cls_list
1538910365901:class(cls_list)
1538910632475:as.character(cls_list)
1538910707883:cls_vect <-  sapply(flags, class)
1538910720758:class(cls_vect)
1538910752176:sum(flags$orange)
1538910790260:flag_colours <-flags[,11:17]
1538910797599:flag_colors <-flags[,11:17]
1538910806808:head(flag_colors)
1538910831024:lapply(flag_colors,sum)
1538910842836:sapply(flag_colors,sum)
1538910867554:sapply(flag_colors,mean)
1538910915749:flag_shapes <- flags[,19:23]
1538910950729:lapply(flag_shapes, range)
1538910967651:shape_mat <- sapply(flag_shapes, range)
1538910973244:shape_mat
1538910990644:class(shape_mat)
1538911229577:unique(c(93,4,5,5,6,6))
1538911233357:unique(c(3,4,5,5,6,6))
1538911247759:unique(c(3,4,5, 5,5,6,6))
1538911279081:unique_vals <- apply(flags, unique)
1538911285054:unique_vals <- lapply(flags, unique)
1538911290662:unique_vals
1538911318165:(unique_vals, length)
1538911333759:lapply(unique_vals, length)
1538911351042:sapply(unique_vals, length)
1538911366998:sapply(flags, unique)
1538911493538:lapply(unique_vals, function(elem) elem[2])
1538914517478:sapply(flags, unique)
1538914574723:vapply(flags, unique, numeric(1))
1538914577777:ok()
1538914597321:sapply(flags, class)
1538914934584:vapply(flags, class, character(1))
1538914967254:?tapply
1538914988397:table(flags$landmass)
1538915004977:table(flags$animate)
1538915097039:tapply(flags$animate, flags$landmass, mean)
1538915148894:tapply(flags$population, flags$red, summary)
1538915177164:tapply(flags$population, flags$landmass, summary)
1538915385689:ls()
1538915395223:class(plants)
1538915417321:dim(plants)
1538915427920:nrows(plants)
1538915433340:nrow(plants)
1538915439427:ncol(plants)
1538915451540:object.size(plants)
1538915467402:names(plants)
1538915485161:head(plants)
1538915508692:head(plants, 10)
1538915520319:tail(plants, 15)
1538915537787:summary(plants)
1538915641527:table(plants$Active_Growth_Period)
1538915657520:str(plants)
1538915711224:?sample
1538915741805:sample(1:6, 4, replace = TRUE)
1538915749055:sample(1:6, 4, replace = TRUE)
1538915772558:sample(1:20, 10)
1538915784574:LETTERS
1538915794282:sample(LETTERS)
1538915868481:flips <- sample(0:1, 100, replacement = TRUE, prob = c(0.3, 0.7))
1538915878105:flips <- sample(0:1, 100, replace = TRUE, prob = c(0.3, 0.7))
1538915904386:flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
1538915909536:flips
1538915927168:summary(flips)
1538915936182:sum(flips)
1538915949099:?rbinom
1538916000147:rbinom(1, size=100, prob=0.7)
1538916122558:rbinom(100, size=1, prob=0.7)
1538916133385:rbinom(n=100, size=1, prob=0.7)
1538916147462:rflips2 <- rbinom(n=100, size=1, prob=0.7)
1538916154041:flips2 <- rbinom(n=100, size=1, prob=0.7)
1538916158053:flips2
1538916165241:sum(flips2)
1538916174051:?rnorm
1538916199022:rnorm(10)
1538916231497:rnorm(10, mean=100, sd=25)
1538916257389:rpois(5, 10)
1538916272473:replicate(100, rpois(5, 10))
1538916284413:my_pois <- replicate(100, rpois(5, 10))
1538916289937:my_pois
1538916310063:cm <- col_means(my_pois)
1538916317404:cm <- colMeans(my_pois)
1538916323533:hist(cm)
1538916449178:dl <- Sys.Date()
1538916456646:d1 <- Sys.Date()
1538916461044:class(d1)
1538916471394:unclass(d1)
1538916481790:d1
1538916507612:d2 <- as.Date('1969-01-01')
1538916517056:unclass(d2)
1538916536910:t1 <- Sys.time()
1538916540145:t1
1538916561529:class(t1)
1538916590194:unclass(t1)
1538916632181:t2 <- as.POSIXlt(Sys.time())
1538916638580:class(t2)
1538916649291:t2
1538916659763:unclass(t2)
1538916678169:str(unclass(t2))
1538916689816:t2$min
1538916795788:weekdays(d1)
1538916805432:months(t1)
1538916819408:quarters(t2)
1538916858363:t3 <- "October 17, 1986 08:24"
1538916914442:t4<-strptime(t3, '%B %d, %Y %H:%M')
1538916920376:t4
1538916926254:class(t4)
1538916952540:Sys.time()> t1
1538916961354:Sys.time() - t1
1538917001900:difftime(Sys.time(), t1, units = 'days')
1538917038066:data(cars)
1538917196690:?cars
1538917212293:head(cars)
1538917226180:plot(cars)
1538917255708:?plot
1538917341722:plot(x = cars$speed, y = cars$dist)
1538917374403:plot(y = cars$speed, x = cars$dist)
1538917408119:plot(x = cars$speed, y = cars$dist)
1538917448779:plot(x = cars$speed, y = cars$dist, xlab = 'Speed')
1538917462724:plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')
1538917488503:plot(x = cars$speed, y = cars$dist, ylab = 'Stopping Distance')
1538917492460:plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')
1538917539215:plot(cars, main = 'My Plot')
1538917584318:plot(cars, sub = 'My Plot Subtitle')
1538917608641:?par
1538917622013:plot(cars, col = 2)
1538917635571:plot(cars, xlim = c(10, 15))
1538917652268:plot(cars, pch = 2)
1538917809057:library(mtcars)
1538917819659:library('mtcars')
1538917825103:m<-mtcars
1538917830486:data(mtcars)
1538917846550:?boxplot
1538917891343:boxplot(mpg ~ cyl, mtcars)
1538917919492:hist(mtcars$mpg)
1538917965408:?InstallCourses
1538917996636:InstallCourses
1538917998929:InstallCourses()
1538918099306:install_course('Data Analysis')
1538918122145:install.packages("swirl")
1538918128321:install.packages("swirl")
1538918134874:install.packages("swirl")
1538918140181:install.packages("swirl")
1538918169929:install_course('Data Analysis')
1538918178644:library('swirl')
1538918183280:install_course('Data Analysis')
1538918204312:swirl()
1538921902534:install_course("Getting and Cleaning Data")
1538921909737:swirl()
1538921977557:read.csv(path2csv, stringsAsFactors = FALSE)
1538921997050:mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
1538922052666:dim(mydf)
1538922058401:head(mydf)
1538922113069:library(dplyr)
1538922125724:packageVersion('dplyr')
1538922155913:cran <- tbl_df(mydf)
1538922164448:rm('mydf')
1538922182051:print(cran)
1538922191082:cran
1538922309882:?select
1538922470658:select(cran, ip_id, package, counrty)
1538922481831:select(cran, ip_id, package, counrtry)
1538922485566:select(cran, ip_id, package, country)
1538922561258:5:20
1538922588602:select(cran, r_arch:counrty)
1538922594048:select(cran, r_arch:country)
1538922614056:select(cran, country:r_arch)
1538922621945:cran
1538922645226:select(cran, -time)
1538922689535:-5:20
1538922701322:-(5:20)
1538922728558:select(cran,-(X,size))
1538922742113:select(cran,-(X:size))
1538922783366:filter(cran, package =='swirl')
1538922888271:filter(cran, r_version =='3.1.1', country =='US')
1538922923983:?Comparison
1538922960988:filter(cran, r_version <= '3.0.2', country =='India')
1538922971063:filter(cran, r_version <= '3.0.2', country =='IN')
1538923011868:filter(cran, country =='US' | country == 'IN')
1538923050181:filter(cran, size > 1000 & r_os == 'linux-gnu')
1538923056915:filter(cran, size > 1000, r_os == 'linux-gnu')
1538923067488:filter(cran, size > 100500, r_os == 'linux-gnu')
1538923095177:is.na(c(3,5,NA,10))
1538923106833:!is.na(c(3,5,NA,10))
1538923153440:filter(cran, r_version[is.na[r_version]])
1538923167508:r_version[is.na[r_version]
1538923170645:]
1538923194284:filter(cran, !is.na[r_version])
1538923212417:filter(cran, !is.na(r_version))
1538923277338:cran2 <- select(cran, size:ip_id)
1538923292599:arrange(cran2, ip_id)
1538923304726:arrange(cran2, desc(ip_id))
1538923331179:arrange(cran2, package, ip_id)
1538923355742:arrange(cran2, counrty, desc(r_version), ip_id)
1538923361522:arrange(cran2, country, desc(r_version), ip_id)
1538923388380:cran3 <- select(cran, ip_id, package, size)
1538923391192:cran3
1538923438784:mutate(cran3, size_mb = size / 2^20)
1538923471270:mutate(cran3, size_gb = size_mb / 2^20)
1538923491582:cran3
1538923515192:mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
1538923524178:mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
1538923555247:mutate(cran3, correct_size = size + 1000)
1538923590691:summarise(cran, ave_bytes = mean(size))
1538923606898:summarize(cran, ave_bytes = mean(size))
1538923618568:summarize(cran, avg_bytes = mean(size))
1538924465380:library(dplyr)
1538924489771:tbl_df(mydf)
1538924497012:cran <- tbl_df(mydf)
1538924506478:rm('mydf')
1538924509625:cran
1538924519776:?group_by
1538924552442:by_package <- group_by(cran, package)
1538924558310:by_package
1538924719242:summarize(by_package, mean(size))
1538924875953:?n
1538924882394:?n_distinct
1538924953962:submit()
1538924959932:pack_sum
1538925090771:quantile(pack_sum$count, probs = 0.99)
1538925139428:top_counts <- filter(pack_sum, n() > 679)
1538925151232:top_counts <- filter(pack_sum, count > 679)
1538925156391:top_counts
1538925176652:View(top_counts)
1538925566867:top_counts_sorted <-  arrange(top_counts, desc(count))
1538925574786:View(top_counts_sorted)
1538925896139:quantile(pack_sum$cunique, probs = 0.99)
1538925900845:quantile(pack_sum$unique, probs = 0.99)
1538925933095:top_unique <- filter(pack_sum, unique > 465)
1538925941791:View(top_unique)
1538926012332:top_unique_sorted <- arrange(top_unique, desc(unique)
1538926015271:)
1538926023412:View(top_unique_sorted)
1538926313815:submit()
1538926358418:submit()
1538926435600:submit()
1538926451431:View(result3)
1538926890305:submit()
1538926931752:submit()
1538926941963:submit()
1538926991206:submit()
1538927021444:submit()
1538927067825:submit()
1538927827613:head(ChickWeight)
1538927847704:filter(ChickWeight, time = 21)
1538927852643:filter(ChickWeight, time == 21)
1538927866023:filter(ChickWeight, Time == 21)
1538927875830:?dplyr
1538927967679:ChickWeight %<% filter(Time == 21) %<% select(weight)
1538927991597:ChickWeight '%<%' filter(Time == 21)
1538927996006:ChickWeight %<% filter(Time == 21)
1538928020488:ChickWeight %>% filter(Time == 21) %>% select(weight)
1538928046461:mean(ChickWeight %>% filter(Time == 21) %>% select(weight))
1538928074863:ave(ChickWeight %>% filter(Time == 21) %>% select(weight))
1538928111647:ave21_ <- ChickWeight %>% filter(Time == 21) %>% select(weight)
1538928116081:ave(ave21_)
1538928132255:mean(ChickWeight %>% filter(Time == 21) %>% select(Weight))
1538928142818:mean(ChickWeight %>% filter(Time == 21) %>% select(weight))
1538928158141:day21 <- ChickWeight$Time==21
1538928158142:ave21 <- ave(ChickWeight$weight[day21])[1]
1538928165838:ave21
1538928199564:greaterave21 <-ChickWeight$weight > ave21
1538928199568:length(greaterave21[greaterave21 == T])
1538928207200:count(ChickWeight$Diet)
1538928225234:?count
1538931420754:count(ChickWeight, chick$Diet)
1538931440032:count(ChickWeight, ChickWeight$Diet)
1538931467941:n(ChickWeight)
1538931472390:?n
1538931505627:summerize(ChickWeight,n())
1538931510871:summerise(ChickWeight,n())
1538931517004:summarise(ChickWeight,n())
1538931892590:ChickWeight %>% group_by(weight)
1538932271719:ChickWeight %>% group_by(weight)
1538932308390:ChickWeight %>% group_by(weight) %>% n()
1538932310800:ChickWeight %>% group_by(weight) %>% n
1538932318635:ChickWeight %>% group_by(weight) %>% count()
1538932341764:ChickWeight %>% group_by(Diet) %>% count()
1538932373693:tdf <- as.data.frame(Titanic)
1538932381667:head(tdf)
1538932425922:tdf %>% filter(Class == 'Crew')
1538932494569:tdf %>% group_by(Class)
1538932545628:tdf %>% filter(Class == 'Crew') %>% group_by(Survived)
1538932588277:tdf %>% filter(Class == 'Crew') %>% select(Class, Survived, Freq) %>% group_by(Survived)
1538932603566:tdf %>% filter(Class == 'Crew') %>% select(Class, Survived, Freq)
1538932621227:tdf %>% filter(Class == 'Crew') %>% select(Class, Survived, Freq) %>% group_by(Survived) %>% sum()
1538932636958:tdf %>% filter(Class == 'Crew') %>% select(Class, Survived, Freq) %>% group_by(Survived) %>% sum(Freq)
1538932676257:?sum
1538932724046:?aggreagte
1538932777854:tdf %>% filter(Class == 'Crew') %>% select(Class, Survived, Freq) %>% group_by(Survived) %>% summarise(Freq)
1538932782755:?summarise
1538932808829:tdf %>% filter(Class == 'Crew') %>% select(Class, Survived, Freq) %>% group_by(Survived) %>% summarise(sum(Freq))
1539109807418:install.packages (c ( “tm”, “wordcloud”, “RCurl”, “XML”, “SnowballC”))
1539109887042:install.packages(c ( “tm”, “wordcloud”,“RCurl”,“XML”,“SnowballC”))
1539109988025:install.packages(c ( 'tm', 'wordcloud','RCurl','XML'','SnowballC'))
1539109997582:install.packages(c ( 'tm', 'wordcloud','RCurl','XML','SnowballC'))
1539110025434:library(tm)
1539110052616:library(tm)
1539110062067:library(wordcloud)
1539110159038:library(tm)
1539110166774:library(wordcloud)
1539110178207:library(SnowballC)
1539110194900:source('/Users/brendan.tierney/htmltotext.R')
1539110356426:source('C:\Users\Kate\Documents\R\htmltotext.R')
1539110368504:source('C:/Users/Kate/Documents/R/htmltotext.R')
1539110506047:data1 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html')
1539110508372:data2 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/odm/index.html')
1539110508644:data3 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-technologies/overview/index.html')
1539110508867:data4 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-enterprise/overview/index.html')
1539110515117:data1
1539110595033:data <- c(data1, data2)
1539110595037:data <- c(data, data3)
1539110595041:data <- c(data, data4)
1539110648238:?Corpus
1539110751979:txt_corpus <- Corpus(VetorSource(data))
1539110803944:txt_corpus <- Corpus(VectorSource(data))
1539110833003:summary(txt_corpus)
1539110950858:tm_map <- tm_map (txt_corpus, stripWhitespace) # remove white space
1539110974881:tm_map <- tm_map (tm_map, removePunctuation) # remove punctuations
1539111078682:data <- c(data1, data2)
1539111078685:data <- c(data, data3)
1539111078688:data <- c(data, data4)
1539111078691:#convert into a corpus
1539111078693:txt_corpus <- Corpus(VectorSource(data))
1539111078696:summary(txt_corpus)
1539111078707:tm_map <- tm_map (txt_corpus, stripWhitespace) # remove white space
1539111078725:tm_map <- tm_map (tm_map, removePunctuation) # remove punctuations
1539111078731:tm_map <- tm_map (tm_map, removeNumbers) # to remove numbers
1539111078737:tm_map <- tm_map (tm_map, removeWords, stopwords(“english”)) # to remove stop words(like ‘as’ ‘the’ etc….)
1539111078737:# tm_map <- tm_map (tm_map, stemDocument)
1539111078742:tm_map <- tm_map (tm_map, removeWords, c(“work”, “use”, “java”, “new”, “support”))
1539111078742:inspect(tm_map)
1539111115824:Matrix <- TermDocumentMatrix(tm_map) # terms in rows
1539111137660:Matrix
1539111154101:matrix_c <- as.matrix (Matrix)
1539111176400:matrix_c
1539111192326:freq <- sort (rowSums (matrix_c)) # frequency count of the data
1539111196508:frq
1539111200525:freq
1539111251094:tmdata <- data.frame (words=names(freq), freq)
1539111251113:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, “Dark2”))
1539111269287:data1 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html')
1539111269491:data2 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/odm/index.html')
1539111269670:data3 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-technologies/overview/index.html')
1539111269821:data4 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-enterprise/overview/index.html')
1539111270002:data <- c(data1, data2)
1539111270003:data <- c(data, data3)
1539111270004:data <- c(data, data4)
1539111270006:#convert into a corpus
1539111270007:txt_corpus <- Corpus(VectorSource(data))
1539111270008:summary(txt_corpus)
1539111270012:tm_map <- tm_map (txt_corpus, stripWhitespace) # remove white space
1539111270020:tm_map <- tm_map (tm_map, removePunctuation) # remove punctuations
1539111270021:tm_map <- tm_map (tm_map, removeNumbers) # to remove numbers
1539111270025:tm_map <- tm_map (tm_map, removeWords, stopwords(“english”)) # to remove stop words(like ‘as’ ‘the’ etc….)
1539111270025:# tm_map <- tm_map (tm_map, stemDocument)
1539111270025:tm_map <- tm_map (tm_map, removeWords, c(“work”, “use”, “java”, “new”, “support”))
1539111270029:inspect(tm_map)
1539111270037:Matrix <- TermDocumentMatrix(tm_map) # terms in rows
1539111270046:matrix_c <- as.matrix (Matrix)
1539111270047:freq <- sort (rowSums (matrix_c)) # frequency count of the data
1539111270049:freq
1539111270279:tmdata <- data.frame (words=names(freq), freq)
1539111270286:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, “Dark2”))
1539111296569:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, 'Dark2'))
1539111712380:data1 <- htmlToText('https://www.irishtimes.com/news/ireland/irish-news/going-donuts-are-irish-consumers-having-a-sugar-rush-of-spending-1.3654902')
1539111712493:data2 <- htmlToText('https://www.dublinlive.ie/news/dublin-news/youd-think-never-seen-donut-15251127')
1539111712922:data3 <- htmlToText('https://www.theguardian.com/world/2018/oct/09/dublin-krispy-kreme-store-doughnut-rush-ireland')
1539111713658:data4 <- htmlToText('https://www.joe.ie/life-style/krispy-kreme-dissection-643096')
1539111713876:data <- c(data1, data2)
1539111713878:data <- c(data, data3)
1539111713880:data <- c(data, data4)
1539111713881:#convert into a corpus
1539111713882:txt_corpus <- Corpus(VectorSource(data))
1539111713884:summary(txt_corpus)
1539111713889:tm_map <- tm_map (txt_corpus, stripWhitespace) # remove white space
1539111713895:tm_map <- tm_map (tm_map, removePunctuation) # remove punctuations
1539111713902:tm_map <- tm_map (tm_map, removeNumbers) # to remove numbers
1539111713902:tm_map <- tm_map (tm_map, removeWords, stopwords(“english”)) # to remove stop words(like ‘as’ ‘the’ etc….)
1539111713906:# tm_map <- tm_map (tm_map, stemDocument)
1539111713907:tm_map <- tm_map (tm_map, removeWords, c(“work”, “use”, “java”, “new”, “support”))
1539111713908:inspect(tm_map)
1539111713914:Matrix <- TermDocumentMatrix(tm_map) # terms in rows
1539111713930:matrix_c <- as.matrix (Matrix)
1539111713931:freq <- sort (rowSums (matrix_c)) # frequency count of the data
1539111713932:freq
1539111714179:tmdata <- data.frame (words=names(freq), freq)
1539111714192:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, 'Dark2'))
1539111739358:data1 <- htmlToText('https://www.irishtimes.com/news/ireland/irish-news/going-donuts-are-irish-consumers-having-a-sugar-rush-of-spending-1.3654902')
1539111739445:data2 <- htmlToText('https://www.dublinlive.ie/news/dublin-news/youd-think-never-seen-donut-15251127')
1539111739781:data3 <- htmlToText('https://www.theguardian.com/world/2018/oct/09/dublin-krispy-kreme-store-doughnut-rush-ireland')
1539111740709:data4 <- htmlToText('https://www.joe.ie/life-style/krispy-kreme-dissection-643096')
1539111740962:data <- c(data1, data2)
1539111740964:data <- c(data, data3)
1539111740968:data <- c(data, data4)
1539111740969:#convert into a corpus
1539111740971:txt_corpus <- Corpus(VectorSource(data))
1539111740972:summary(txt_corpus)
1539111755179:txt_corpus
1539111762477:tm_map <- tm_map (txt_corpus, stripWhitespace) # remove white space
1539111767473:tm_map
1539111775431:View(tm_map)
1539111784169:tm_map[1]
1539111790968:tm_map[[1]]
1539111805175:class(tm_map)
1539111855680:tm_map$Content
1539111876634:tm_map[[1]]$Content
1539111919025:inspect(tm_map)
1539111949071:tm_map <- tm_map (tm_map, removePunctuation) # remove punctuations
1539111952930:inspect(tm_map)
1539111965110:tm_map <- tm_map (tm_map, removeNumbers) # to remove numbers
1539111969331:inspect(tm_map)
1539111978215:tm_map <- tm_map (tm_map, removeWords, stopwords(“english”)) # to remove stop words(like ‘as’ ‘the’ etc….)
1539112002443:data <- c(data1, data2)
1539112002444:data <- c(data, data3)
1539112002445:data <- c(data, data4)
1539112002447:#convert into a corpus
1539112002448:txt_corpus <- Corpus(VectorSource(data))
1539112002449:summary(txt_corpus)
1539112002454:tm_map <- tm_map (txt_corpus, stripWhitespace) # remove white space
1539112002461:tm_map <- tm_map (tm_map, removePunctuation) # remove punctuations
1539112002466:tm_map <- tm_map (tm_map, removeNumbers) # to remove numbers
1539112002467:tm_map <- tm_map (tm_map, removeWords, stopwords('english')) # to remove stop words(like ‘as’ ‘the’ etc….)
1539112002518:# tm_map <- tm_map (tm_map, stemDocument)
1539112002519:tm_map <- tm_map (tm_map, removeWords, c(“work”, “use”, “java”, “new”, “support”))
1539112002520:inspect(tm_map)
1539112002529:Matrix <- TermDocumentMatrix(tm_map) # terms in rows
1539112002540:matrix_c <- as.matrix (Matrix)
1539112002541:freq <- sort (rowSums (matrix_c)) # frequency count of the data
1539112002543:freq
1539112002872:tmdata <- data.frame (words=names(freq), freq)
1539112002885:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, 'Dark2'))
1539112301492:data1 <- htmlToText('https://aib.ie/')
1539112301966:data2 <- htmlToText('https://business.aib.ie/#_ga=2.188816617.395712607.1539112170-1663419180.1537963421')
1539112302595:data3 <- htmlToText('https://aib.ie/corporate')
1539112303147:data4 <- htmlToText('https://aib.ie/fxcentre')
1539112303684:data <- c(data1, data2)
1539112303688:data <- c(data, data3)
1539112303692:data <- c(data, data4)
1539112303697:#convert into a corpus
1539112303700:txt_corpus <- Corpus(VectorSource(data))
1539112303704:summary(txt_corpus)
1539112303712:tm_map <- tm_map (txt_corpus, stripWhitespace) # remove white space
1539112303734:tm_map <- tm_map (tm_map, removePunctuation) # remove punctuations
1539112303738:tm_map <- tm_map (tm_map, removeNumbers) # to remove numbers
1539112303742:tm_map <- tm_map (tm_map, removeWords, stopwords('english')) # to remove stop words(like ‘as’ ‘the’ etc….)
1539112303768:# tm_map <- tm_map (tm_map, stemDocument)
1539112303770:tm_map <- tm_map (tm_map, removeWords, c(“work”, “use”, “java”, “new”, “support”))
1539112303771:inspect(tm_map)
1539112303778:Matrix <- TermDocumentMatrix(tm_map) # terms in rows
1539112303784:matrix_c <- as.matrix (Matrix)
1539112303786:freq <- sort (rowSums (matrix_c)) # frequency count of the data
1539112303787:freq
1539112304145:tmdata <- data.frame (words=names(freq), freq)
1539112304155:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, 'Dark2'))
1539112370179:data1 <- htmlToText('https://www.irishtimes.com/news/ireland/irish-news/going-donuts-are-irish-consumers-having-a-sugar-rush-of-spending-1.3654902')
1539112370276:data2 <- htmlToText('https://www.dublinlive.ie/news/dublin-news/youd-think-never-seen-donut-15251127')
1539112370685:data3 <- htmlToText('https://www.theguardian.com/world/2018/oct/09/dublin-krispy-kreme-store-doughnut-rush-ireland')
1539112371435:data4 <- htmlToText('https://www.joe.ie/life-style/krispy-kreme-dissection-643096')
1539112371679:#data1 <- htmlToText('https://aib.ie/')
1539112371680:#data2 <- htmlToText('https://business.aib.ie/#_ga=2.188816617.395712607.1539112170-1663419180.1537963421')
1539112371681:#data3 <- htmlToText('https://aib.ie/corporate')
1539112371682:#data4 <- htmlToText('https://aib.ie/fxcentre')
1539112371683:data <- c(data1, data2)
1539112371684:data <- c(data, data3)
1539112371685:data <- c(data, data4)
1539112371687:#convert into a corpus
1539112371688:txt_corpus <- Corpus(VectorSource(data))
1539112371689:summary(txt_corpus)
1539112371695:tm_map <- tm_map (txt_corpus, stripWhitespace) # remove white space
1539112371709:tm_map <- tm_map (tm_map, removePunctuation) # remove punctuations
1539112371713:tm_map <- tm_map (tm_map, removeNumbers) # to remove numbers
1539112371717:tm_map <- tm_map (tm_map, removeWords, stopwords('english')) # to remove stop words(like ‘as’ ‘the’ etc….)
1539112371760:# tm_map <- tm_map (tm_map, stemDocument)
1539112371761:tm_map <- tm_map (tm_map, removeWords, c(dublin))
1539112371764:inspect(tm_map)
1539112371774:Matrix <- TermDocumentMatrix(tm_map) # terms in rows
1539112371784:matrix_c <- as.matrix (Matrix)
1539112371786:freq <- sort (rowSums (matrix_c)) # frequency count of the data
1539112371787:freq
1539112372063:tmdata <- data.frame (words=names(freq), freq)
1539112372075:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, 'Dark2'))
1539112386131:rm()
1539112413145:library(tm)
1539112413147:library(wordcloud)
1539112413148:library(SnowballC)
1539112413150:source('C:/Users/Kate/Documents/R/htmltotext.R')
1539112413153:#data1 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html')
1539112413154:#data2 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/odm/index.html')
1539112413155:#data3 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-technologies/overview/index.html')
1539112413156:#data4 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-enterprise/overview/index.html')
1539112413157:data1 <- htmlToText('https://www.irishtimes.com/news/ireland/irish-news/going-donuts-are-irish-consumers-having-a-sugar-rush-of-spending-1.3654902')
1539112413253:data2 <- htmlToText('https://www.dublinlive.ie/news/dublin-news/youd-think-never-seen-donut-15251127')
1539112413652:data3 <- htmlToText('https://www.theguardian.com/world/2018/oct/09/dublin-krispy-kreme-store-doughnut-rush-ireland')
1539112414552:data4 <- htmlToText('https://www.joe.ie/life-style/krispy-kreme-dissection-643096')
1539112414768:#data1 <- htmlToText('https://aib.ie/')
1539112414769:#data2 <- htmlToText('https://business.aib.ie/#_ga=2.188816617.395712607.1539112170-1663419180.1537963421')
1539112414770:#data3 <- htmlToText('https://aib.ie/corporate')
1539112414772:#data4 <- htmlToText('https://aib.ie/fxcentre')
1539112414775:data <- c(data1, data2)
1539112414776:data <- c(data, data3)
1539112414777:data <- c(data, data4)
1539112414777:#convert into a corpus
1539112414781:txt_corpus <- Corpus(VectorSource(data))
1539112414781:summary(txt_corpus)
1539112414791:tm_map <- tm_map (txt_corpus, stripWhitespace) # remove white space
1539112414800:tm_map <- tm_map (tm_map, removePunctuation) # remove punctuations
1539112414808:tm_map <- tm_map (tm_map, removeNumbers) # to remove numbers
1539112414812:tm_map <- tm_map (tm_map, removeWords, stopwords('english')) # to remove stop words(like ‘as’ ‘the’ etc….)
1539112414853:# tm_map <- tm_map (tm_map, stemDocument)
1539112414854:tm_map <- tm_map (tm_map, removeWords, c(dublin))
1539112414857:inspect(tm_map)
1539112414866:Matrix <- TermDocumentMatrix(tm_map) # terms in rows
1539112414873:matrix_c <- as.matrix (Matrix)
1539112414877:freq <- sort (rowSums (matrix_c)) # frequency count of the data
1539112414877:freq
1539112415235:tmdata <- data.frame (words=names(freq), freq)
1539112415246:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, 'Dark2'))
1539112441293:rm()
1539112461868:library(tm)
1539112461875:library(wordcloud)
1539112461881:library(SnowballC)
1539112461887:source('C:/Users/Kate/Documents/R/htmltotext.R')
1539112461898:#data1 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html')
1539112461898:#data2 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/odm/index.html')
1539112461902:#data3 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-technologies/overview/index.html')
1539112461903:#data4 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-enterprise/overview/index.html')
1539112461907:data1 <- htmlToText('https://www.irishtimes.com/news/ireland/irish-news/going-donuts-are-irish-consumers-having-a-sugar-rush-of-spending-1.3654902')
1539112462039:data2 <- htmlToText('https://www.dublinlive.ie/news/dublin-news/youd-think-never-seen-donut-15251127')
1539112462473:data3 <- htmlToText('https://www.theguardian.com/world/2018/oct/09/dublin-krispy-kreme-store-doughnut-rush-ireland')
1539112463241:data4 <- htmlToText('https://www.joe.ie/life-style/krispy-kreme-dissection-643096')
1539112483413:data <- c(data1, data2)
1539112483418:data <- c(data, data3)
1539112483423:data <- c(data, data4)
1539112491293:txt_corpus <- Corpus(VectorSource(data))
1539112491302:summary(txt_corpus)
1539112505395:tm_map <- tm_map (txt_corpus, stripWhitespace) # remove white space
1539112505410:tm_map <- tm_map (tm_map, removePunctuation) # remove punctuations
1539112505420:tm_map <- tm_map (tm_map, removeNumbers) # to remove numbers
1539112505428:tm_map <- tm_map (tm_map, removeWords, stopwords('english')) # to remove stop words(like ‘as’ ‘the’ etc….)
1539112505514:# tm_map <- tm_map (tm_map, stemDocument)
1539112505520:tm_map <- tm_map (tm_map, removeWords, c(dublin))
1539112505530:inspect(tm_map)
1539112505556:Matrix <- TermDocumentMatrix(tm_map) # terms in rows
1539112505581:matrix_c <- as.matrix (Matrix)
1539112505587:freq <- sort (rowSums (matrix_c)) # frequency count of the data
1539112505592:freq
1539112506263:tmdata <- data.frame (words=names(freq), freq)
1539112506279:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, 'Dark2'))
1539112598238:library(tm)
1539112598240:library(wordcloud)
1539112598242:library(SnowballC)
1539112598244:source('C:/Users/Kate/Documents/R/htmltotext.R')
1539112598248:#data1 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html')
1539112598249:#data2 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/odm/index.html')
1539112598250:#data3 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-technologies/overview/index.html')
1539112598250:#data4 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-enterprise/overview/index.html')
1539112598252:data1 <- htmlToText('https://www.irishtimes.com/news/ireland/irish-news/going-donuts-are-irish-consumers-having-a-sugar-rush-of-spending-1.3654902')
1539112598353:data2 <- htmlToText('https://www.dublinlive.ie/news/dublin-news/youd-think-never-seen-donut-15251127')
1539112598704:data3 <- htmlToText('https://www.theguardian.com/world/2018/oct/09/dublin-krispy-kreme-store-doughnut-rush-ireland')
1539112599469:data4 <- htmlToText('https://www.joe.ie/life-style/krispy-kreme-dissection-643096')
1539112706573:data1 <- htmlToText('https://www.irishtimes.com/news/ireland/irish-news/krispy-kreme-curtails-blanchardstown-24-7-drive-thru-due-to-complaints-1.3650150')
1539112706671:data2 <- htmlToText('https://www.dublinlive.ie/news/dublin-news/youd-think-never-seen-donut-15251127')
1539112707033:data3 <- htmlToText('https://www.theguardian.com/world/2018/oct/09/dublin-krispy-kreme-store-doughnut-rush-ireland')
1539112707767:data4 <- htmlToText('https://www.joe.ie/life-style/krispy-kreme-dissection-643096')
1539112753398:data1 <- htmlToText('https://www.irishtimes.com/news/ireland/irish-news/krispy-kreme-curtails-blanchardstown-24-7-drive-thru-due-to-complaints-1.3650150')
1539112753400:data2 <- htmlToText('https://www.dublinlive.ie/news/dublin-news/youd-think-never-seen-donut-15251127')
1539112753401:data3 <- htmlToText('https://www.theguardian.com/world/2018/oct/09/dublin-krispy-kreme-store-doughnut-rush-ireland')
1539112753403:data4 <- htmlToText('https://www.joe.ie/life-style/krispy-kreme-dissection-643096')
1539112764097:library(tm)
1539112764103:library(wordcloud)
1539112764109:library(SnowballC)
1539112764116:source('C:/Users/Kate/Documents/R/htmltotext.R')
1539112764126:#data1 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html')
1539112764129:#data2 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/odm/index.html')
1539112764131:#data3 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-technologies/overview/index.html')
1539112764133:#data4 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-enterprise/overview/index.html')
1539112764137:data1 <- htmlToText('https://www.irishtimes.com/news/ireland/irish-news/krispy-kreme-curtails-blanchardstown-24-7-drive-thru-due-to-complaints-1.3650150')
1539112764243:data2 <- htmlToText('https://www.dublinlive.ie/news/dublin-news/youd-think-never-seen-donut-15251127')
1539112764642:data3 <- htmlToText('https://www.theguardian.com/world/2018/oct/09/dublin-krispy-kreme-store-doughnut-rush-ireland')
1539112765328:data4 <- htmlToText('https://www.joe.ie/life-style/krispy-kreme-dissection-643096')
1539112816468:data1 <- htmlToText('http://www.thejournal.ie/krispy-kreme-doughnuts-dublin-blanchardstown-4268511-Oct2018/')
1539112816806:data2 <- htmlToText('https://www.dublinlive.ie/news/dublin-news/youd-think-never-seen-donut-15251127')
1539112817234:data3 <- htmlToText('https://www.theguardian.com/world/2018/oct/09/dublin-krispy-kreme-store-doughnut-rush-ireland')
1539112818050:data4 <- htmlToText('https://www.joe.ie/life-style/krispy-kreme-dissection-643096')
1539112826334:data <- c(data1, data2)
1539112826338:data <- c(data, data3)
1539112826342:data <- c(data, data4)
1539112833606:txt_corpus <- Corpus(VectorSource(data))
1539112833613:summary(txt_corpus)
1539112844069:inspect(tm_map)
1539112854162:Inspect(tm_map)
1539112858301:tm_map <- tm_map (txt_corpus, stripWhitespace) # remove white space
1539112862661:Inspect(tm_map)
1539112865439:inspect(tm_map)
1539112883010:tm_map <- tm_map (tm_map, removePunctuation) # remove punctuations
1539112893071:inspect(tm_map)
1539112907459:tm_map <- tm_map (tm_map, removeNumbers) # to remove numbers
1539112912214:inspect(tm_map)
1539112925704:tm_map <- tm_map (tm_map, removeWords, stopwords('english')) # to remove stop words(like ‘as’ ‘the’ etc….)
1539112930975:inspect(tm_map)
1539113005563:tm_map <- tm_map (tm_map, removeWords, c('dublin', 'krispy', 'creme'))
1539113005567:inspect(tm_map)
1539113050134:tm_map <- tm_map (tm_map, removeWords, c('dublin', 'krispy', 'creme', 'Krispy', 'Kreme'))
1539113050139:inspect(tm_map)
1539113079104:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, 'Dark2'))
1539113089942:Matrix <- TermDocumentMatrix(tm_map) # terms in rows
1539113089956:matrix_c <- as.matrix (Matrix)
1539113089959:freq <- sort (rowSums (matrix_c)) # frequency count of the data
1539113089959:freq
1539113090487:tmdata <- data.frame (words=names(freq), freq)
1539113090503:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, 'Dark2'))
1539113115928:?tm_map
1539113222128:library(tm)
1539113222162:library(wordcloud)
1539113222167:library(SnowballC)
1539113222172:source('C:/Users/Kate/Documents/R/htmltotext.R')
1539113222180:#data1 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html')
1539113222186:#data2 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/odm/index.html')
1539113222189:#data3 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-technologies/overview/index.html')
1539113222189:#data4 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-enterprise/overview/index.html')
1539113222193:data1 <- htmlToText('http://www.thejournal.ie/krispy-kreme-doughnuts-dublin-blanchardstown-4268511-Oct2018/')
1539113224693:data2 <- htmlToText('https://www.dublinlive.ie/news/dublin-news/youd-think-never-seen-donut-15251127')
1539113225136:data3 <- htmlToText('https://www.theguardian.com/world/2018/oct/09/dublin-krispy-kreme-store-doughnut-rush-ireland')
1539113225868:data4 <- htmlToText('https://www.joe.ie/life-style/krispy-kreme-dissection-643096')
1539113226095:#data1 <- htmlToText('https://aib.ie/')
1539113226096:#data2 <- htmlToText('https://business.aib.ie/#_ga=2.188816617.395712607.1539112170-1663419180.1537963421')
1539113226098:#data3 <- htmlToText('https://aib.ie/corporate')
1539113226099:#data4 <- htmlToText('https://aib.ie/fxcentre')
1539113226100:data <- c(data1, data2)
1539113226102:data <- c(data, data3)
1539113226105:data <- c(data, data4)
1539113226105:#convert into a corpus
1539113226105:txt_corpus <- Corpus(VectorSource(data))
1539113226109:summary(txt_corpus)
1539113226117:tm_map <- tm_map (txt_corpus, stripWhitespace) # remove white space
1539113226132:tm_map <- tm_map (tm_map, removePunctuation) # remove punctuations
1539113226138:tm_map <- tm_map (tm_map, removeNumbers) # to remove numbers
1539113226143:tm_map <- tm_map (tm_map, removeWords, stopwords('english')) # to remove stop words(like ‘as’ ‘the’ etc….)
1539113226204:tm_map <- tm_map (tm_map, stemDocument)
1539113226212:tm_map <- tm_map (tm_map, removeWords, c('dublin', 'krispy', 'creme', 'Krispy', 'Kreme'))
1539113226216:inspect(tm_map)
1539113226224:Matrix <- TermDocumentMatrix(tm_map) # terms in rows
1539113226238:matrix_c <- as.matrix (Matrix)
1539113226239:freq <- sort (rowSums (matrix_c)) # frequency count of the data
1539113226241:freq
1539113226613:tmdata <- data.frame (words=names(freq), freq)
1539113226629:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, 'Dark2'))
1539113308632:library(tm)
1539113308635:library(wordcloud)
1539113308636:library(SnowballC)
1539113308638:source('C:/Users/Kate/Documents/R/htmltotext.R')
1539113308641:#data1 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html')
1539113308642:#data2 <- htmlToText('http://www.oracle.com/technetwork/database/options/advanced-analytics/odm/index.html')
1539113308643:#data3 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-technologies/overview/index.html')
1539113308643:#data4 <- htmlToText('http://www.oracle.com/technetwork/database/database-technologies/r/r-enterprise/overview/index.html')
1539113308644:data1 <- htmlToText('http://www.thejournal.ie/krispy-kreme-doughnuts-dublin-blanchardstown-4268511-Oct2018/')
1539113308882:data2 <- htmlToText('https://www.dublinlive.ie/news/dublin-news/youd-think-never-seen-donut-15251127')
1539113309270:data3 <- htmlToText('https://www.theguardian.com/world/2018/oct/09/dublin-krispy-kreme-store-doughnut-rush-ireland')
1539113309951:data4 <- htmlToText('https://www.joe.ie/life-style/krispy-kreme-dissection-643096')
1539113310125:#data1 <- htmlToText('https://aib.ie/')
1539113310126:#data2 <- htmlToText('https://business.aib.ie/#_ga=2.188816617.395712607.1539112170-1663419180.1537963421')
1539113310127:#data3 <- htmlToText('https://aib.ie/corporate')
1539113310128:#data4 <- htmlToText('https://aib.ie/fxcentre')
1539113310129:data <- c(data1, data2)
1539113310130:data <- c(data, data3)
1539113310132:data <- c(data, data4)
1539113310133:#convert into a corpus
1539113310133:txt_corpus <- Corpus(VectorSource(data))
1539113310135:summary(txt_corpus)
1539113310140:tm_map1 <- tm_map (txt_corpus, stripWhitespace) # remove white space
1539113310151:tm_map2 <- tm_map (tm_map1, removePunctuation) # remove punctuations
1539113310155:tm_map3 <- tm_map (tm_map2, removeNumbers) # to remove numbers
1539113310156:tm_map4 <- tm_map (tm_map3, removeWords, stopwords('english')) # to remove stop words(like ‘as’ ‘the’ etc….)
1539113310211:tm_map5 <- tm_map (tm_map4, stemDocument)
1539113326445:?identical
1539113340353:identical(tm_map1, tm_map2)
1539113346990:identical(tm_map1, tm_map1)
1539113357649:identical(tm_map2, tm_map3)
1539113364650:identical(tm_map3, tm_map4)
1539113375175:identical(tm_map4, tm_map5)
1539113379591:identical(tm_map5, tm_map5)
1539198313192:tm_map <- tm_map (tm_map, stemDocument)
1539198350616:rm()
1539199227249:?csv
1539199321658:setwd("~/R/Stats/CA")
1539199345973:mydata = read.xls("sleep5ED.xls")
1539199349022:mydata = read.xls("mydata.xls")mydata = read.xls("mydata.xls")
1539199367684:#Load in dataset
1539199367685:library(gdata)
1539199367687:mydata = read.xls("sleep5ED.xls")
1539199409638:install.packages('gdata')
1539199419490:library(gdata)
1539199422574:mydata = read.xls("sleep5ED.xls")
1539200375818:library(foreign)
1539200389017:regression <- read.spss("regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1539200413743:setwd("~/R/Stats/wk4")
1539200415583:regression <- read.spss("regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1539200441905:colnames(regression) <- tolower(colnames(regression))
1539200454665:head(regression)
1539200863002:salary<-readRDS("salary.rds")
1539200863008:names(salary)
1539200874639:setwd("~/R/Stats/wk1")
1539200877368:salary<-readRDS("salary.rds")
1539200877373:names(salary)
1539200895258:salary$gender
1539200907058:str(salary$gender)
1539200919701:summary(salary$gender)
1539200931030:summary (salary$salary)
1539200971444:summary(salary)
1539201055799:library('plyr')
1539201062245:count(salary$gender)
1539201085189:tab<-table(salary$gender, salary$rank)
1539201085193:addmargins(tab)
1539201085206:addborders(tab)
1539201085210:tab #show the table with frequencies
1539201085217:prop.table(tab) # shows probabilities
1539201095805:?addborders
1539201102088:??addborders
1539201142344:addBorders(tab)
1539201159301:addborder(tab)
1539201238765:getmode <- function(v)
1539201238766:{
1539201238767:uniqv <- unique(v)
1539201238768:uniqv[which.max(tabulate(match(v,uniqv)))]
1539201238768:}
1539201246203:getmode(salary$salary)
1539201250495:median(salary$salary)
1539201254880:mean(salary$salary)
1539201264288:meansal <- mean(salary$salary)
1539201264290:#and then display it on screen
1539201264291:meansal
1539201271690:print(meansal, digits=1)
1539201278028:range(salary$salary)
1539201282894:quantile(salary$salary)
1539201282900:#to get 1st quantil
1539201282901:x=quantile(salary$salary); x[1]
1539201301042:IQR(salary$salary)
1539201301049:#Variance
1539201301051:var(salary$salary)
1539201301061:#Standard deviation
1539201301064:sd(salary$salary)
1539201306236:round(sd(salary$salary,2)) #rounded to 2 decimal places
1539278517052:setwd("~/R/Working with Data")
1539278524584:url <- 'http://archive.ics.uci.edu/ml/ machine-learning-databases/00222/bank.zip'
1539278556124:download.file(url, destfile = 'bank.zip')
1539278568519:url <- 'http://archive.ics.uci.edu/ml/ machine-learning-databases/00222/bank.zip'
1539278568522:download.file(url, destfile = 'bank.zip')
1539278627027:url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank.zip'
1539278627028:download.file(url, destfile = 'bank.zip')
1539278663193:unzip('bank.zip', list = T)
1539278710037:View(bankData)
1539278721557:bankData <- unzip('bank.zip', list = T)
1539278721560:View(bankData)
1539278834592:import('bank-full.csv')
1539278845627:import_csv('bank-full.csv')
1539278860174:??import
1539278901560:read.table('bank-full.csv')
1539278945049:read.table('bank/bank-full.csv')
1539278969842:ls()
1539278977808:wd()
1539278981358:getwd()
1539279001269:read.table('bank.zip/bank-full.csv')
1539279075480:unzip('bank.zip', exdir = '.bankData')
1539279082413:read.table('bank.zip/bank-full.csv')
1539279103248:library(readr)
1539279195027:bankData <- read_delim('./bankData/bank-full.csv', delim = ';', na = c('unknown'))
1539279221850:unzip('bank.zip', exdir = './bankData')
1539279221882:library(readr)
1539279221885:bankData <- read_delim('./bankData/bank-full.csv', delim = ';', na = c('unknown'))
1539279243245:View(bankData)
1539279282546:is.na(bankData$education)
1539279297409:sum(is.na(bankData$education))
1539279400689:dim(bankData)
1539279407394:length(bankData)
1539279417346:count(bankData)
1539279483789:nrow(bankData)
1539279597858:100*sum(is.na(bankData$education))/nrow(bankData)
1539279660952:missing <- sum(is.na(bankData$education))
1539279660954:#What percent of the total is this?
1539279660955:perc <- 100*missing/nrow(bankData)
1539279660956:round(perc, 2)
1539279695303:all_missing <- sum(is.na(bankData))
1539279700668:all_missing
1539279748893:all_missing <- is.na(bankData)
1539279751676:all_missing
1539279848555:colSums(all_missing)
1539279882633:colSums(all_missing)/nrow(bankData)
1539279905017:all_perc <- 100*colSums(all_missing)/nrow(bankData)
1539279924715:round(all_perc, 2)
1539280239184:aveAge<- mean(bankData$age)
1539280239188:avgDuration <- mean(bankData$duration)
1539280239191:avgPdays <- mean(bankData$pdays)
1539280639924:fivenum(bankData$age)
1539280685660:summary(bankData)
1539280713600:summary(bankData$education)
1539283354150:library('ggplot2')
1539283354761:View('mpg')
1539283369383:View(mpg)
1539283420100:plot(displ, hwy)
1539283442048:qplot(mpg$displ, mpg$hwy)
1539283472609:qplot(data = mpg, x = displ, y = hwy)
1539283541724:?ggplot
1539283676153:qplot(data = mpg, x = displ, y = hwy, colour = I('red'))
1539283689929:qplot(data = mpg, x = displ, y = hwy, colour = ('blue'))
1539283698364:qplot(data = mpg, x = displ, y = hwy, colour = I('blue'))
1539283733884:qplot(data = mpg, x = displ, y = hwy, colour = I('blue'), alpha = I(0.5))
1539283764194:qplot(data = mpg, x = displ, y = hwy, colour = class, alpha = I(0.5))
1539283802688:qplot(data = mpg, x = displ, y = hwy, colour = year, alpha = I(0.5))
1539283816505:qplot(data = mpg, x = displ, y = hwy, colour = year)
1539283889897:qplot(data = mpg, x = displ, y = hwy, colour = manufacturer)
1539283949728:qplot(data = mpg, x = displ, y = hwy, shape = manufacturer)
1539284090319:qplot(data = mpg, x = displ, y = hwy, colour = class) + facet_grid(rows = cols)
1539284112000:qplot(data = mpg, x = displ, y = hwy, colour = class) + facet_grid(drv ~ .)
1539284204978:qplot(data = mpg, x = displ, y = hwy, colour = class) + facet_grid(drv ~ cyl)
1539284332998:qplot(data = mpg, x = displ, y = hwy, colour = class, geom = 'point')
1539284356611:qplot(data = mpg, x = displ, y = hwy, colour = class, geom = 'smooth')
1539284370336:qplot(data = mpg, x = displ, y = hwy, geom = 'smooth')
1539284435488:qplot(data = mpg, x = displ, y = hwy, geom = c('point', 'smooth'))
1539284481545:qplot(data = mpg, x = class, y = hwy, geom = c('point', 'box'))
1539284502677:qplot(data = mpg, x = class, y = hwy, geom = 'boxplot')
1539284852218:qplot(data = mpg, reorder(class, hwy, fUN = median), hwy, geom = 'boxplot', xlab = 'class')
1539284923117:qplot(data = mpg, class, hwy, geom = 'boxplot', xlab = 'class')
1539284934903:qplot(data = mpg, reorder(class, hwy, fUN = median), hwy, geom = 'boxplot', xlab = 'class')
1539284948179:qplot(data = mpg, reorder(class, hwy, fUN = median), hwy, geom = 'boxplot')
1539285091464:#Diamonds
1539285091465:qplot(data = diamonds, x, z)
1539285126276:qplot(data = diamonds, x)
1539285134664:qplot(data = diamonds, cut)
1539285335400:qplot(data = diamonds, x)
1539285353694:qplot(data = diamonds, x, binwidth = 0.01)
1539429728228:install.packages("rmarkdown")
1539429783336:library(rmarkdown)
1539429857800:knitr::opts_chunk$set(echo = TRUE)
1539429857902:summary(cars)
1539429858040:plot(pressure)
1539430083335:render('R Notes.rmd')
1539430099402:library(rmarkdown)
1539430102604:render("1-example.Rmd")
1539430131074:setwd("~/R")
1539430132973:render("R Notes.Rmd")
1539430210441:knit_params_ask("R Notes.Rmd")
1539430219343:knit("R Notes.Rmd")
1539430239851:install.packages("knitr")
1539430247326:install.packages("��knitr��")
1539430273239:install.packages('knitr')
1539430277651:install.packages("knitr")
1539430285024:install.packages("knitr")
1539430288711:install.packages("knitr")
1539430296211:knit("R Notes.Rmd")
1539430301417:knitr("R Notes.Rmd")
1539430317478:library(knitr)
1539430320636:knitr("R Notes.Rmd")
1539430325911:knit("R Notes.Rmd")
1539431860821:library(help = 'base')
1539432098815:vignette(devtools)
1539432116086:vignette('devtools')
1539432130472:vignette('knitr')
1539432587723:vignette('abind')
1539432592166:vignette(abind)
1539432621634:vignette(package = 'abind')
1539432767160:browseVignettes()
1539435645010:trump <- list('Donald', 71, F)
1539435649285:trump[1]
1539435656372:trump[[1]]
1539435671015:x<- c('a', 'b', 'c')
1539435673410:x
1539435676116:x[1]
1539435679693:x[[1]]
1539435788627:trump <- list(name = 'Donald', age = 71, democrat = F, spouses = c('Ivana', 'Marla', 'Melania'))
1539435791972:trimp
1539435794640:trump
1539435803737:trump <- list(name = 'Donald', age = 71, democrat = F, spouses = c('Ivana', 'Marla', F))
1539435806864:trump
1539435821636:trump <- list(name = 'Donald', age = 71, democrat = F, spouses = list('Ivana', 'Marla', F))
1539435824691:trump
1539444026572:plot(cars)
1539444160366:View(ChickWeight)
1539444206966:ChickWeight(time>21)
1539444223616:ChickWeight(ChickWeight$time>21)
1539444241905:ChickWeight[ChickWeight$time>21]
1539444248746:ChickWeight[time>21]
1539444269838:ChickWeight[ChickWeight$time>21]$weight
1539444278384:ChickWeight
1539444298900:ChickWeight[Time>21]
1539444311741:ChickWeight[ChickWeight$Time>21]
1539444321303:View(ChickWeight[ChickWeight$Time>21])
1539444364673:ChickWeight[ChickWeight$Time>=21]
1539444381154:View(ChickWeight[ChickWeight$Time>=21])
1539444388851:View(ChickWeight[ChickWeight$Time>20])
1539444402347:ChickWeight[ChickWeight$Time>20]
1539444410494:ChickWeight$Time
1539444424604:ChickWeight[ChickWeight$Time>21]
1539444432222:ChickWeight[ChickWeight$Time=21]
1539444436648:ChickWeight[ChickWeight$Time==21]
1539444443035:ChickWeight[ChickWeight$Time>20]
1539444560974:ChickWeight[ChickWeight$Time>20, ]
1539444574433:ChickWeight[ChickWeight$Time>=20, ]
1539444579273:ChickWeight[ChickWeight$Time>=21, ]
1539444585864:ChickWeight[ChickWeight$Time>=21, "weight"]
1539444598832:mean(ChickWeight[ChickWeight$Time>=21, "weight"])
1539444703820:plot(cars)
1539444762382:mean(ChickWeight[ChickWeight$Time>=21, "weight"])
1539444807521:mean21 <- mean(ChickWeight[ChickWeight$Time>=21, "weight"])
1539444809898:mean21
1539444842864:ChickWeight[weight > mean_21]
1539444856490:ChickWeight[ChickWeight$weight > mean_21]
1539444862022:ChickWeight[ChickWeight$weight > mean21]
1539444873496:ChickWeight[ChickWeight$weight > mean21, ]
1539444878456:ChickWeight[weight > mean21, ]
1539444924728:ChickWeight[ChickWeight$Time>=21, "weight"]
1539445298692:?tidyverse
1539445303846:??tidyverse
1539445348346:library(tidyverse)
1539445395261:vignette(dplyr)
1539445404787:vignette('dplyr')
1539445457897:ChickWeight[weight > mean21, "Chick"]
1539445470012:ChickWeight[ChickWeight$weight > mean21, "Chick"]
1539445522425:typeof(ChickWeight[ChickWeight$weight > mean21, "Chick"])
1539445558566:?unique
1539445577586:unique(ChickWeight[ChickWeight$weight > mean21, "Chick"])
1539445596617:length(unique(ChickWeight[ChickWeight$weight > mean21, "Chick"]))
1539445605586:length(ChickWeight[ChickWeight$weight > mean21, "Chick"])
1539445641792:?group_by
1539445746607:count(ChickWeight, "Diet")
1539445767482:unique(ChickWeight)
1539445803110:unique(ChickWeight$Chick, ChickWeight$Diet)
1539445837403:?select
1539445894658:chic2 <- select(ChickWeight$Chick, ChickWeight$Diet)
1539445930216:library(dplyr)
1539445932775:chic2 <- select(ChickWeight$Chick, ChickWeight$Diet)
1539445951883:chic2 <- select(ChickWeight, Chick, Diet)
1539446030940:chic2
1539446038989:distinct(chic2)
1539446089820:library(data.table)
1539446098912:?data.table
1539446235179:?grouped_df
1539446409565:aggregate(chic2$Chick, by=list(chic2$Diet), FUN=count)
1539446426181:aggregate(chic2$Chick, by=list(chic2$Diet), FUN=mean
1539446428087:)
1539446445035:aggregate(chic2$Chick, by=list(chic2$Diet), FUN=sum())
1539446449603:aggregate(chic2$Chick, by=list(chic2$Diet), FUN=sum
1539446450995:)
1539447940705:swirl()
1539447948003:library('swirl')
1539447950476:swirl()
1539448034441:mydf <- read.csv(path2csv, stringsAsFactors = F)
1539448050989:mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
1539448062132:dim(mydf)
1539448066487:headmydf
1539448070683:headmy(df)
1539448075403:head(mydf)
1539448088400:library(dplyr)
1539448107961:packageVersion('dplyr')
1539448148492:cran <- tbl_df(mydf)
1539448158835:rm('mydf')
1539448168316:cran
1539448204926:?select
1539448267017:select(cran, ip_id, package, country)
1539448292346:5:20
1539448303916:skip()
1539448316271:skip()
1539448320770:skip()
1539448326090:skip()
1539448331632:skip()
1539448338052:skip()
1539448343349:skip()
1539448356415:skip()
1539448401455:skip()
1539448407031:skip()
1539448412852:skip()
1539448424854:skip()
1539448437501:skip()
1539448481226:skip()
1539448487254:skip()
1539448489174:skip()
1539448508066:skip()
1539448518086:skip()
1539448526160:skip()
1539448533066:skip()
1539448536038:skip()
1539448542405:skip()
1539448545179:skip()
1539448559008:skip()
1539448571103:skip()
1539448577329:skip()
1539448585004:skip()
1539448662948:summarize(ChickWeight, mean(weght))
1539448666301:summarize(ChickWeight, mean(weight))
1539448680570:summarize(ChickWeight, mean(weight), days >= 21)
1539448689748:summarize(ChickWeight, mean(weight), time >= 21)
1539448705219:summarize(ChickWeight, mean(weight), Time >= 21)
1539448725130:swirl()
1539448813812:skip()
1539448819583:skip()
1539448822788:swirl()
1539448845135:skip()
1539448854251:skip()
1539448861776:skip()
1539448866628:skip()
1539448868810:swirl()
1539448898595:skip()
1539448901670:skip()
1539448905067:skip()
1539448907961:skip()
1539448911453:skip()
1539448913738:skip()
1539448917598:skip()
1539448967855:skip()
1539449350174:skip()
1539449371036:exit()
1539449382556:swirl()
1539449513513:by_diet <- group_by(ChickWeight, Diet)
1539449517523:by_diet
1539449573328:chick_sum <- summarize(by_diet, n_distinct(Chick))
1539449577511:chick_sum
1539449629155:plot(cars)
1539449670416:plot(cars)
1539449714053:plot(cars)
1539449740782:mean21 <- mean(ChickWeight[ChickWeight$Time>=21, "weight"])
1539449740795:mean21
1539449830744:length(unique(ChickWeight[ChickWeight$weight > mean21, "Chick"]))
1539449834848:by_diet <- group_by(ChickWeight, Diet)
1539449834916:summarize(by_diet, n_distinct(Chick))
1539449907064:tdf <- data.frame(Titanic)
1539449917507:tdf <- data.frame(Titanic)
1539449917529:head(tdf)
1539450325025:swirl()
1539450336972:skip()
1539450351612:skip()
1539450361816:skip()
1539450377445:?filter
1539450501656:filter(tdf, Class == 'Crew)
1539450595644:is.filter <- dplyr::is.filter
1539450853326:?filter
1539450895811:remove.packages(stats, dplyr)
1539450906270:esc()
1539450917094:bye()
1539450920383:remove.packages(stats, dplyr)
1539450942512:filter(tdf, Class == 'Crew)
1539450953289:?filter
1539451326752:library(dplyr)
1539451357788:dplyr::filter
1539451390102:filter(tdf, Class == 'Crew)
1539451401447:)
1539451428278:filter(starwars, species == "Human")
1539451448056:filter(tdf, Class == "Crew")
1539451460759:filter(tdf, Class == "Crew")
1539451478852:swirl()
1539451492926:skip()
1539451501503:skip()
1539451509603:skip()
1539451512177:skip()
1539451529940:skip()
1539451533936:skip()
1539451538260:skip()
1539451541581:skip()
1539451543356:skip()
1539451565855:skip()
1539451593335:skip()
1539451614987:skip()
1539451632785:bye()
1539451731190:tdf_crew <- filter(tdf, Class == "Crew")
1539451731255:group_by(tdf_crew, Sex)
1539451788345:tdf_crew <- filter(tdf, Class == "Crew")
1539451788369:tdf_group <- group_by(tdf_crew, Sex)
1539451788424:summarise(tdf_group, sum(Freq))
1539451820607:tdf_crew <- filter(tdf, Class == "Crew")
1539451820635:tdf_group <- group_by(tdf_crew, Sex, Class)
1539451820681:summarise(tdf_group, sum(Freq))
1539451861140:tdf_group <- group_by(tdf, Class, Survived)
1539451861727:summarise(tdf_group, sum(Freq))
1539452381548:tdf_crew <- filter(tdf, Class == "Crew")
1539452381571:tdf_group <- group_by(tdf_crew, Sex)
1539452381779:summarise(tdf_group,sum(Freq))
1539452408095:tdf_crew <- filter(tdf, Class == "Crew")
1539452408119:tdf_group <- group_by(tdf_crew, Survived)
1539452408157:summarise(tdf_group,sum(Freq))
1539452415647:tdf_crew <- filter(tdf, Class == "Crew")
1539452416250:tdf_group <- group_by(tdf_crew, Survived, Class)
1539452416289:summarise(tdf_group,sum(Freq))
1539452726439:twentyOne <- ChickWeight$Time > 20
1539452726545:oldChicks <- ChickWeight[twentyOne, ]
1539452726560:avgWeight <- mean(oldChicks$weight)
1539452726562:sum(oldChicks$weight > avgWeight)
1539452726565:firstDay <- ChickWeight$Time == 0
1539452726567:distinctChicks <- ChickWeight[firstDay, ]
1539452726571:summary(distinctChicks$Diet)
1539452737431:avgWeight
1539452785459:typeof(Titanic)
1539452795191:typeof(tdf)
1539452807887:tdf <- as.data.frame(Titanic)
1539452807937:head(tdf)
1539452817855:typeof(tdf)
1539453318316:survivalStats <- as.data.frame(Titanic)
1539453334608:typeof(survivalStats)
1539518637918:salary<-readRDS("salary.rds")
1539518712214:setwd("~/R/Stats/wk1")
1539519326892:salary<-readRDS("salary.rds")
1539519326899:names(salary)
1539519326905:#You can look at the data in a variable by entering its name at the command prompt
1539519326907:salary$gender
1539519340495:str(salary$gender)
1539519378215:#Or get a relevant statistical summary for a variable e.g. gender - this will give use a frequencies as gender is categorical
1539519378219:summary(salary$gender)
1539519406462:summary (salary$salary)
1539519411535:#Or get a summary of all the variables in the dataset"
1539519411538:summary(salary)
1539519425485:library('plyr')
1539519432884:count(salary$gender)
1539519448357:tab<-table(salary$gender, salary$rank)
1539519463357:addmargins(tab)
1539519463364:addborder(tab) ##cannot find this
1539519463366:tab #show the table with frequencies
1539519463371:prop.table(tab)
1539519491040:?prop.table
1539519497006:?prop.table
1539519510958:getmode <- function(v)
1539519510959:{
1539519510960:uniqv <- unique(v)
1539519510961:uniqv[which.max(tabulate(match(v,uniqv)))]
1539519510962:}
1539519531892:getmode(salary$salary)
1539519574997:?match
1539519583485:??match
1539519589268:?match
1539520858921:library('plyr')
1539520915047:#To see a Contingency table/Cross tabulation you need to create a table to see rank by gender how many of each gender hold each rank
1539520915055:tab<-table(salary$gender, salary$rank)
1539520915094:addmargins(tab)
1539520915149:addborder(tab) ##cannot find this
1539520928538:#To see a Contingency table/Cross tabulation you need to create a table to see rank by gender how many of each gender hold each rank
1539520928547:tab<-table(salary$gender, salary$rank)
1539520928560:addmargins(tab)
1539520928581:addborders(tab) ##cannot find this
1539520943362:?addborder
1539520946371:?addborders
1539520951570:??addborders
1539520954603:??addborder
1539521020329:#To see a Contingency table/Cross tabulation you need to create a table to see rank by gender how many of each gender hold each rank
1539521020337:tab<-table(salary$gender, salary$rank)
1539521020354:addmargins(tab)
1539521020563:#addborders(tab) ##cannot find this
1539521020567:tab #show the table with frequencies
1539521020584:prop.table(tab) # shows probabilities
1539521084048:names(salary)
1539521406650:salary<-readRDS("salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539521406887:library('plyr')
1539521419634:salary<-readRDS("salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539521419719:library('plyr')
1539521424164:names(salary)
1539521465477:str(salary)
1539521535162:summary(salary$gender)
1539521535181:summary(salary$salary)
1539521545634:summary(salary$gender)
1539521545658:summary(salary$salary)
1539521597542:count(salary$gender)
1539521752107:getmode <- function(v)
1539521752115:{
1539521752123:uniqv <- unique(v)
1539521752130:uniqv[which.max(tabulate(match(v,uniqv)))]
1539521752137:}
1539521752262:getmode(salary$salary)
1539521821570:median(salary$salary)
1539521825185:mean(salary$salary)
1539522538071:quantile(salary$salary)
1539522538106:x=quantile(salary$salary); x[1] #to get 1st quantile
1539522538130:IQR(salary$salary) #Interquartile Range
1539522560945:var(salary$salary)
1539528000094:setwd("~/R/Stats/wk1")
1539531887758:?readRDS
1539531952223:#Initiate ggplot2
1539531952228:library(ggplot2)
1539532189035:salary<-readRDS("salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539532194429:names(salary)
1539532208639:setwd("~/R/Stats/wk2")
1539532211084:salary<-readRDS("salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539532231077:setwd("~/R/Stats/wk1")
1539532233233:salary<-readRDS("salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539532287243:salary<-readRDS("Stats\wk1\salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539532308672:salary<-readRDS("Stats/wk1/salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539532321936:setwd("~/R")
1539532323761:salary<-readRDS("Stats/wk1/salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539532473439:day21 <- ChickWeight$Time==21
1539532473451:ave21 <- ave(ChickWeight$weight[day21])[1]
1539532473456:ave21
1539532503189:setwd("~/R")
1539532509164:salary<-readRDS("Stats/wk1/salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539532514582:salary<-readRDS("Stats/wk1/salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539532531424:library('plyr')
1539532535497:salary<-readRDS("Stats/wk1/salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539532597190:names(salary)
1539532601477:#Open the dataset and display the column names
1539532601478:salary<-readRDS("salary.rds")
1539532614901:setwd("~/R/Stats/wk1")
1539532619242:names(salary)
1539532622569:#Open the dataset and display the column names
1539532622571:salary<-readRDS("salary.rds")
1539532646062:salary<-readRDS("Stats/wk1/salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539532662200:getwd()
1539532675352:salary<-readRDS("salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539532724428:library('plyr')
1539532728564:salary<-readRDS("salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539533086577:library(foreign)
1539533086807:#Read in the file
1539533086814:regression <- read.spss("regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1539533125779:library(foreign)
1539533125790:#Read in the file
1539533125797:regression <- read.spss("regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1539533180868:colnames(regression)
1539533180927:colnames(regression) <- tolower(colnames(regression))
1539533197785:colnames(regression) <- tolower(colnames(regression))
1539533197801:colnames(regression)
1539533266676:hist(regression$normexam)
1539533310331:hist(regression$normexam)
1539533310607:mean(regression$normexam)
1539533310625:median(regression$normexam)
1539533310643:mode(regression$normexam)
1539533427176:hist(regression$standlrt)
1539533427219:mean(regression$standlrt)
1539533427237:median(regression$standlrt)
1539533427257:mode(regression$standlrt)
1539538701098:hist(regression$normexam)
1539538701131:mean(regression$normexam)
1539538701147:median(regression$normexam)
1539538701163:getmode <- function(v)
1539538701171:{
1539538701178:uniqv <- unique(v)
1539538701185:uniqv[which.max(tabulate(match(v,uniqv)))]
1539538701192:}
1539538701203:getmode(regression$normexam)
1539538796452:hist(regression$standlrt)
1539538796488:mean(regression$standlrt)
1539538796507:median(regression$standlrt)
1539538796779:getmode(regression$standlrt)
1539538881004:plot(regression$normexam,regression$standlrt)
1539538881208:cor(regression$normexam,regression$standlrt)
1539539147407:hist(regression$tpstress) #needs to be ordinal
1539539156759:#hist(regression$tpstress) #needs to be ordinal
1539539156768:head(regression$tposaff)
1539539156781:hist(regression$tnegaff)
1539539168968:#hist(regression$tpstress) #needs to be ordinal
1539539168976:head(regression$tposaff)
1539539168989:#hist(regression$tnegaff)
1539539168997:#hist(regression$tlifesat)
1539539169005:#hist(regression$tslfest)
1539539186218:#hist(regression$tpstress) #needs to be ordinal
1539539186226:regression$tposaff
1539539186239:#hist(regression$tnegaff)
1539539186652:#hist(regression$tlifesat)
1539539186657:#hist(regression$tslfest)
1539539212645:head(regression$tpstress) #needs to be ordinal
1539539212657:#regression$tposaff
1539539212665:#hist(regression$tnegaff)
1539539212874:#hist(regression$tlifesat)
1539539212877:#hist(regression$tslfest)
1539539230960:head(regression$normexam) #needs to be ordinal
1539539230991:#regression$tposaff
1539539231003:#hist(regression$tnegaff)
1539539231015:#hist(regression$tlifesat)
1539539231023:#hist(regression$tslfest)
1539539281974:survey <- read.spss("Survey.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1539539297162:getwd()
1539539322367:setwd("~/R/Stats/wk3")
1539539328036:survey <- read.spss("Survey.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1539539338003:getwd()
1539539341878:ls
1539539345239:ls()
1539539352000:dir()
1539539369334:survey <- read.spss("Survey.dat", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1539539405254:survey <- read.table("Survey.dat", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1539539412594:?read.table
1539539430922:survey <- read.table("Survey.dat")
1539539431141:#head(regression$normexam) #needs to be ordinal
1539539431358:#regression$tposaff
1539539431361:#hist(regression$tnegaff)
1539539431364:#hist(regression$tlifesat)
1539539431367:#hist(regression$tslfest)
1539539438665:head(survey)
1539539453658:survey$id
1539539489420:survey <- read.table("Survey.dat")
1539539489621:hist(regression$tpstress) #needs to be ordinal
1539539519104:head(regression$tpstress) #needs to be ordinal
1539539519116:#regression$tposaff
1539539519123:#hist(regression$tnegaff)
1539539519132:#hist(regression$tlifesat)
1539539519915:#hist(regression$tslfest)
1539539561155:head(survey$tpstress) #needs to be ordinal
1539539561186:#regression$tposaff
1539539562478:#hist(regression$tnegaff)
1539539562484:#hist(regression$tlifesat)
1539539562491:#hist(regression$tslfest)
1539539568951:hist(survey$tpstress) #needs to be ordinal
1539539569343:#regression$tposaff
1539539569346:#hist(regression$tnegaff)
1539539569349:#hist(regression$tlifesat)
1539539569352:#hist(regression$tslfest)
1539539610927:hist(survey$tpstress)
1539539611204:hist(survey$tposaff)
1539539611227:hist(survey$tnegaff)
1539539611252:hist(survey$tlifesat)
1539539611275:hist(survey$tslfest)
1539539835054:hist(survey$tpstress)
1539539835082:mean(survey$tpstress)
1539539835097:median(survey$tpstress)
1539539835111:getmode(survey$tpstress)
1539539841181:hist(survey$tposaff)
1539539841219:mean(survey$tposaff)
1539539841236:median(survey$tposaff)
1539539841254:getmode(survey$tposaff)
1539539844190:hist(survey$tnegaff)
1539539844222:mean(survey$tnegaff)
1539539844240:median(survey$tnegaff)
1539539844249:getmode(survey$tnegaff)
1539539847154:hist(survey$tlifesat)
1539539847302:mean(survey$tlifesat)
1539539847319:median(survey$tlifesat)
1539539847491:getmode(survey$tlifesat)
1539539850171:hist(survey$tslfest)
1539539850204:mean(survey$tslfest)
1539539850222:median(survey$tslfest)
1539539850238:getmode(survey$tslfest)
1539539942299:library(foreign)
1539539942506:library(pastecs) #For creating descriptive statistic summaries
1539539982820:install.packages('pastecs')
1539539989869:library(foreign)
1539539989879:library(pastecs) #For creating descriptive statistic summaries
1539539991016:library(ggplot2) #For creating histograms with more detail than plot
1539539991458:library(psych) # Some useful descriptive functions
1539540004772:install.packages('psych')
1539540012716:library(foreign)
1539540012722:library(pastecs) #For creating descriptive statistic summaries
1539540012729:library(ggplot2) #For creating histograms with more detail than plot
1539540012736:library(psych) # Some useful descriptive functions
1539540016405:library(semTools) #For skewness and kurtosis
1539540040292:install.packages('semTools')
1539540050304:install.packages('car')
1539540056481:library(foreign)
1539540056492:library(pastecs) #For creating descriptive statistic summaries
1539540056499:library(ggplot2) #For creating histograms with more detail than plot
1539540056510:library(psych) # Some useful descriptive functions
1539540056521:library(semTools) #For skewness and kurtosis
1539540056937:library(car) # For Levene's test for homogeneity of variance
1539540057345:#Read in the file
1539540057348:regression <- read.spss("regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1539540057597:survey <- read.table("Survey.dat")
1539540161806:pastecs::stat.desc(regression$normexam, basic=F)
1539540161949:hist(regression$normexam)
1539540161966:mean(regression$normexam)
1539540161974:median(regression$normexam)
1539540161981:getmode(regression$normexam)
1539540176298:library(foreign)
1539540176307:library(pastecs) #For creating descriptive statistic summaries
1539540176316:library(ggplot2) #For creating histograms with more detail than plot
1539540176325:library(psych) # Some useful descriptive functions
1539540176334:library(semTools) #For skewness and kurtosis
1539540176344:library(car) # For Levene's test for homogeneity of variance
1539540176352:#Read in the file
1539540176361:regression <- read.spss("regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1539540176593:survey <- read.table("Survey.dat")
1539540176706:getmode <- function(v)
1539540176708:{
1539540176711:uniqv <- unique(v)
1539540176713:uniqv[which.max(tabulate(match(v,uniqv)))]
1539540176716:}
1539540182129:colnames(regression) <- tolower(colnames(regression))
1539540182168:colnames(regression)
1539540203331:pastecs::stat.desc(regression$normexam, basic=F)
1539540203385:hist(regression$normexam)
1539540203414:getmode(regression$normexam)
1539540253786:?stat.desc
1539540326452:pastecs::stat.desc(regression$normexam, norm=T)
1539540326636:hist(regression$normexam)
1539540326652:getmode(regression$normexam)
1539540360535:stat.desc(regression$normexam, norm=T)
1539540360754:hist(regression$normexam)
1539540360766:getmode(regression$normexam)
1539540394744:stat.desc(regression$normexam, norm=T)
1539540394819:hist(regression$normexam)
1539540394831:getmode(regression$normexam)
1539540394838:skew(regression$normexam)
1539540394851:kurtosis(regression$normexam)
1539540423542:round(stat.desc(regression$normexam, norm=T), 4)
1539540423747:hist(regression$normexam)
1539540423765:getmode(regression$normexam)
1539540423774:skew(regression$normexam)
1539540423792:kurtosis(regression$normexam)
1539540560211:knitr::opts_chunk$set(echo = TRUE)
1539540560228:#We are using a .dat file (survey.dat) created from the SPSS file survey.sav  taken from SPSS Survival Manual 6th Edition Julie Pallant
1539540560231:#http://spss.allenandunwin.com.s3-website-ap-southeast-2.amazonaws.com/data-files.html#.Wb0vvnWP-po
1539540560234:#Results on a survey on well being
1539540560440:#We need to load the file so that we can use it in R.
1539540560443:survey <- read.table("C:/tempR/survey.dat")
1539540579812:#We are using a .dat file (survey.dat) created from the SPSS file survey.sav  taken from SPSS Survival Manual 6th Edition Julie Pallant
1539540579814:#http://spss.allenandunwin.com.s3-website-ap-southeast-2.amazonaws.com/data-files.html#.Wb0vvnWP-po
1539540579816:#Results on a survey on well being
1539540579818:#We need to load the file so that we can use it in R.
1539540579821:survey <- read.table("survey.dat")
1539540584458:#We are using a .dat file (survey.dat) created from the SPSS file survey.sav  taken from SPSS Survival Manual 6th Edition Julie Pallant
1539540584467:#http://spss.allenandunwin.com.s3-website-ap-southeast-2.amazonaws.com/data-files.html#.Wb0vvnWP-po
1539540584477:#Results on a survey on well being
1539540584485:#We need to load the file so that we can use it in R.
1539540584494:survey <- read.table("survey.dat")
1539540584616:#Setting the column names to be that used in the dataset
1539540584620:colnames(survey) <- tolower(colnames(survey))
1539540584748:#Inspecting the data
1539540584757:#Remember to install these packages if you haven't already done so
1539540584767:library(pastecs) #For creating descriptive statistic summaries
1539540584780:library(ggplot2) #For creating histograms with more detail than plot
1539540585038:library(psych) # Some useful descriptive functions
1539540585239:library(semTools) #For skewness and kurtosis
1539540585243:library(car) # For Levene's test for homogeneity of variance
1539540585249:#numerical summary and histograms of variables of interest
1539540585253:#Starting with feeling of control
1539540585256:#stat.desc is a function from pastecs - make sure you include the basic switch=F to ensure you don't get scienfitic notation
1539540585260:pastecs::stat.desc(survey$tpcoiss, basic=F)
1539540585281:#skewness and kurtosis from semTools with standard error
1539540585283:tpskew<-semTools::skew(survey$tpcoiss)
1539540585291:tpkurt<-semTools::kurtosis(survey$tpcoiss)
1539540585299:#We divide the skew statistic by the standard error to get the standardised score
1539540585303:tpskew[1]/tpskew[2]
1539540585314:tpkurt[1]/tpkurt[2]
1539540585458:#We will allocate the histogram to a variable to allow use to manipulate it
1539540585468:gg <- ggplot(survey, aes(x=survey$tpcoiss))
1539540585791:#Change the label of the x axis
1539540585798:gg <- gg + labs(x="Feeling of Control")
1539540586008:#manage binwidth and colours
1539540586016:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1539540586449:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539540586598:#adding a normal curve
1539540586602:#use stat_function to compute a normalised score for each value of tpcois
1539540586605:#pass the mean and standard deviation
1539540586610:#use the na.rm parameter to say how missing values are handled
1539540586614:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$tpcoiss, na.rm=TRUE), sd=sd(survey$tpcoiss, na.rm=TRUE)))
1539540586698:#to display the graph request the contents of the variable be shown
1539540586702:gg
1539540587225:#Create a qqplot
1539540587232:qqnorm(survey$tpcoiss)
1539540587724:qqline(survey$tpcoiss, col=2) #show a line on theplot
1539540587754:#Create standardised scores and sort
1539540587764:sort(scale(survey$tpcoiss))
1539540588298:#Repeat for the variable representing feelings of stress
1539540588301:pastecs::stat.desc(survey$tpstress, basic=F)
1539540588319:semTools::skew(survey$tpstress)
1539540588331:semTools::kurtosis(survey$tpstress)
1539540588345:gs <- ggplot(survey, aes(x=survey$tpstress))
1539540588412:gs <- gs + labs(x="Perceived Stress")
1539540588477:gs <- gs + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1539540588614:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539540588738:gs <- gs + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$tpstress, na.rm=TRUE), sd=sd(survey$tpstress, na.rm=TRUE)))
1539540588810:gs
1539540589215:#Create a qqplot
1539540589219:qqnorm(survey$tpstress)
1539540589560:qqline(survey$tpstress, col=2) #show a line on theplot
1539540589568:#Sort the standardised scores
1539540589571:sort(scale(survey$tpstress))
1539540590176:#Simple scatterplot of feeling of control and perceived stress
1539540590178:#aes(x,y)
1539540590182:scatter <- ggplot(survey, aes(survey$tpstress, survey$tpcoiss))
1539540590242:scatter + geom_point() + labs(x = "Total Perceived Stress", y = "Total PCOISS")
1539540590518:#Add a regression line
1539540590522:scatter + geom_point() + geom_smooth(method = "lm", colour = "Red", se = F) + labs(x = "Total Perceived Stress", y = "Total PCOISS")
1539543817236:round(stat.desc(regression$normexam, norm=T), 4)
1539543817387:hist(regression$normexam)
1539543817402:getmode(regression$normexam)
1539543817409:skew(regression$normexam)
1539543817426:kurtosis(regression$normexam)
1539543817440:g <- ggplot(survey, aes(x=varname))
1539543825155:round(stat.desc(regression$normexam, norm=T), 4)
1539543825302:hist(regression$normexam)
1539543825336:getmode(regression$normexam)
1539543825355:skew(regression$normexam)
1539543825383:kurtosis(regression$normexam)
1539543825396:g <- ggplot(survey, aes(x=varname))
1539543825461:g
1539543842913:round(stat.desc(regression$normexam, norm=T), 4)
1539543843138:hist(regression$normexam)
1539543843177:getmode(regression$normexam)
1539543843605:skew(regression$normexam)
1539543844032:kurtosis(regression$normexam)
1539543844232:g <- ggplot(survey, aes(regression$normexam))
1539543844432:g
1539543880302:round(stat.desc(regression$normexam, norm=T), 4)
1539543880389:hist(regression$normexam)
1539543880576:getmode(regression$normexam)
1539543880583:skew(regression$normexam)
1539543880594:kurtosis(regression$normexam)
1539543880606:qqnorm(regression$normexam)
1539543905558:round(stat.desc(regression$normexam, norm=T), 4)
1539543905673:hist(regression$normexam)
1539543905685:getmode(regression$normexam)
1539543905692:skew(regression$normexam)
1539543905705:kurtosis(regression$normexam)
1539543905718:qqnorm(regression$normexam)
1539543905850:qqline(regression$normexam, col=2)
1539543915248:round(stat.desc(regression$normexam, norm=T), 4)
1539543915462:hist(regression$normexam)
1539543915474:getmode(regression$normexam)
1539543915480:skew(regression$normexam)
1539543915493:kurtosis(regression$normexam)
1539543915506:qqline(regression$normexam, col=2)
1539543945280:round(stat.desc(regression$normexam, norm=T), 4)
1539543945495:getmode(regression$normexam)
1539543945513:skew(regression$normexam)
1539543945551:kurtosis(regression$normexam)
1539543945589:hist(regression$normexam)
1539543945623:qqnorm(regression$normexam)
1539543945881:qqline(regression$normexam, col=2)
1539544092593:library('plyr')
1539544095212:salary<-readRDS("salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539544100497:names(salary)
1539544197859:stat.desc(salary$salary, norm=T)
1539544197955:getmode(salary$salary)
1539544197961:skew(salary$salary)
1539544197972:kurtosis(salary$salary)
1539544284788:hist(salary$salary)
1539544288362:qqnorm(salary$salary)
1539544288396:qqline(salary$salary, col=2)
1539544885597:kurtosis(survey$tpcoiss)
1539544951843:kurtosis(survey$tpcoiss)[1]
1539544965404:kurtosis(survey$tpcoiss)[1]/kurtosis(survey$tpcoiss)[2]
1539545021070:skew(survey$tpcoiss)
1539545050937:round(stat.desc(regression$normexam, norm=T), 4)
1539545051156:getmode(regression$normexam)
1539545051166:skew(regression$normexam)[1]/skew(regression$normexam)[2]
1539545051179:kurtosis(regression$normexam)[1]/kurtosis(regression$normexam)[2]
1539545051187:hist(regression$normexam)
1539545051201:qqnorm(regression$normexam)
1539545051335:qqline(regression$normexam, col=2)
1539545643327:g <- ggplot(survey, aes(x=survey$tpcoiss))
1539545643448:#Change the label of the x axis
1539545643450:gg <- gg + labs(x="Feeling of Control")
1539545643524:#manage binwidth and colours
1539545643526:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1539545643700:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539545643793:#adding a normal curve
1539545643796:#use stat_function to compute a normalised score for each value of tpcois
1539545643798:#pass the mean and standard deviation
1539545643801:#use the na.rm parameter to say how missing values are handled
1539545643807:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$tpcoiss, na.rm=TRUE), sd=sd(survey$tpcoiss, na.rm=TRUE)))
1539545643878:#to display the graph request the contents of the variable be shown
1539545643881:gg
1539545659380:gg <- ggplot(survey, aes(x=survey$tpcoiss))
1539545659568:#Change the label of the x axis
1539545659572:gg <- gg + labs(x="Feeling of Control")
1539545659722:#manage binwidth and colours
1539545659728:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1539545659863:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539545659984:#adding a normal curve
1539545659991:#use stat_function to compute a normalised score for each value of tpcois
1539545659998:#pass the mean and standard deviation
1539545660004:#use the na.rm parameter to say how missing values are handled
1539545660010:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$tpcoiss, na.rm=TRUE), sd=sd(survey$tpcoiss, na.rm=TRUE)))
1539545660164:#to display the graph request the contents of the variable be shown
1539545660169:gg
1539545680403:gg
1539545789209:round(stat.desc(regression$normexam, norm=T), 4)
1539545789550:getmode(regression$normexam)
1539545789591:skew(regression$normexam)[1]/skew(regression$normexam)[2]
1539545789604:kurtosis(regression$normexam)[1]/kurtosis(regression$normexam)[2]
1539545789620:gg <- ggplot(regression, aes(x=regression$normexam))
1539545789646:#Change the label of the x axis
1539545789650:#gg <- gg + labs(x="Feeling of Control")
1539545789653:#manage binwidth and colours
1539545789656:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1539545789702:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539545789734:#adding a normal curve
1539545789738:#use stat_function to compute a normalised score for each value of tpcois
1539545789740:#pass the mean and standard deviation
1539545789743:#use the na.rm parameter to say how missing values are handled
1539545789746:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(regression$normexam, na.rm=TRUE), sd=sd(regression$normexam, na.rm=TRUE)))
1539545789786:hist(regression$normexam)
1539545789986:qqnorm(regression$normexam)
1539545790608:qqline(regression$normexam, col=2)
1539545810593:gg
1539545840743:gg <- ggplot(regression, aes(x=regression$normexam))
1539545840809:#Change the label of the x axis
1539545840816:#gg <- gg + labs(x="Feeling of Control")
1539545840822:#manage binwidth and colours
1539545840829:#gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1539545840836:#gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539545840843:#adding a normal curve
1539545840849:#use stat_function to compute a normalised score for each value of tpcois
1539545840856:#pass the mean and standard deviation
1539545840862:#use the na.rm parameter to say how missing values are handled
1539545840869:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(regression$normexam, na.rm=TRUE), sd=sd(regression$normexam, na.rm=TRUE)))
1539545840932:gg
1539545865463:gg <- ggplot(regression, aes(x=regression$normexam))
1539545865535:#Change the label of the x axis
1539545865537:#gg <- gg + labs(x="Feeling of Control")
1539545865539:#manage binwidth and colours
1539545865541:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1539545865574:#gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539545865576:#adding a normal curve
1539545865578:#use stat_function to compute a normalised score for each value of tpcois
1539545865581:#pass the mean and standard deviation
1539545865583:#use the na.rm parameter to say how missing values are handled
1539545865586:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(regression$normexam, na.rm=TRUE), sd=sd(regression$normexam, na.rm=TRUE)))
1539545865617:gg
1539545895888:gg <- ggplot(regression, aes(x=regression$normexam))
1539545895954:#Change the label of the x axis
1539545895962:#gg <- gg + labs(x="Feeling of Control")
1539545895970:#manage binwidth and colours
1539545895976:gg <- gg + geom_histogram(binwidth=0.1, colour="black", aes(y=..density.., fill=..count..))
1539545896042:#gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539545896046:#adding a normal curve
1539545896047:#use stat_function to compute a normalised score for each value of tpcois
1539545896049:#pass the mean and standard deviation
1539545896052:#use the na.rm parameter to say how missing values are handled
1539545896054:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(regression$normexam, na.rm=TRUE), sd=sd(regression$normexam, na.rm=TRUE)))
1539545896085:gg
1539545928117:gg <- ggplot(regression, aes(x=regression$normexam))
1539545928244:#Change the label of the x axis
1539545928246:#gg <- gg + labs(x="Feeling of Control")
1539545928249:#manage binwidth and colours
1539545928251:gg <- gg + geom_histogram(binwidth=0.1, colour="black", aes(y=..density.., fill=..count..))
1539545928279:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539545928306:#adding a normal curve
1539545928308:#use stat_function to compute a normalised score for each value of tpcois
1539545928311:#pass the mean and standard deviation
1539545928313:#use the na.rm parameter to say how missing values are handled
1539545928316:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(regression$normexam, na.rm=TRUE), sd=sd(regression$normexam, na.rm=TRUE)))
1539545928350:gg
1539545955051:gg <- ggplot(regression, aes(x=regression$normexam))
1539545955335:#Change the label of the x axis
1539545955337:#gg <- gg + labs(x="Feeling of Control")
1539545955339:#manage binwidth and colours
1539545955341:gg <- gg + geom_histogram(binwidth=0.5, colour="black", aes(y=..density.., fill=..count..))
1539545955367:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539545955392:#adding a normal curve
1539545955395:#use stat_function to compute a normalised score for each value of tpcois
1539545955397:#pass the mean and standard deviation
1539545955399:#use the na.rm parameter to say how missing values are handled
1539545955401:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(regression$normexam, na.rm=TRUE), sd=sd(regression$normexam, na.rm=TRUE)))
1539545955431:gg
1539546114177:round(stat.desc(regression$normexam, norm=T), 4)
1539546114280:getmode(regression$normexam)
1539546114287:skew(regression$normexam)[1]/skew(regression$normexam)[2]
1539546114295:kurtosis(regression$normexam)[1]/kurtosis(regression$normexam)[2]
1539546114305:gg <- ggplot(regression, aes(x=regression$normexam))
1539546114329:gg <- gg + labs(x="Normalised exam score") #Change the label of the x axis
1539546114361:#manage binwidth and colours
1539546114364:gg <- gg + geom_histogram(binwidth=0.5, colour="black", aes(y=..density.., fill=..count..))
1539546114394:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539546114421:#adding a normal curve
1539546114425:#use stat_function to compute a normalised score for each value of tpcois
1539546114428:#pass the mean and standard deviation
1539546114431:#use the na.rm parameter to say how missing values are handled
1539546114434:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(regression$normexam, na.rm=TRUE), sd=sd(regression$normexam, na.rm=TRUE)))
1539546114568:gg
1539546114897:qqnorm(regression$normexam)
1539546115252:qqline(regression$normexam, col=2)
1539546169454:round(stat.desc(regression$normexam, norm=T), 4)
1539546169726:getmode(regression$normexam)
1539546169738:skew(regression$normexam)[1]/skew(regression$normexam)[2]
1539546169751:kurtosis(regression$normexam)[1]/kurtosis(regression$normexam)[2]
1539546169762:gg <- ggplot(regression, aes(x=regression$normexam))
1539546169784:gg <- gg + labs(x="Normalised exam score") #Change the label of the x axis
1539546169805:#manage binwidth and colours
1539546169808:gg <- gg + geom_histogram(binwidth=0.5, colour="black", aes(y=..density.., fill=..count..))
1539546169838:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539546169870:#adding a normal curve
1539546169874:#use stat_function to compute a normalised score for each value of tpcois
1539546169878:#pass the mean and standard deviation
1539546169882:#use the na.rm parameter to say how missing values are handled
1539546169886:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(regression$normexam, na.rm=TRUE), sd=sd(regression$normexam, na.rm=TRUE)))
1539546169929:gg
1539546170320:qqnorm(regression$normexam)
1539546170686:qqline(regression$normexam, col=2)
1539546170695:#Create standardised scores and sort
1539546170699:sort(scale(regression$normexam))
1539546245574:knitr::opts_chunk$set(echo = TRUE)
1539546249956:#We are using a .dat file (survey.dat) created from the SPSS file survey.sav  taken from SPSS Survival Manual 6th Edition Julie Pallant
1539546249959:#http://spss.allenandunwin.com.s3-website-ap-southeast-2.amazonaws.com/data-files.html#.Wb0vvnWP-po
1539546249962:#Results on a survey on well being
1539546249964:#We need to load the file so that we can use it in R.
1539546249968:survey <- read.table("survey.dat")
1539546250194:#Setting the column names to be that used in the dataset
1539546250199:colnames(survey) <- tolower(colnames(survey))
1539546250297:#Inspecting the data
1539546250302:#Remember to install these packages if you haven't already done so
1539546250307:library(pastecs) #For creating descriptive statistic summaries
1539546250315:library(ggplot2) #For creating histograms with more detail than plot
1539546250320:library(psych) # Some useful descriptive functions
1539546250325:library(semTools) #For skewness and kurtosis
1539546250330:library(car) # For Levene's test for homogeneity of variance
1539546250336:#numerical summary and histograms of variables of interest
1539546250339:#Starting with feeling of control
1539546250343:#stat.desc is a function from pastecs - make sure you include the basic switch=F to ensure you don't get scienfitic notation
1539546250346:pastecs::stat.desc(survey$tpcoiss, basic=F)
1539546250367:#skewness and kurtosis from semTools with standard error
1539546250370:tpskew<-semTools::skew(survey$tpcoiss)
1539546250376:tpkurt<-semTools::kurtosis(survey$tpcoiss)
1539546250382:#We divide the skew statistic by the standard error to get the standardised score
1539546250385:tpskew[1]/tpskew[2]
1539546250392:tpkurt[1]/tpkurt[2]
1539546250404:#We will allocate the histogram to a variable to allow use to manipulate it
1539546250405:gg <- ggplot(survey, aes(x=survey$tpcoiss))
1539546250469:#Change the label of the x axis
1539546250523:gg <- gg + labs(x="Feeling of Control")
1539546250585:#manage binwidth and colours
1539546250588:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1539546250734:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539546250799:#adding a normal curve
1539546250802:#use stat_function to compute a normalised score for each value of tpcois
1539546250804:#pass the mean and standard deviation
1539546250807:#use the na.rm parameter to say how missing values are handled
1539546250809:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$tpcoiss, na.rm=TRUE), sd=sd(survey$tpcoiss, na.rm=TRUE)))
1539546250879:#to display the graph request the contents of the variable be shown
1539546250881:gg
1539546251115:#Create a qqplot
1539546251120:qqnorm(survey$tpcoiss)
1539546251289:qqline(survey$tpcoiss, col=2) #show a line on theplot
1539546251300:#Create standardised scores and sort
1539546251304:sort(scale(survey$tpcoiss))
1539546251971:#Repeat for the variable representing feelings of stress
1539546251973:pastecs::stat.desc(survey$tpstress, basic=F)
1539546251989:semTools::skew(survey$tpstress)
1539546252000:semTools::kurtosis(survey$tpstress)
1539546252012:gs <- ggplot(survey, aes(x=survey$tpstress))
1539546252070:gs <- gs + labs(x="Perceived Stress")
1539546252135:gs <- gs + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1539546252211:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539546252300:gs <- gs + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$tpstress, na.rm=TRUE), sd=sd(survey$tpstress, na.rm=TRUE)))
1539546252367:gs
1539546252715:#Create a qqplot
1539546252718:qqnorm(survey$tpstress)
1539546252875:qqline(survey$tpstress, col=2) #show a line on theplot
1539546252882:#Sort the standardised scores
1539546252885:sort(scale(survey$tpstress))
1539546253538:#Simple scatterplot of feeling of control and perceived stress
1539546253541:#aes(x,y)
1539546253544:scatter <- ggplot(survey, aes(survey$tpstress, survey$tpcoiss))
1539546253605:scatter + geom_point() + labs(x = "Total Perceived Stress", y = "Total PCOISS")
1539546253999:#Add a regression line
1539546254004:scatter + geom_point() + geom_smooth(method = "lm", colour = "Red", se = F) + labs(x = "Total Perceived Stress", y = "Total PCOISS")
1539546279417:#Pearson Correlation
1539546279426:stats::cor.test(survey$tpcoiss, survey$tpstress, method='pearson')
1539546279570:#Spearman Correlation
1539546279573:#Change the method to be spearman.
1539546279580:#This test will give an error since this method uses ranking but cannot handle ties
1539546279584:cor.test(survey$tpcoiss, survey$tpstress, method = "spearman")
1539546279624:#We can also use kendall's tau which does handle ties
1539546279628:cor.test(survey$tpcoiss, survey$tpstress, method = "kendall")
1539546323784:#Get descriptive stastitics by group
1539546323792:#describeBy is part of the psych package so you need to use it
1539546323800:psych::describeBy(survey$tslfest,group=survey$sex)
1539546323952:#Conduct Levene's test for homogeneity of variance in library car
1539546323957:car::leveneTest(tslfest ~ sex, data=survey)
1539546323994:#Conduct the t-test from package stats
1539546324000:#You can use the var.equal = TRUE option to specify equal variances and a pooled variance estimate
1539546324005:stats::t.test(tslfest~sex,var.equal=TRUE,data=survey)
1539546345922:drinkset<- read.table("C:/tempR/Field-BDI-Non-parametric.dat")
1539546420455:sort(scale(regression$normexam))
1539629931521:summary(salary$salary)
1539629939242:salary<-readRDS("salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539629944385:str(salary)
1539629950922:summary(salary$gender)
1539629950947:count(salary$gender)
1539629956806:library('plyr')
1539629963080:summary(salary$gender)
1539629963104:count(salary$gender)
1539629971986:#No function exists in R
1539629971992:getmode <- function(v)
1539629971998:{
1539629972004:uniqv <- unique(v)
1539629972010:uniqv[which.max(tabulate(match(v,uniqv)))]
1539629972016:}
1539629972081:getmode(salary$salary)
1539629994637:#No function exists in R
1539629994644:getmode <- function(v)
1539629994652:{
1539629994659:uniqv <- unique(v)
1539629994664:uniqv[which.max(tabulate(match(v,uniqv)))]
1539629994672:}
1539629994682:getmode(salary$yr)
1539630000009:range(salary$salary)
1539630006970:range(salary$yr)
1539630012689:#To see a Contingency table/Cross tabulation you need to create a table to see rank by gender how many of each gender hold each rank
1539630012693:tab<-table(salary$gender, salary$rank)
1539630012701:addmargins(tab)
1539630012730:#addborders(tab) ##cannot find this
1539630012733:tab #show the table with frequencies
1539630012751:prop.table(tab) # shows probabilities
1539630019354:summary(salary$salary)
1539630097528:skew(salary$salary)
1539630121977:library(semTools) #For skewness and kurtosis
1539630122311:skew(salary$salary)
1539630122323:skew(salary$salary)[1]/skew(salary$salary)[2]
1539630126580:library(semTools) #For skewness and kurtosis
1539630126584:skew(salary$salary)
1539630126702:skew(salary$salary)[1]/skew(salary$salary)[2]
1539630130801:kurtosis(salary$salary)[1]/kurtosis(salary$salary)[2]
1539630142966:kurtosis(salary$salary)
1539630143004:kurtosis(salary$salary)[1]/kurtosis(salary$salary)[2]
1539630245713:round(stat.desc(regression$normexam, norm=T), 4)
1539630284608:library(pastecs) #For creating descriptive statistic summaries
1539630284682:round(stat.desc(salary$salary, norm=T), 4)
1539630284810:getmode(salary$salary)
1539630610382:gg <- ggplot(salary, aes(x=salary$salary))
1539630630775:library(ggplot2) #For creating histograms with more detail than plot
1539630631478:gg <- ggplot(salary, aes(x=salary$salary))
1539630631559:gg <- gg + labs(x="Normalised exam score") #Change the label of the x axis
1539630631606:#manage binwidth and colours
1539630631664:gg <- gg + geom_histogram(binwidth=0.5, colour="black", aes(y=..density.., fill=..count..))
1539630631795:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539630631908:#adding a normal curve
1539630631916:#use stat_function to compute a normalised score for each value of tpcois
1539630631924:#pass the mean and standard deviation
1539630631983:#use the na.rm parameter to say how missing values are handled
1539630631995:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(salary$salary, na.rm=TRUE), sd=sd(salary$salary, na.rm=TRUE)))
1539630632071:gg
1539630986691:salary$salary
1539631003789:library(ggplot2) #For creating histograms with more detail than plot
1539631009825:gg <- ggplot(salary, aes(x=salary$salary))
1539631042347:gg
1539631072607:library(foreign)
1539631072626:library(pastecs) #For creating descriptive statistic summaries
1539631072630:library(ggplot2) #For creating histograms with more detail than plot
1539631072633:library(psych) # Some useful descriptive functions
1539631072813:library(semTools) #For skewness and kurtosis
1539631072817:library(car) # For Levene's test for homogeneity of variance
1539631073248:#Read in the file
1539631073255:regression <- read.spss("regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1539631073417:survey <- read.table("Survey.dat")
1539631073685:getmode <- function(v)
1539631073693:{
1539631073701:uniqv <- unique(v)
1539631073707:uniqv[which.max(tabulate(match(v,uniqv)))]
1539631073715:}
1539631077596:colnames(regression) <- tolower(colnames(regression))
1539631077634:colnames(regression)
1539631080611:round(stat.desc(regression$normexam, norm=T), 4)
1539631080830:getmode(regression$normexam)
1539631080836:skew(regression$normexam)[1]/skew(regression$normexam)[2]
1539631080843:kurtosis(regression$normexam)[1]/kurtosis(regression$normexam)[2]
1539631080852:gg <- ggplot(regression, aes(x=regression$normexam))
1539631080872:gg <- gg + labs(x="Normalised exam score") #Change the label of the x axis
1539631080893:#manage binwidth and colours
1539631080895:gg <- gg + geom_histogram(binwidth=0.5, colour="black", aes(y=..density.., fill=..count..))
1539631080922:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539631080954:#adding a normal curve
1539631080957:#use stat_function to compute a normalised score for each value of tpcois
1539631080960:#pass the mean and standard deviation
1539631080963:#use the na.rm parameter to say how missing values are handled
1539631080966:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(regression$normexam, na.rm=TRUE), sd=sd(regression$normexam, na.rm=TRUE)))
1539631080996:gg
1539631081473:qqnorm(regression$normexam)
1539631081815:qqline(regression$normexam, col=2)
1539631081827:#Create standardised scores and sort
1539631081833:sort(scale(regression$normexam))
1539631108768:skew(survey$tpcoiss)
1539631108787:regression$normexam
1539631119121:skew(survey$tpcoiss)
1539631150431:library(ggplot2) #For creating histograms with more detail than plot
1539631150440:gg <- ggplot(salary)#, aes(x=salary$salary))
1539631150489:gg <- gg + labs(x="Normalised exam score") #Change the label of the x axis
1539631150539:#manage binwidth and colours
1539631150548:gg <- gg + geom_histogram(binwidth=0.5, colour="black", aes(y=..density.., fill=..count..))
1539631150612:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539631150703:#adding a normal curve
1539631150711:#use stat_function to compute a normalised score for each value of tpcois
1539631150719:#pass the mean and standard deviation
1539631150728:#use the na.rm parameter to say how missing values are handled
1539631150811:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(salary$salary, na.rm=TRUE), sd=sd(salary$salary, na.rm=TRUE)))
1539631150943:gg
1539631176350:?ggplot
1539631250470:library(ggplot2) #For creating histograms with more detail than plot
1539631250641:gg <- ggplot(salary, aes(x=salary$salary))
1539631250658:gg <- gg + labs(x="Normalised exam score") #Change the label of the x axis
1539631250684:#manage binwidth and colours
1539631250687:gg <- gg + geom_histogram(binwidth=0.5, colour="black", aes(y=..density.., fill=..count..))
1539631250713:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539631250735:#adding a normal curve
1539631250738:#use stat_function to compute a normalised score for each value of tpcois
1539631250741:#pass the mean and standard deviation
1539631250744:#use the na.rm parameter to say how missing values are handled
1539631250749:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(salary$salary, na.rm=TRUE), sd=sd(salary$salary, na.rm=TRUE)))
1539631250775:gg
1539633445497:kurtosis(salary$salary)
1539633445535:kurtosis(salary$salary)[1]/kurtosis(salary$salary)[2]
1539633506602:library(semTools) #For skewness and kurtosis
1539633506611:skew(salary$salary)
1539633506629:skew(salary$salary)[1]/skew(salary$salary)[2]
1539633523566:salary<-readRDS("salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1539633529553:str(salary)
1539633535753:summary(salary$gender)
1539633535776:library('plyr')
1539633535785:count(salary$gender)
1539633540950:#No function exists in R
1539633540960:getmode <- function(v)
1539633540966:{
1539633540975:uniqv <- unique(v)
1539633540983:uniqv[which.max(tabulate(match(v,uniqv)))]
1539633540991:}
1539633541002:getmode(salary$yr)
1539633545621:range(salary$yr)
1539633548946:#To see a Contingency table/Cross tabulation you need to create a table to see rank by gender how many of each gender hold each rank
1539633548954:tab<-table(salary$gender, salary$rank)
1539633548970:addmargins(tab)
1539633549138:#addborders(tab) ##cannot find this
1539633549141:tab #show the table with frequencies
1539633549158:prop.table(tab) # shows probabilities
1539633555657:summary(salary$salary)
1539633559961:library(pastecs)
1539633559971:round(stat.desc(salary$salary, norm=T), 4)
1539633560053:getmode(salary$salary)
1539633567627:library(semTools) #For skewness and kurtosis
1539633567637:skew(salary$salary)
1539633567827:skew(salary$salary)[1]/skew(salary$salary)[2]
1539633583464:salary
1539633592105:salary$salary
1539633602821:skew(salary$salary)
1539633613916:kurtosis(salary$salary)
1539633613953:kurtosis(salary$salary)[1]/kurtosis(salary$salary)[2]
1539633655312:semTools::skew(salary$salary)
1539633686074:library(semTools) #For skewness and kurtosis
1539633686082:semTools::skew(salary$salary)
1539633686105:semTools::skew(salary$salary)[1]/semTools::skew(salary$salary)[2]
1539633708829:library(ggplot2) #For creating histograms with more detail than plot
1539633708840:gg <- ggplot(salary, aes(x=salary$salary))
1539633709128:gg <- gg + labs(x="Normalised exam score") #Change the label of the x axis
1539633709146:#manage binwidth and colours
1539633709149:gg <- gg + geom_histogram(binwidth=0.5, colour="black", aes(y=..density.., fill=..count..))
1539633709173:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539633709194:#adding a normal curve
1539633709197:#use stat_function to compute a normalised score for each value of tpcois
1539633709200:#pass the mean and standard deviation
1539633709202:#use the na.rm parameter to say how missing values are handled
1539633709208:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(salary$salary, na.rm=TRUE), sd=sd(salary$salary, na.rm=TRUE)))
1539633709254:#gg
1539633715698:library(ggplot2) #For creating histograms with more detail than plot
1539633715708:gg <- ggplot(salary, aes(x=salary$salary))
1539633715917:gg <- gg + labs(x="Normalised exam score") #Change the label of the x axis
1539633716078:#manage binwidth and colours
1539633716087:gg <- gg + geom_histogram(binwidth=0.5, colour="black", aes(y=..density.., fill=..count..))
1539633716156:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539633716296:#adding a normal curve
1539633716302:#use stat_function to compute a normalised score for each value of tpcois
1539633716311:#pass the mean and standard deviation
1539633716380:#use the na.rm parameter to say how missing values are handled
1539633716392:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(salary$salary, na.rm=TRUE), sd=sd(salary$salary, na.rm=TRUE)))
1539633716474:gg
1539633726007:qqnorm(salary$salary)
1539633726041:qqline(salary$salary, col=2)
1539803049057:R.version()
1539803060064:R.Version()
1539806187713:library(dplyr)
1539806188031:library(ggplot2)
1539806188257:library(psych)
1539806188529:library(pastecs)
1539806188815:library(semTools)
1539806189307:library(car)
1539806189762:library(pander)
1539806221368:install.packages('pander')
1539806239355:setwd("~/R/Stats/CA")
1539806243260:library(dplyr)
1539806243263:library(ggplot2)
1539806243268:library(psych)
1539806243272:library(pastecs)
1539806243276:library(semTools)
1539806243279:library(car)
1539806243283:library(pander)
1539806255021:#Reading in the dataset
1539806255024:survey <- read.table("survey.dat")
1539806288068:library(dplyr)
1539806288080:library(ggplot2)
1539806288089:library(psych)
1539806288101:library(pastecs)
1539806288111:library(semTools)
1539806288122:library(car)
1539806288538:library(pander)
1539806288550:#Reading in the dataset
1539806288559:survey <- read.table("sleep5ED.sav")
1539806310066:library(dplyr)
1539806310075:library(ggplot2)
1539806310083:library(psych)
1539806310096:library(pastecs)
1539806310105:library(semTools)
1539806310116:library(car)
1539806310126:library(pander)
1539806310137:#Reading in the dataset
1539806310145:survey <- read.table("sleep5ED.csv")
1539806372292:library(dplyr)
1539806372303:library(ggplot2)
1539806372312:library(psych)
1539806372322:library(pastecs)
1539806372331:library(semTools)
1539806372341:library(car)
1539806372351:library(pander)
1539806372363:#Reading in the dataset
1539806372726:survey <- read.spss("sleep5ED.csv")
1539806431466:library(foreign)
1539806431505:library(dplyr)
1539806431515:library(ggplot2)
1539806432536:library(psych)
1539806432546:library(pastecs)
1539806432555:library(semTools)
1539806432564:library(car)
1539806432573:library(pander)
1539806438500:#Reading in the dataset
1539806438510:survey <- read.spss("sleep5ED.csv")
1539806446945:#Reading in the dataset
1539806446956:survey <- read.spss("sleep5ED.sav")
1539806447389:#Setting column names
1539806447398:colnames(survey) <- tolower(colnames(survey))
1539806459634:#Reading in the dataset
1539806459642:survey <- read.spss("sleep5ED.sav")
1539806503980:head(survey)
1539806519835:colnames(survey)
1539806638015:str(survey)
1539806673248:str(survey['id'])
1539806768677:str(survey['id', 'anxiety', 'ess', 'depress', 'qualslp', 'medhelp'])
1539806817440:survey['id', 'anxiety', 'ess', 'depress', 'qualslp', 'medhelp']
1539806837519:survey %>% select('id', 'anxiety', 'ess', 'depress', 'qualslp', 'medhelp')
1539806863440:survey %>% select(id, anxiety, ess, depress, qualslp, medhelp)
1539806886669:select(survey, id, anxiety, ess, depress, qualslp, medhelp)
1539806930984:typeof(survey)
1539806974292:#Reading in the dataset
1539806974484:sleepsurvey <- data.frame(read.spss("sleep5ED.sav"))
1539806981541:typeof(survey)
1539806988117:select(survey, id, anxiety, ess, depress, qualslp, medhelp)
1539807060168:#Reading in the dataset
1539807060177:sleepsurvey <- read.spss("sleep5ED.sav")
1539807060341:colnames(survey) <- tolower(colnames(survey))
1539807070586:#Reading in the dataset
1539807070595:sleepsurvey <- read.spss("sleep5ED.sav")
1539807070958:colnames(sleepsurvey) <- tolower(colnames(survey))
1539807113240:#Reading in the dataset
1539807113250:sleepsurvey <- read.spss("sleep5ED.sav")
1539807181711:str(survey$id, survey$anxiety, survey$ess, survey$depress, survey$qualslp, survey$medhelp)
1539807203028:str(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)
1539807235209:sleepsurvey$id
1539807235896:#str(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)
1539807252908:select(sleepsurvey,id)
1539812502394:library(foreign)
1539812502567:#library(dplyr)
1539812502570:#library(ggplot2)
1539812502573:#library(psych)
1539812502576:#library(pastecs)
1539812502578:#library(semTools)
1539812502581:#library(car)
1539812502584:#library(pander)
1539812511999:#Reading in the dataset
1539812512003:sleepsurvey <- read.spss("sleep5ED.sav")
1539812521817:#Reading in the dataset
1539812521825:sleepsurvey <- read.spss("sleep5ED.sav")
1539812536018:typeof(sleepsurvey)
1539812541404:#(sleepsurvey,c(id, anxiety))
1539812541412:library('plyr')
1539812541676:table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)
1539812917866:#(sleepsurvey,c(id, anxiety))
1539812917872:library('plyr')
1539812917881:as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp))
1539812942737:#(sleepsurvey,c(id, anxiety))
1539812942745:library('plyr')
1539812942755:as.data.frame(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)
1539812972488:#(sleepsurvey,c(id, anxiety))
1539812972494:library('plyr')
1539812972926:typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539813136410:?select
1539813149312:library('dplyr')
1539813161063:?select
1539813246045:#(sleepsurvey,c(id, anxiety))
1539813246053:library('plyr')
1539813246064:library('dplyr')
1539813246239:#typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539813246242:select(sleepsurvey, id)
1539813274549:#(sleepsurvey,c(id, anxiety))
1539813274558:library('plyr')
1539813274567:library('dplyr')
1539813274577:#typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539813274586:select(sleepsurvey, id, anxiety)
1539813286291:#(sleepsurvey,c(id, anxiety))
1539813286299:library('plyr')
1539813286308:library('dplyr')
1539813286317:#typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539813286324:select(sleepsurvey, anxiety)
1539813313446:#(sleepsurvey,c(id, anxiety))
1539813313453:library('plyr')
1539813313630:library('dplyr')
1539813313634:#typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539813313637:select(dplyr::sleepsurvey, anxiety)
1539813327794:#(sleepsurvey,c(id, anxiety))
1539813327796:library('plyr')
1539813327799:library('dplyr')
1539813327802:#typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539813327805:dplyr::select(sleepsurvey, anxiety)
1539813350610:#(sleepsurvey,c(id, anxiety))
1539813350617:library('plyr')
1539813350627:library('dplyr')
1539813350637:#typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539813350946:dplyr::select(.sleepsurvey, anxiety)
1539813468690:#(sleepsurvey,c(id, anxiety))
1539813468698:library('plyr')
1539813468709:library('dplyr')
1539813468718:#typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539813468727:#dplyr::select(sleepsurvey, anxiety)
1539813468735:head(sleepsurvey)
1539813548596:#(sleepsurvey,c(id, anxiety))
1539813548603:library('plyr')
1539813548613:library('dplyr')
1539813548624:#typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539813548632:dplyr::select(sleepsurvey, 1, 2, 3)
1539813564773:?select.list
1539813656687:#(sleepsurvey,c(id, anxiety))
1539813656696:library('plyr')
1539813656706:library('dplyr')
1539813656716:#typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539813657283:Dselect <- dplyr::select
1539813657538:Dselect(sleepsurvey, 1, 2, 3)
1539813704280:library('plyr')
1539813704285:library('dplyr')
1539813749397:remove.packages('dplyr')
1539813771734:install.packages('dplyr')
1539813778604:install.packages("dplyr")
1539813788706:#(sleepsurvey,c(id, anxiety))
1539813788708:library('plyr')
1539813788862:library('dplyr')
1539813789069:#typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539813789072:Dselect <- dplyr::select
1539813789076:Dselect(sleepsurvey, 1, 2, 3)
1539813816546:remove.packages('utils')
1539813826503:#(sleepsurvey,c(id, anxiety))
1539813826507:library('plyr')
1539813826510:library('dplyr')
1539813826514:#typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539813826517:Dselect <- dplyr::select
1539813826521:Dselect(sleepsurvey, 1, 2, 3)
1539813840235:?select.list
1539814099253:head(sleepsurvey)
1539814114364:#Reading in the dataset
1539814114371:sleepsurvey <- as.data.frame(read.spss("sleep5ED.sav"))
1539814125205:library(foreign)
1539814125312:#library(dplyr)
1539814125321:#library(ggplot2)
1539814125330:#library(psych)
1539814125337:#library(pastecs)
1539814125346:#library(semTools)
1539814125353:#library(car)
1539814125360:#library(pander)
1539814129659:#Reading in the dataset
1539814129668:sleepsurvey <- as.data.frame(read.spss("sleep5ED.sav"))
1539814134237:head(sleepsurvey)
1539814147248:#(sleepsurvey,c(id, anxiety))
1539814147254:library('plyr')
1539814147264:library('dplyr')
1539814147491:#typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539814147495:Dselect <- dplyr::select
1539814147498:Dselect(sleepsurvey, 1, 2, 3)
1539814147594:#head(sleepsurvey)
1539814226838:#(sleepsurvey,c(id, anxiety))
1539814226847:library('plyr')
1539814226855:library('dplyr')
1539814226866:survey<-select(id, anxiety, ess, depress, qualslp, medhelp)
1539814245774:#(sleepsurvey,c(id, anxiety))
1539814245782:library('plyr')
1539814245791:library('dplyr')
1539814245799:survey<-select(sleepsurvey, id, anxiety, ess, depress, qualslp, medhelp)
1539814245826:#typeof(as.data.frame(table(sleepsurvey$id, sleepsurvey$anxiety, sleepsurvey$ess, sleepsurvey$depress, sleepsurvey$qualslp, sleepsurvey$medhelp)))
1539814245833:#Dselect <- dplyr::select
1539814245840:#Dselect(sleepsurvey, 1, 2, 3)
1539814245848:#head(sleepsurvey)
1539814273229:library('plyr')
1539814273239:library('dplyr')
1539814273249:survey<-select(sleepsurvey, id, anxiety, ess, depress, qualslp, medhelp)
1539814273278:head(survey)
1539814327773:library('plyr')
1539814327944:library('dplyr')
1539814327951:survey<-select(sleepsurvey, id, anxiety, ess, depress, qualslp, medhelp)
1539814327968:head(survey)
1539814327983:str(survey)
1539814417629:library('plyr')
1539814417640:library('dplyr')
1539814417649:survey<-select(sleepsurvey, id, anxiety, ess, depress, qualslp, medhelp)
1539814417682:head(survey)
1539814424796:str(survey)
1539814814254:library(foreign)
1539814814259:#library(dplyr)
1539814814266:#library(ggplot2)
1539814814273:#library(psych)
1539814814282:#library(pastecs)
1539814814290:#library(semTools)
1539814814299:#library(car)
1539814814307:library(pander)
1539814827055:panderOptions('table.split.table', Inf)
1539814827063:my.data <- "
1539814827075:Concept                       | Variable Name     | Statistical Type        | Possible Values
1539814827083:Anxiety Level                 | anxiety           | Scale                   | Range from 0=no anxiety to 21=severe anxiety
1539814827090:Sleepiness Level              | ess               | Scale                   | Range from 0=low to
1539814827097:24=high daytime sleepiness
1539814827104:Depression Level              | depress           | Scale                   | Range from 0=no depression to 21=severe
1539814827111:depression
1539814827119:Quality of Sleep              | qualslp           | Nominal                 | 1=very poor 2=poor 3=fair 4=good
1539814827128:5=very good 6=excellent
1539814827138:Medication used for Sleeping  | medhelp           | Nominal                 | 1=yes 2=no "
1539814827151:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1539814827168:names(df) <- unname(as.list(df[1,])) # put headers on
1539814827175:df <- df[-1,] # remove first row
1539814827181:row.names(df)<-NULL
1539814827188:pander(df, style = 'rmarkdown')
1539814879802:panderOptions('table.split.table', Inf)
1539814879813:my.data <- "
1539814879820:Concept                       | Variable Name     | Statistical Type  | Possible Values
1539814879829:Anxiety Level                 | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1539814879835:Sleepiness Level              | ess               | Scale             | Range from 0=low to
1539814880444:24=high daytime sleepiness
1539814880447:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe
1539814880450:depression
1539814880503:Quality of Sleep              | qualslp           | Nominal           | 1=very poor 2=poor 3=fair 4=good
1539814880506:5=very good 6=excellent
1539814880512:Medication used for Sleeping  | medhelp           | Nominal           | 1=yes 2=no "
1539814880516:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1539814880524:names(df) <- unname(as.list(df[1,])) # put headers on
1539814880531:df <- df[-1,] # remove first row
1539814880538:row.names(df)<-NULL
1539814880546:pander(df, style = 'rmarkdown')
1539814973589:pastecs::stat.desc(survey$anxiety, basic=F)
1539815000984:#skewness and kurtosis from semTools with standard error
1539815000992:tpskew<-semTools::skew(survey$tslfest)
1539815001008:tpkurt<-semTools::kurtosis(survey$tslfest)
1539815001140:#We divide the skew statistic by the standard error to get the standardised score
1539815001143:stdskew<-tpskew[1]/tpskew[2]
1539815001147:stdkurt<-tpkurt[1]/tpkurt[2]
1539815001152:stdskew
1539815019421:#skewness and kurtosis from semTools with standard error
1539815019424:tpskew<-semTools::skew(survey$tslfest)
1539815037164:#skewness and kurtosis from semTools with standard error
1539815037167:tpskew<-semTools::skew(survey$anxiety)
1539815040075:tpkurt<-semTools::kurtosis(survey$anxiety)
1539815046098:#We divide the skew statistic by the standard error to get the standardised score
1539815046101:stdskew<-tpskew[1]/tpskew[2]
1539815048328:stdkurt<-tpkurt[1]/tpkurt[2]
1539815051989:stdskew
1539815062017:stdkurt
1539815067765:#skewness and kurtosis from semTools with standard error
1539815067773:tpskew<-semTools::skew(survey$anxiety)
1539815067794:tpkurt<-semTools::kurtosis(survey$anxiety)
1539815068504:#We divide the skew statistic by the standard error to get the standardised score
1539815068507:stdskew<-tpskew[1]/tpskew[2]
1539815068512:stdkurt<-tpkurt[1]/tpkurt[2]
1539815068517:stdskew
1539815068524:stdkurt
1539815183553:outliers <- survey %>%
1539815183556:filter(scale(anxiety) >3.29 | scale(anxiety) < -3.29)
1539815183656:#count them using dplyr summarize
1539815183658:numoutliers<-outliers %>%
1539815183661:summarize(count=n())
1539815183667:fullcount<-survey %>%
1539815183670:summarize(count=n())
1539815183676:numoutliers
1539815245063:?scale
1539815299989:outliers <- survey %>%
1539815299995:filter(scale(anxiety) >3.29 | scale(anxiety) < -3.29)
1539815300010:#count them using dplyr summarize
1539815300014:numoutliers<-outliers %>%
1539815300222:summarize(count=n())
1539815300229:fullcount<-survey %>%
1539815300232:summarize(count=n())
1539815300239:numoutliers
1539815300247:fullcount
1539815300255:summarize
1539815331639:outliers <- survey %>%
1539815331647:filter(scale(anxiety) >3.29 | scale(anxiety) < -3.29)
1539815331672:#count them using dplyr summarize
1539815331680:numoutliers<-outliers %>%
1539815331688:summarize(count=n())
1539815331702:fullcount<-survey %>%
1539815331708:summarize(count=n())
1539815331724:numoutliers
1539815331745:fullcount
1539815403897:#Create the histogram
1539815403904:#Adjusting theme so that all plot titles after this will be centred and in bold
1539815403911:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1539815416688:library(foreign)
1539815416697:#library(dplyr)
1539815416707:library(ggplot2)
1539815416901:#library(psych)
1539815416904:#library(pastecs)
1539815416907:#library(semTools)
1539815416910:#library(car)
1539815416913:library(pander)
1539815429670:#Create the histogram
1539815429677:#Adjusting theme so that all plot titles after this will be centred and in bold
1539815429686:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1539815429711:gg <- ggplot(survey, aes(x=survey$anxiety))
1539815429969:#Change the label of the x axis
1539815429973:gg <- gg + labs(x="Total Self Esteem")
1539815429992:#manage binwidth and colours
1539815429995:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1539815430025:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1539815430052:#adding a normal curve
1539815430055:#use stat_function to compute a normalised score for each value of tpcois
1539815430058:#pass the mean and standard deviation
1539815430065:#use the na.rm parameter to say how missing values are handled
1539815430068:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$anxiety, na.rm=TRUE), sd=sd(survey$anxiety, na.rm=TRUE)))
1539815430099:gg<-gg+ggtitle('Figure 1: Distribution Total Perceieved Feeling of Control')
1539815430127:#to display the graph request the contents of the variable be shown
1539815430130:gg
1539815464828:#Create a qqplot
1539815464836:qqnorm(survey$tslfest, main="Figure 2: QQPlot or Total Self Esteem")
1539815482929:#Create a qqplot
1539815482938:qqnorm(survey$anxiety, main="Figure 2: QQPlot or Total Self Esteem")
1539815483207:qqline(survey$anxiety, col=2) #show a line on theplot
1539884164353:setwd("~/R/Working with Data")
1539884181628:unzip('babyData.zip', exdir = './babyData')
1539884268354:babyData <- read_delim('./babyData/bnames.csv.bz2.csv', delim = ';', na = c('unknown'))
1539884297258:babyData <- read.csv('./babyData/bnames.csv.bz2.csv', na = c('unknown'))
1539884318306:bnames <- read.csv('./babyData/bnames.csv.bz2.csv', na = c('unknown'))
1539884331279:bnames <- read.csv('./babyData/bnames.csv.bz2', na = c('unknown'))
1539884352944:bnames <- read.csv('./babyData/bnames.csv.bz2')
1539884392188:setwd("~/R/Working with Data")
1539884394487:bnames <- read.csv('./babyData/bnames.csv.bz2')
1539884422299:setwd("~/R/Working with Data")
1539884433300:bnames <- read.csv('./babyData/bnames.csv.bz2')
1539884442916:bnames <- read.csv('babyData/bnames.csv.bz2')
1539884468211:bnames <- read.csv('babyData/bnames.csv.bz2')
1539884474938:#bnames <- read.csv('babyData/bnames.csv.bz2')
1539884474946:#View(bnames)
1539884474953:births <- read.csv('babyData/births.csv')
1539884484543:births <- read.csv('babyData/births.csv')
1539884503277:bnames <- read.csv('babyData/babyData/bnames.csv.bz2')
1539884535798:bnames <- read.csv('babyData/babyData/bnames.csv.bz2')
1539884536623:View(bnames)
1539884536649:births <- read.csv('babyData/babyData/births.csv')
1539884536660:View(births)
1539884598926:bnames[name=='Kate]
1539884605929:bnames[name=='Kate']
1539884623742:bnames[bnames$name=='Kate']
1539884641305:bnames$name=='Kate'
1539884656334:bnames$name[bnames$name=='Kate']
1539884667957:bnames[bnames$name=='Kate']
1539884719885:library('dplyr)
1539884788317:library('dplyr')
1539884788324:colour <- c ( ’ blue ’ , ’ black ’ , ’ blue ’ , ’ blue ’ , ’ black ’ )
1539884837737:library('dplyr')
1539884837746:colour <- c( ’blue’, ’black’, ’blue’, ’blue’, ’black’ )
1539884864238:library('dplyr')
1539884864245:colour <- c( 'blue', 'black', 'blue', 'blue', 'black' )
1539884864258:value <- 1:5
1539884864523:df <- data.frame( colour , value )
1539884864528:filter( df , colour == 'blue' )
1539884891501:filter(bnames, name=='Kate')
1539884906753:k<-filter(bnames, name=='Kate')
1539884914198:k
1539884948821:plot(k$year, k$prop)
1539885040299:filter(df, value %in% c(1,4))
1539885081997:filter(bnames, year == 2000)
1539885105699:filter(bnames, year == 2000 & sex == 'boy')
1539885134764:k<-filter(bnames, name=='Geoff')
1539885134783:k
1539885140792:plot(k$year, k$prop)
1539885156731:k<-filter(bnames, name=='Geoffery')
1539885157008:k
1539885163240:k<-filter(bnames, name=='Geoffrey')
1539885163257:k
1539885167780:plot(k$year, k$prop)
1539885187353:k<-filter(bnames, name=='Kate')
1539885187524:k
1539885190047:plot(k$year, k$prop)
1539885216453:select(df, colour)
1539885231250:select(df, -colour)
1539885236134:select(df, colour)
1539885236157:select(df, -colour)
1539885328609:select(bnames, year, name, sex)
1539885630921:arrange(df, desc(value), colour)
1539885646189:arrange(df, colour, desc(value))
1539885708616:arrange(bname, desc(prop))
1539885725666:arrange(bnames, desc(prop))
1539885770416:arrange(bnames, desc(prop))[1,]
1539885780407:arrange(bnames, desc(prop))[1,2]
1539885822084:select(bnames, name=='Kate)
1539885848265:select(bnames, name=='Kate')
1539885870441:select(bnames, name=='Kate')
1539885895100:filter(bnames, name=='Kate')
1539885984714:filter(bnames, name=='Kate') | arrange(bnames, prop)
1539885993986:filter(bnames, name=='Kate') %>% arrange(bnames, prop)
1539886194524:mutate ( temp , twice = NULL )
1539886197473:temp <- mutate ( df , twice = 2 * value ,
1539886197474:quadruple = 2 * twice )
1539886199111:mutate ( temp , twice = NULL )
1539886214079:temp <- mutate ( df , twice = 2 * value ,
1539886214081:quadruple = 2 * twice )
1539886217219:temp
1539886220041:mutate ( temp , twice = NULL )
1539886299810:summarise(df, value)
1539886306602:summarise(df)
1539886317009:summarise(df, colour, value)
1539886331660:summarise(df, total = sum(value))
1539886432143:summarise(df, total = sum(value), avg = mean(value))
1539886510074:mutate(bnames, perc = prop*100)
1539886657027:temp <- filter(bnames, name == 'Kate')
1539886658016:summarise(btemp, min = min(prop), max = max(prop))
1539886665896:summarise(btemp, mini = min(prop), maxi = max(prop))
1539886669941:summarise(temp, mini = min(prop), maxi = max(prop))
1539887376502:x <- data.frame(
1539887376509:name = c('John', 'Paul', 'George', 'Ringo', 'Stuart', 'Pete'),
1539887376515:instrument = c('guitar', 'bass', 'guitar', 'drums', 'bass', 'drums'),
1539887376521:stringsAsFactors = F)
1539887376534:x
1539887376556:y <- data.frame(
1539887376563:name = c('John', 'Paul', 'George', 'Ringo', 'Brian'),
1539887376568:band = c(T, T, T, T, F),
1539887376575:stringsAsFactors = F)
1539887376588:y
1539887404649:join(x,y,name)
1539887420595:join(x,y,by = name)
1539887428121:join(x,y,by = 'name')
1539887524937:filter(bnames, name == 'Kate') %<% summarise(bnames, mini = min(prop), maxi = max(prop))
1539887541455:summarise(bnames, mini = min(prop), maxi = max(prop)) %<% filter(bnames, name == 'Kate')
1539887556945:summarise(bnames, mini = min(prop), maxi = max(prop)) %>% filter(bnames, name == 'Kate')
1539887568744:filter(bnames, name == 'Kate') %>% summarise(bnames, mini = min(prop), maxi = max(prop))
1539887651561:inner_join(x,y,by = 'name')
1539887654421:left_join(x,y,by = 'name')
1539887656342:inner_join(x,y,by = 'name')
1539887723907:filter(bnames, name == 'Kate')# %>%
1539887725722:summarise(bnames, mini = min(prop), maxi = max(prop))
1539887736488:filter(bnames, name == 'Kate') %>% summarise(bnames, mini = min(prop), maxi = max(prop))
1539887830215:semi_join(x, y, by = 'name')
1539887837410:```{r}
1539887839109:left_join(x,y,by = 'name')
1539887841177:inner_join(x,y,by = 'name')
1539887846038:left_join(x,y,by = 'name')
1539887846049:inner_join(x,y,by = 'name')
1539887846163:semi_join(x, y, by = 'name')
1539887878606:left_join(x,y,by = 'name')
1539887878626:inner_join(x,y,by = 'name')
1539887878649:semi_join(x, y, by = 'name')
1539887878766:anti_join(x, y, by = 'name')
1539887922696:head(bnames)
1539887922931:head(births)
1539888005112:left_join(bnames, births, by = c(year, sex))
1539888012147:left_join(bnames, births, by = c('year', 'sex'))
1539888058121:mutate(joino, num_births = births*prop)
1539888065242:joino <- left_join(bnames, births, by = c('year', 'sex'))
1539888076238:joino <- left_join(bnames, births, by = c('year', 'sex'))
1539888076351:mutate(joino, num_births = births*prop)
1539888176670:mutate(joino, num_births = lower(births*prop))
1539888183295:mutate(joino, num_births = round(births*prop))
1539888212866:left_join(bnames, births, by = c('year', 'sex')) %>% mutate(joino, num_births = round(births*prop))
1539888220749:left_join(bnames, births, by = c('year', 'sex')) %>% mutate(bnames, num_births = round(births*prop))
1539888289880:group_by(joino, name)
1539888293810:summarise(joino, sum(num_births))
1539888304935:joino <- left_join(bnames, births, by = c('year', 'sex'))
1539888305107:mutate(joino, num_births = round(births*prop))
1539888334973:summarise(joino, total = sum(num_births))
1539888347903:summarise(joino, total = sum(births))
1539888356570:summarise(joino, total = sum(num_births))
1539888434378:joino <- left_join(bnames, births, by = c('year', 'sex'))
1539888434438:mutate(joino, num_births = round(births*prop))
1539888437729:group_by(joino, name)
1539888437951:summarise(joino, total = sum(num_births))
1539888460282:head(joino)
1539888474868:mutate(joino, num_births = round(births*prop))
1539888475062:head(joino)
1539888499157:mutate(joino, num_births = round(births*prop))
1539888499228:joino
1539890261302:setwd("~/R/Working with Data")
1539890296942:rm(list = ls())
1539890303160:load('Exam.RData')
1539890367784:unzip('Exam.RData', exdir = './ExamData')
1539890369667:unzip('Exam.RData', exdir = './ExamData')
1539890416778:setwd("~/R/Working with Data")
1539890462726:load('Exam.RData')
1539890475069:dir()
1539890529494:unzip('Exam.zip', exdir = './ExamData')
1539890588420:unzip('Exam.zip', exdir = './ExamData')
1539890588420:load('./ExamData/Exam.RData')
1539890652836:exam <- load('./ExamData/Exam.RData')
1539890659150:typeof(exam)
1539890669149:head(exam)
1539890680768:load('./ExamData/Exam.RData')
1539890697363:rm(list = ls())
1539890699954:unzip('Exam.zip', exdir = './ExamData')
1539890699958:load('./ExamData/Exam.RData')
1539890717018:typeof(Q1)
1539890723768:head(Q1)
1539890729895:Q1
1539890747579:as.character(Q1)
1539890785329:typeof(Q1)
1539890793704:unzip('Exam.zip', exdir = './ExamData')
1539890793708:load('./ExamData/Exam.RData')
1539890801361:typeof(Q1)
1539890807145:typeof(Q1[1])
1539890813269:Q1[1]
1539890819205:Q1[[1]
1539890821020:]
1539890825555:Q1[[1]]
1539890832490:typeof(Q1[[1]])
1539890836644:as.character(Q1)
1539890841110:as.character(Q1)
1539890843393:typeof(Q1[[1]])
1539890882286:unzip('Exam.zip', exdir = './ExamData')
1539890882286:load('./ExamData/Exam.RData')
1539890886990:Q1
1539890891310:as.character(Q1)
1539890895023:Q1
1539890924217:#Question 1
1539890924217:as.character(Q1)
1539890958219:Q2
1539890962285:Q2.zip
1539890975785:#Question 2
1539890975787:unzip('Q2.zip)
1539890981223:#Question 2
1539890981225:unzip('Q2.zip')
1539890996222:?unzip
1539891037315:getwd()
1539891057188:#Question 2
1539891057190:unzip('./ExamData/Q2.zip')
1539891081376:Q2
1539891134728:#Question 2
1539891134729:unzip('./ExamData/Q2.zip', exdir = './Q2')
1539891188221:#Question 2
1539891188223:unzip('./ExamData/Q2.zip', exdir = './ExamData/Q2')
1539891200911:ls()
1539891212844:ls(./Q2)
1539891221754:ls('./Q2')
1539891375237:#Q5
1539891375239:head(Q5)
1539891409840:mean(Q5$age)
1539891417053:Q5$age
1539891447737:?mean
1539891465582:mean(Q5$age, na.rm = TRUE)
1539891483423:#Q5
1539891483425:head(Q5)
1539891483431:mean(Q5$age, na.rm = TRUE)
1539891522173:group_by(Q5, outcome)
1539891536020:summarise(Q5, count())
1539891543922:?summarise
1539891559181:?count
1539891624584:unzip('Exam.zip', exdir = './ExamData')
1539891624587:load('./ExamData/Exam.RData')
1539891716489:#group_by(Q5, outcome)
1539891716490:Q5 %>% count(outcome)
1539891766769:filter(x, outcome == 'yes')
1539891769612:x <- Q5 %>% count(outcome)
1539891770581:filter(x, outcome == 'yes')
1539891801924:#Q5
1539891801926:head(Q5)
1539891801932:#1
1539891801933:mean(Q5$age, na.rm = TRUE)
1539891801936:#2
1539891801938:x <- Q5 %>% count(outcome)
1539891802049:filter(x, outcome == 'yes')
1539891802057:#3
1539891827243:#3
1539891827245:len_Q5 <- length(Q5)
1539891836299:length(Q5)
1539891845925:dim(Q5)
1539891882488:nrow(Q5)
1539891915612:is.na(Q5$education)
1539891924453:sum(is.na(Q5$education))
1539891969392:100*num_na/nrow_Q5
1539891974455:num_na <- sum(is.na(Q5$education))
1539891975549:100*num_na/nrow_Q5
1539891980707:#3
1539891980709:nrow_Q5 <- nrow(Q5)
1539891981767:num_na <- sum(is.na(Q5$education))
1539891983050:100*num_na/nrow_Q5
1539892020523:#Q6
1539892020524:head(Q6)
1539892132848:select(Q6, Year, Result, Wins)
1539892156625:Q6_sel <- select(Q6, Year, Result, Wins)
1539892174565:group_by(Q6_sel, Result)
1539892190900:group_by(Q6_sel, Result, Year)
1539892207304:Q6_sel_g <- group_by(Q6_sel, Result, Year)
1539892235638:summarise(Q6_sel_g, sum(Wins))
1539892269516:?qplot
1539892372332:s<-summarise(Q6_sel_g, sum(Wins))
1539892379740:qplot(s)
1539892437255:Q6 %>% select(Year, Result)
1539892485329:#Q5
1539892485329:head(Q5)
1539892485329:#1
1539892485329:mean(Q5$age, na.rm = TRUE)
1539892485329:#2
1539892485329:x <- Q5 %>% count(outcome)
1539892485454:filter(x, outcome == 'yes')
1539892485463:#3
1539892485464:nrow_Q5 <- nrow(Q5)
1539892485467:num_na <- sum(is.na(Q5$education))
1539892485470:100*num_na/nrow_Q5
1539892537565:Q6 %>% select(Year, Result, wins) %>% filter(Result == 'winner')
1539892547065:Q6 %>% select(Year, Result, Wins) %>% filter(Result == 'winner')
1539892568412:Q6 %>% filter(Result == 'winner') %>% select(Year, Result, Wins)
1539892574067:Q6 %>% filter(Result == 'winner') %>% select(Year, Wins)
1539892593865:qplot(wplot)
1539892598340:wplot <- Q6 %>% filter(Result == 'winner') %>% select(Year, Wins)
1539892599617:qplot(wplot)
1539892614786:qplot(wplot)
1539892635124:wplot
1539892644984:wplot <- Q6 %>% filter(Result == 'winner') %>% select(Wins)
1539892646237:wplot
1539892647626:qplot(wplot)
1539892654125:wplot
1539892658955:qplot(wplot)
1539892670918:as.list(wplot)
1539892680427:qplot(wplot)
1539892684850:wplot <- Q6 %>% filter(Result == 'winner') %>% select(Wins)
1539892686883:as.list(wplot)
1539892708569:wplot <- Q6 %>% filter(Result == 'winner') %>% select(Wins)
1539892708582:as.vector(wplot)
1539892708588:qplot(wplot)
1539892744294:qplot(mpg, wt, data = mtcars)
1539892755377:head(mpg)
1539892796472:head(wt)
1539892844724:qplot(Q6, wt, data = Wins)
1539892852628:qplot(Q6, wt, data = 'Wins')
1539892937019:head(mtcars)
1539892978440:qplot(Year, Wins,data = Q6)
1539893007972:qplot(Year, Wins,data = Q6, geom = 'path')
1539893111352:qplot(Year, Wins,data = Q6, geom = 'path', xlim = (2006, 2016))
1539893121875:qplot(Year, Wins,data = Q6, geom = 'path', xlim = c(2006, 2016))
1539893168376:#Q8
1539893168381:head(Q9)
1539893196789:#Q8
1539893196789:head(routes)
1539893196789:head(stop_times)
1539893196905:head(trips)
1539893278394:left_join(trips, tbl, by = trip_id)
1539893300000:left_join(trips, tbl_df, by = trip_id)
1539893314572:left_join(trips, stop_times, by = trip_id)
1539893332007:left_join(trips, stop_times, by = 'trip_id')
1539893406918:left_join(x, routes, by = 'route_id')
1539893410903:x <- left_join(trips, stop_times, by = 'trip_id')
1539893412397:left_join(x, routes, by = 'route_id')
1540027751473:library(ggplot2) #For creating histograms with more detail than plot
1540027752054:gg <- ggplot(salary, aes(x=salary$salary))
1540027758229:salary<-readRDS("salary.rds") #wd C:\Users\Kate\Documents\R\Stats\wk1
1540027775407:library(ggplot2) #For creating histograms with more detail than plot
1540027775419:gg <- ggplot(salary, aes(x=salary$salary))
1540027775689:#gg <- gg + labs(x="Normalised exam score") #Change the label of the x axis
1540027775692:#manage binwidth and colours
1540027775696:#gg <- gg + geom_histogram(binwidth=0.5, colour="black", aes(y=..density.., fill=..count..))
1540027775699:#gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540027775702:#adding a normal curve
1540027775706:#use stat_function to compute a normalised score for each value of tpcois
1540027775709:#pass the mean and standard deviation
1540027775713:#use the na.rm parameter to say how missing values are handled
1540027775717:#gg <- gg + stat_function(fun=dnorm, #color="red",args=list(mean=mean(salary$salary, na.rm=TRUE), #sd=sd(salary$salary, na.rm=TRUE)))
1540027775772:gg
1540027806001:?`ggplot2`
1540027820133:?`ggplot2`
1540027824129:?`ggplot`
1540027965387:library(ggplot2) #For creating histograms with more detail than plot
1540027965390:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540027965501:#gg <- ggplot(survey, aes(x=survey$anxiety))
1540027965504:gg <- ggplot(salary, aes(x=salary$expr))
1540027965523:#gg <- gg + labs(x="Normalised exam score") #Change the label of the x axis
1540027965526:#manage binwidth and colours
1540027965529:#gg <- gg + geom_histogram(binwidth=0.5, colour="black", aes(y=..density.., fill=..count..))
1540027965532:#gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540027965535:#adding a normal curve
1540027965538:#use stat_function to compute a normalised score for each value of tpcois
1540027965541:#pass the mean and standard deviation
1540027965546:#use the na.rm parameter to say how missing values are handled
1540027965549:#gg <- gg + stat_function(fun=dnorm, #color="red",args=list(mean=mean(salary$salary, na.rm=TRUE), #sd=sd(salary$salary, na.rm=TRUE)))
1540027965552:gg
1540027973036:library(ggplot) #For creating histograms with more detail than plot
1540027996784:library(ggplot2) #For creating histograms with more detail than plot
1540027996787:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540027996793:#gg <- ggplot(survey, aes(x=survey$anxiety))
1540027996796:gg <- ggplot(salary, aes(x=salary$expr))
1540027996813:#gg <- gg + labs(x="Normalised exam score") #Change the label of the x axis
1540027996816:#manage binwidth and colours
1540027996819:#gg <- gg + geom_histogram(binwidth=0.5, colour="black", aes(y=..density.., fill=..count..))
1540027996822:#gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540027996824:#adding a normal curve
1540027996827:#use stat_function to compute a normalised score for each value of tpcois
1540027996830:#pass the mean and standard deviation
1540027996835:#use the na.rm parameter to say how missing values are handled
1540027996841:#gg <- gg + stat_function(fun=dnorm, #color="red",args=list(mean=mean(salary$salary, na.rm=TRUE), #sd=sd(salary$salary, na.rm=TRUE)))
1540027996844:gg
1540028014824:salary
1540028024960:typeof(salary)
1540028032157:salary$salary
1540028080953:salary$expr
1540028084689:salary$exper
1540028094514:library(ggplot2) #For creating histograms with more detail than plot
1540028094523:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540028094542:#gg <- ggplot(survey, aes(x=survey$anxiety))
1540028094550:gg <- ggplot(salary, aes(x=salary$exper))
1540028094773:#gg <- gg + labs(x="Normalised exam score") #Change the label of the x axis
1540028094776:#manage binwidth and colours
1540028094778:#gg <- gg + geom_histogram(binwidth=0.5, colour="black", aes(y=..density.., fill=..count..))
1540028094781:#gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540028094784:#adding a normal curve
1540028094786:#use stat_function to compute a normalised score for each value of tpcois
1540028094789:#pass the mean and standard deviation
1540028094794:#use the na.rm parameter to say how missing values are handled
1540028094797:#gg <- gg + stat_function(fun=dnorm, #color="red",args=list(mean=mean(salary$salary, na.rm=TRUE), #sd=sd(salary$salary, na.rm=TRUE)))
1540028094799:gg
1540032439112:library(foreign)
1540032439252:#library(dplyr)
1540032439256:library(ggplot2)
1540032439259:#library(psych)
1540032439262:#library(pastecs)
1540032439265:#library(semTools)
1540032439268:#library(car)
1540032439270:library(pander)
1540032442021:#Reading in the dataset
1540032442029:sleepsurvey <- as.data.frame(read.spss("sleep5ED.sav"))
1540032990646:setwd("~/R/Stats/wk3")
1540032994757:knitr::opts_chunk$set(echo = TRUE)
1540032994804:#We are using a .dat file (survey.dat) created from the SPSS file survey.sav  taken from SPSS Survival Manual 6th Edition Julie Pallant
1540032994810:#http://spss.allenandunwin.com.s3-website-ap-southeast-2.amazonaws.com/data-files.html#.Wb0vvnWP-po
1540032994816:#Results on a survey on well being
1540032994822:#We need to load the file so that we can use it in R.
1540032994828:survey <- read.table("survey.dat")
1540032994963:#Setting the column names to be that used in the dataset
1540032994966:colnames(survey) <- tolower(colnames(survey))
1540032995125:#Inspecting the data
1540032995133:#Remember to install these packages if you haven't already done so
1540032995393:library(pastecs) #For creating descriptive statistic summaries
1540032995420:library(ggplot2) #For creating histograms with more detail than plot
1540032995423:library(psych) # Some useful descriptive functions
1540032995753:library(semTools) #For skewness and kurtosis
1540032995963:library(car) # For Levene's test for homogeneity of variance
1540032996278:#numerical summary and histograms of variables of interest
1540032996281:#Starting with feeling of control
1540032996284:#stat.desc is a function from pastecs - make sure you include the basic switch=F to ensure you don't get scienfitic notation
1540032996288:pastecs::stat.desc(survey$tpcoiss, basic=F)
1540032996364:#skewness and kurtosis from semTools with standard error
1540032996372:tpskew<-semTools::skew(survey$tpcoiss)
1540032996390:tpkurt<-semTools::kurtosis(survey$tpcoiss)
1540032996407:#We divide the skew statistic by the standard error to get the standardised score
1540032996416:tpskew[1]/tpskew[2]
1540032996436:tpkurt[1]/tpkurt[2]
1540032996505:#We will allocate the histogram to a variable to allow use to manipulate it
1540032996508:gg <- ggplot(survey, aes(x=survey$tpcoiss))
1540032996578:#Change the label of the x axis
1540032996581:gg <- gg + labs(x="Feeling of Control")
1540032996700:#manage binwidth and colours
1540032996705:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540032996853:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540032996979:#adding a normal curve
1540032996982:#use stat_function to compute a normalised score for each value of tpcois
1540032996986:#pass the mean and standard deviation
1540032996989:#use the na.rm parameter to say how missing values are handled
1540032996992:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$tpcoiss, na.rm=TRUE), sd=sd(survey$tpcoiss, na.rm=TRUE)))
1540032997136:#to display the graph request the contents of the variable be shown
1540032997140:gg
1540032997743:#Create a qqplot
1540032997752:qqnorm(survey$tpcoiss)
1540032998002:qqline(survey$tpcoiss, col=2) #show a line on theplot
1540032998013:#Create standardised scores and sort
1540032998017:sort(scale(survey$tpcoiss))
1540032998745:#Repeat for the variable representing feelings of stress
1540032998754:pastecs::stat.desc(survey$tpstress, basic=F)
1540032998814:semTools::skew(survey$tpstress)
1540032998905:semTools::kurtosis(survey$tpstress)
1540032998948:gs <- ggplot(survey, aes(x=survey$tpstress))
1540032999085:gs <- gs + labs(x="Perceived Stress")
1540032999172:gs <- gs + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540032999245:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540032999320:gs <- gs + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$tpstress, na.rm=TRUE), sd=sd(survey$tpstress, na.rm=TRUE)))
1540032999413:gs
1540032999924:#Create a qqplot
1540032999929:qqnorm(survey$tpstress)
1540033000244:qqline(survey$tpstress, col=2) #show a line on theplot
1540033000253:#Sort the standardised scores
1540033000257:sort(scale(survey$tpstress))
1540033000831:#Simple scatterplot of feeling of control and perceived stress
1540033000834:#aes(x,y)
1540033000837:scatter <- ggplot(survey, aes(survey$tpstress, survey$tpcoiss))
1540033000910:scatter + geom_point() + labs(x = "Total Perceived Stress", y = "Total PCOISS")
1540033001201:#Add a regression line
1540033001209:scatter + geom_point() + geom_smooth(method = "lm", colour = "Red", se = F) + labs(x = "Total Perceived Stress", y = "Total PCOISS")
1540033036031:#Pearson Correlation
1540033036040:stats::cor.test(survey$tpcoiss, survey$tpstress, method='pearson')
1540033036175:#Spearman Correlation
1540033036183:#Change the method to be spearman.
1540033036192:#This test will give an error since this method uses ranking but cannot handle ties
1540033036201:cor.test(survey$tpcoiss, survey$tpstress, method = "spearman")
1540033036329:#We can also use kendall's tau which does handle ties
1540033036335:cor.test(survey$tpcoiss, survey$tpstress, method = "kendall")
1540033512298:?scale
1540039779285:describeBy(survey$anxiety, group=survey$medhelp)
1540039800336:#Get descriptive stastitics by group
1540039800339:#describeBy is part of the psych package so you need to use it
1540039800343:psych::describeBy(survey$tslfest,group=survey$sex)
1540039800386:#Conduct Levene's test for homogeneity of variance in library car
1540039800389:car::leveneTest(tslfest ~ sex, data=survey)
1540039800412:#Conduct the t-test from package stats
1540039800415:#You can use the var.equal = TRUE option to specify equal variances and a pooled variance estimate
1540039800418:stats::t.test(tslfest~sex,var.equal=TRUE,data=survey)
1540039809375:drinkset<- read.table("C:/tempR/Field-BDI-Non-parametric.dat")
1540039840912:?describeBy
1540039864628:library(foreign)
1540039864898:#library(dplyr)
1540039864903:library(ggplot2)
1540039864964:#library(psych)
1540039864974:#library(pastecs)
1540039865038:#library(semTools)
1540039865047:#library(car)
1540039865172:library(pander)
1540039870089:library('plyr')
1540039870527:library('dplyr')
1540039870553:survey<-select(sleepsurvey, id, anxiety, ess, depress, qualslp, medhelp)
1540039870572:head(survey)
1540039876678:panderOptions('table.split.table', Inf)
1540039876688:my.data <- "
1540039876694:Concept                       | Variable Name     | Statistical Type  | Possible Values
1540039876702:Anxiety Level                 | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1540039876885:Sleepiness Level              | ess               | Scale             | Range from 0=low to
1540039876888:24=high daytime sleepiness
1540039876890:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe
1540039876893:depression
1540039876896:Quality of Sleep              | qualslp           | Nominal           | 1=very poor 2=poor 3=fair 4=good
1540039876898:5=very good 6=excellent
1540039876903:Medication used for Sleeping  | medhelp           | Nominal           | 1=yes 2=no "
1540039876908:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1540039876915:names(df) <- unname(as.list(df[1,])) # put headers on
1540039876922:df <- df[-1,] # remove first row
1540039876929:row.names(df)<-NULL
1540039876935:pander(df, style = 'rmarkdown')
1540039882048:pastecs::stat.desc(survey$anxiety, basic=F)
1540039885923:#skewness and kurtosis from semTools with standard error
1540039885929:tpskew<-semTools::skew(survey$anxiety)
1540039886159:tpkurt<-semTools::kurtosis(survey$anxiety)
1540039886165:#We divide the skew statistic by the standard error to get the standardised score
1540039886168:stdskew<-tpskew[1]/tpskew[2]
1540039886173:stdkurt<-tpkurt[1]/tpkurt[2]
1540039886178:stdskew
1540039886186:stdkurt
1540039890043:outliers <- survey %>%
1540039890050:filter(scale(anxiety) >3.29 | scale(anxiety) < -3.29)
1540039890645:#count them using dplyr summarize
1540039890653:numoutliers<-outliers %>%
1540039890661:summarize(count=n())
1540039890810:fullcount<-survey %>%
1540039890865:summarize(count=n())
1540039890872:numoutliers
1540039890879:fullcount
1540039895046:#Create the histogram
1540039895053:#Adjusting theme so that all plot titles after this will be centred and in bold
1540039895061:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540039895077:gg <- ggplot(survey, aes(x=survey$anxiety))
1540039895119:#Change the label of the x axis
1540039895128:gg <- gg + labs(x="Total Self Esteem")
1540039895168:#manage binwidth and colours
1540039895176:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540039895232:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540039895282:#adding a normal curve
1540039895290:#use stat_function to compute a normalised score for each value of tpcois
1540039895298:#pass the mean and standard deviation
1540039895306:#use the na.rm parameter to say how missing values are handled
1540039895315:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$anxiety, na.rm=TRUE), sd=sd(survey$anxiety, na.rm=TRUE)))
1540039895376:gg<-gg+ggtitle('Figure 1: Distribution Total Perceieved Feeling of Control')
1540039895418:#to display the graph request the contents of the variable be shown
1540039895420:gg
1540039907565:#Create a qqplot
1540039907572:qqnorm(survey$anxiety, main="Figure 2: QQPlot or Total Self Esteem")
1540039907789:qqline(survey$anxiety, col=2) #show a line on theplot
1540039912169:describeBy(survey$anxiety, group=survey$medhelp)
1540040131798:leveneTest(anxiety ~ medhelp, data = survey)
1540040337491:t.test(anxiety ~ medhelp, var.equal = TRUE, data = survey)
1540040611058:ttest <- t.test(anxiety ~ medhelp, var.equal = TRUE, data = survey)
1540040620632:ttest[1]
1540040626736:ttest[1,1]
1540040631916:ttest[1,2]
1540040638223:ttest[1]
1540040643224:2*ttest[1]
1540040663664:t.test(anxiety ~ medhelp, var.equal = TRUE, data = survey)
1540040699313:2*2.6471/sqrt(266)
1540135381419:library(foreign)
1540135381428:#library(dplyr)
1540135381436:library(ggplot2)
1540135381447:#library(psych)
1540135381457:#library(pastecs)
1540135381464:#library(semTools)
1540135381472:#library(car)
1540135381482:library(pander)
1540135403014:library('plyr')
1540135403021:library('dplyr')
1540135403028:survey<-select(sleepsurvey, id, anxiety, ess, depress, qualslp, medhelp)
1540135403046:head(survey)
1540135406536:str(survey)
1540135414753:panderOptions('table.split.table', Inf)
1540135414762:my.data <- "
1540135414773:Concept                       | Variable Name     | Statistical Type  | Possible Values
1540135414789:Anxiety Level                 | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1540135414796:Sleepiness Level              | ess               | Scale             | Range from 0=low to
1540135414803:24=high daytime sleepiness
1540135415159:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe
1540135415162:depression
1540135415165:Quality of Sleep              | qualslp           | Nominal           | 1=very poor 2=poor 3=fair 4=good
1540135415168:5=very good 6=excellent
1540135415171:Medication used for Sleeping  | medhelp           | Nominal           | 1=yes 2=no "
1540135415176:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1540135415183:names(df) <- unname(as.list(df[1,])) # put headers on
1540135415191:df <- df[-1,] # remove first row
1540135415198:row.names(df)<-NULL
1540135415204:pander(df, style = 'rmarkdown')
1540135477498:str(survey)
1540135481385:panderOptions('table.split.table', Inf)
1540135481394:my.data <- "
1540135481405:Concept                       | Variable Name     | Statistical Type  | Possible Values
1540135481413:Anxiety Level                 | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1540135481422:Sleepiness Level              | ess               | Scale             | Range from 0=low to
1540135481666:24=high daytime sleepiness
1540135481670:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe
1540135481672:depression
1540135481675:Quality of Sleep              | qualslp           | Nominal           | 1=very poor 2=poor 3=fair 4=good
1540135481677:5=very good 6=excellent
1540135481683:Medication used for Sleeping  | medhelp           | Nominal           | 1=yes 2=no "
1540135481688:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1540135481695:names(df) <- unname(as.list(df[1,])) # put headers on
1540135481702:df <- df[-1,] # remove first row
1540135481709:row.names(df)<-NULL
1540135481716:pander(df, style = 'rmarkdown')
1540135534819:pastecs::stat.desc(survey$anxiety, basic=F)
1540135566068:is.na(survey$anxiety)
1540135575562:sum(is.na(survey$anxiety))
1540135598348:length(survey$anxiety)
1540135636212:num_na <- sum(is.na(survey$anxiety))
1540135640504:num_na
1540135642582:100*num_na/length(survey$anxiety)
1540135682168:pastecs::stat.desc(survey$anxiety, basic=F)
1540135685007:#skewness and kurtosis from semTools with standard error
1540135685014:tpskew<-semTools::skew(survey$anxiety)
1540135685032:tpkurt<-semTools::kurtosis(survey$anxiety)
1540135685318:#We divide the skew statistic by the standard error to get the standardised score
1540135685321:stdskew<-tpskew[1]/tpskew[2]
1540135685326:stdkurt<-tpkurt[1]/tpkurt[2]
1540135685330:stdskew
1540135685336:stdkurt
1540135959438:?scale
1540136021850:x <- matrix(1:10, ncol = 2)
1540136023413:x
1540136047352:scale(x, scale = FALSE)
1540136057146:scale(x)
1540136163719:outliers <- survey %>% filter(scale(anxiety) >3.29 | scale(anxiety) < -3.29)
1540136163829:#count them using dplyr summarize
1540136163834:numoutliers<-outliers %>%
1540136163840:summarize(count=n())
1540136163850:fullcount<-survey %>%
1540136163855:summarize(count=n())
1540136163867:numoutliers
1540136163880:fullcount
1540136754679:num_na <- sum(is.na(survey$anxiety))
1540136754689:num_na
1540136754709:len_tot <- length(survey$anxiety)
1540136754722:len_tot
1540136754741:100*num_na/len_tot
1540138049314:outliers <- survey %>% filter(scale(anxiety) >3.29 | scale(anxiety) < -3.29)
1540138049351:#count them using dplyr summarize
1540138049361:numoutliers<-outliers %>% summarize(count=n())
1540138049511:fullcount<-survey %>% summarize(count=n())
1540138049520:numoutliers
1540138049531:fullcount
1540138060964:#Create the histogram
1540138060972:#Adjusting theme so that all plot titles after this will be centred and in bold
1540138060982:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540138061008:gg <- ggplot(survey, aes(x=survey$anxiety))
1540138061149:#Change the label of the x axis
1540138061155:gg <- gg + labs(x="Total Self Esteem")
1540138061238:#manage binwidth and colours
1540138061242:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540138061266:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540138061346:#adding a normal curve
1540138061350:#use stat_function to compute a normalised score for each value of tpcois
1540138061353:#pass the mean and standard deviation
1540138061361:#use the na.rm parameter to say how missing values are handled
1540138061365:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$anxiety, na.rm=TRUE), sd=sd(survey$anxiety, na.rm=TRUE)))
1540138061626:gg<-gg+ggtitle('Figure 1: Distribution Total Perceieved Feeling of Control')
1540138061695:#to display the graph request the contents of the variable be shown
1540138061705:gg
1540138070845:#Create a qqplot
1540138070855:qqnorm(survey$anxiety, main="Figure 2: QQPlot or Total Self Esteem")
1540138071015:qqline(survey$anxiety, col=2) #show a line on theplot
1540138210120:num_na <- sum(is.na(survey$ess))
1540138210136:num_na
1540138210156:len_tot <- length(survey$ess)
1540138210170:len_tot
1540138210185:100*num_na/len_tot
1540138297501:num_na <- sum(is.na(survey$depress))
1540138297515:num_na
1540138297538:len_tot <- length(survey$depress)
1540138297654:len_tot
1540138297661:100*num_na/len_tot
1540138337870:num_na <- sum(is.na(survey$qualslp))
1540138337882:num_na
1540138337900:len_tot <- length(survey$qualslp)
1540138337913:len_tot
1540138337931:100*num_na/len_tot
1540138379383:num_na <- sum(is.na(survey$medhelp))
1540138379394:num_na
1540138379413:len_tot <- length(survey$medhelp)
1540138379426:len_tot
1540138379436:100*num_na/len_tot
1540138449484:pastecs::stat.desc(survey$ess, basic=F)
1540138481426:pastecs::stat.desc(survey$depress, basic=F)
1540138529237:num_na <- sum(is.na(survey$qualslp))
1540138529245:num_na
1540138529253:len_tot <- length(survey$qualslp)
1540138529257:len_tot
1540138529470:100*num_na/len_tot
1540138533206:pastecs::stat.desc(survey$qualslp, basic=F)
1540138597461:table(survey$qualslp)
1540138597517:#Get descriptive stastitics by group
1540138597526:psych::describeBy(survey$qualslp)
1540138616854:table(survey$qualslp)
1540138616909:#Get descriptive stastitics by group
1540138616918:#psych::describeBy(survey$qualslp)
1540138727834:survey$qualslp
1540138747483:survey$qualsleeprec
1540138802368:sleepsurvey$qualsleeprec
1540138817211:survey$qualslp
1540138825496:table(survey$qualslp)
1540138851748:table(survey$medhelp)
1540138862415:#Get descriptive stastitics by group
1540138862646:psych::describeBy(survey$medhelp)
1540138910794:table(survey$sex)
1540138910797:#Get descriptive stastitics by group
1540138910798:psych::describeBy(survey$tslfest, survey$sex)
1540138947514:bar <- ggplot(survey, aes(qualslp))
1540138947810:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Gender", y = "Mean Total Self Esteem Score", title="Figure 5: Mean Total Self Esteem by Gender")
1540140345816:typeof(survey$qualslp)
1540140352431:table(survey$qualslp)
1540140377712:survey$qualslp
1540140385796:typeof(survey$qualslp)
1540140397415:sum(survey$qualslp)
1540140594215:typeof(survey$qualslp)
1540140599929:table(survey$qualslp)
1540140736532:?replace
1540140772260:replace.value( data, names, from=NA, to=as.integer(0), verbose = FALSE)
1540140794455:library('manip')
1540140810424:download.packages('manip')
1540140852907:install.packages('manip')
1540140932625:table(survey$qualslp)
1540141010194:replace(survey$qualslp, c('very poor', 'poor', 'fair', 'good', 'very good', 'excellent'), c(1, 2, 3, 4, 5, 6))
1540232769167:survey$qualslp[survey$qualslp=='very poor'] <- 1
1540232786414:survey$qualslp[survey$qualslp=='very poor']
1540232793644:survey$qualslp
1540232811866:survey$qualslp[survey$qualslp=='very poor']
1540232881980:plot(survey$qualslp)
1540232901209:plot(survey$qualslp, survey$anxiety)
1540232934776:survey$qualslp
1540232936802:typeof(survey$qualslp)
1540232938358:table(survey$qualslp)
1540232964333:plot(survey$qualslp)
1540233075256:table(survey$medhelp)
1540233091427:plot(survey$qualslp)
1540233097486:plot(survey$medhelp)
1540233113011:table(survey$medhelp)
1540233270049:#skewness and kurtosis from semTools with standard error
1540233270193:tpskew<-semTools::skew(survey$ess)
1540233270200:tpkurt<-semTools::kurtosis(survey$ess)
1540233270206:#We divide the skew statistic by the standard error to get the standardised score
1540233270209:stdskew<-tpskew[1]/tpskew[2]
1540233270215:stdkurt<-tpkurt[1]/tpkurt[2]
1540233270220:stdskew
1540233283010:#skewness and kurtosis from semTools with standard error
1540233283018:tpskew<-semTools::skew(survey$ess)
1540233283038:tpkurt<-semTools::kurtosis(survey$ess)
1540233283461:#We divide the skew statistic by the standard error to get the standardised score
1540233283465:stdskew<-tpskew[1]/tpskew[2]
1540233283471:stdkurt<-tpkurt[1]/tpkurt[2]
1540233283476:stdskew
1540233283483:stdkurt
1540233335825:outliers <- survey %>% filter(scale(ess) >3.29 | scale(ess) < -3.29)
1540233335854:#count them using dplyr summarize
1540233336025:numoutliers<-outliers %>% summarize(count=n())
1540233336041:fullcount<-survey %>% summarize(count=n())
1540233336059:numoutliers
1540233336083:fullcount
1540233377995:#Create the histogram
1540233378003:#Adjusting theme so that all plot titles after this will be centred and in bold
1540233378011:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540233378030:gg <- ggplot(survey, aes(x=survey$ess))
1540233378190:#Change the label of the x axis
1540233378245:gg <- gg + labs(x="Total Self Esteem")
1540233378262:#manage binwidth and colours
1540233378265:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540233378289:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540233378310:#adding a normal curve
1540233378313:#use stat_function to compute a normalised score for each value of tpcois
1540233378316:#pass the mean and standard deviation
1540233378322:#use the na.rm parameter to say how missing values are handled
1540233378325:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$ess, na.rm=TRUE), sd=sd(survey$ess, na.rm=TRUE)))
1540233378353:gg<-gg+ggtitle('Figure 1: Distribution Total Perceieved Feeling of Control')
1540233378378:#to display the graph request the contents of the variable be shown
1540233378381:gg
1540233417733:#Create a qqplot
1540233417741:qqnorm(survey$ess="Figure 2: QQPlot or Total Self Esteem")
1540233431366:#Create a qqplot
1540233431371:qqnorm(survey$ess="Figure 2: QQPlot or Total Self Esteem")
1540233445322:#Create a qqplot
1540233445326:qqnorm(survey$ess='Figure 2: QQPlot or Total Self Esteem')
1540233489044:#Create a qqplot
1540233489051:qqnorm(survey$ess, main="Figure 2: QQPlot or Total Self Esteem")
1540233489099:qqline(survey$ess, col=2) #show a line on theplot
1540233641370:#skewness and kurtosis from semTools with standard error
1540233641377:tpskew<-semTools::skew(survey$depress)
1540233641393:tpkurt<-semTools::kurtosis(survey$depress)
1540233641409:#We divide the skew statistic by the standard error to get the standardised score
1540233641417:stdskew<-tpskew[1]/tpskew[2]
1540233641534:stdkurt<-tpkurt[1]/tpkurt[2]
1540233641542:stdskew
1540233641551:stdkurt
1540233673095:outliers <- survey %>% filter(scale(ess) >3.29 | scale(ess) < -3.29)
1540233673123:#count them using dplyr summarize
1540233673137:numoutliers<-outliers %>% summarize(count=n())
1540233673161:fullcount<-survey %>% summarize(count=n())
1540233673285:numoutliers
1540233673298:fullcount
1540233717070:outliers <- survey %>% filter(scale(depress) >3.29 | scale(depress) < -3.29)
1540233717086:#count them using dplyr summarize
1540233717091:numoutliers<-outliers %>% summarize(count=n())
1540233717099:fullcount<-survey %>% summarize(count=n())
1540233717107:numoutliers
1540233717117:fullcount
1540233739262:#Create the histogram
1540233739269:#Adjusting theme so that all plot titles after this will be centred and in bold
1540233739277:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540233739289:gg <- ggplot(survey, aes(x=survey$depress))
1540233739312:#Change the label of the x axis
1540233739317:gg <- gg + labs(x="Total Self Esteem")
1540233739346:#manage binwidth and colours
1540233739350:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540233739385:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540233739423:#adding a normal curve
1540233739428:#use stat_function to compute a normalised score for each value of tpcois
1540233739484:#pass the mean and standard deviation
1540233739491:#use the na.rm parameter to say how missing values are handled
1540233739500:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$depress, na.rm=TRUE), sd=sd(survey$depress, na.rm=TRUE)))
1540233739633:gg<-gg+ggtitle('Figure 1: Distribution Total Perceieved Feeling of Control')
1540233739801:#to display the graph request the contents of the variable be shown
1540233739805:gg
1540233784384:#Create a qqplot
1540233784391:qqnorm(survey$depress, main="Figure 2: QQPlot or Total Self Esteem")
1540233784442:qqline(survey$depress, col=2) #show a line on theplot
1540233816308:library(dplyr)
1540233816450:library(ggplot2) #For creating histograms with more detail than plot
1540233816454:library(psych) # Some useful descriptive functions
1540233816457:library(pastecs)#Some useful descriptive functions
1540233816460:library(semTools) #For skewness and kurtosis
1540233816463:library(car) # For Levene's test for homogeneity of variance
1540233816466:library(pander) # For creating a table
1540233816469:#Read in the dataset
1540233816470:survey <- read.table("survey.dat")
1540233816645:#Setting the column names to be that used in the dataset
1540233816647:colnames(survey) <- tolower(colnames(survey))
1540233820112:panderOptions('table.split.table', Inf)
1540233820116:my.data <- "
1540233820118:Concept                       | Variable Name     | Statistical Type        | Possible Values
1540233820119:Self Esteem                   | tlfsest           | Scale                   | Range from 10 to 40
1540233820121:Perceived Sense of Control    | tpcoiss           | Scale                   | Range from 18 to 90
1540233820124:Gender                        | sex               | Nominal                 | 1= male; 2=female
1540233820127:Age Group                     | agegp3            | Nominal                 | 1=18-29yrs, 2=30-44yrs, 3=45+yrs "
1540233820129:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1540233820129:names(df) <- unname(as.list(df[1,])) # put headers on
1540233820129:df <- df[-1,] # remove first row
1540233820129:row.names(df)<-NULL
1540233820129:pander(df, style = 'rmarkdown')
1540233827936:#Descriptive statisics
1540233827938:pastecs::stat.desc(survey$tslfest, basic=F)
1540233827947:#skewness and kurtosis from semTools with standard error
1540233827948:tpskew<-semTools::skew(survey$tslfest)
1540233827951:tpkurt<-semTools::kurtosis(survey$tslfest)
1540233827955:#We divide the skew statistic by the standard error to get the standardised score
1540233827958:stdskew<-tpskew[1]/tpskew[2]
1540233827960:stdkurt<-tpkurt[1]/tpkurt[2]
1540233827963:stdskew
1540233827968:stdkurt
1540233827971:#Use dplyr filter to filter out the rows with a standardised value outsude the range
1540233827972:outliers <- survey %>%
1540233827973:filter(scale(tslfest) >3.29 | scale(tslfest) < -3.29)
1540233827985:#count them using dplyr summarize
1540233827986:numoutliers<-outliers %>%
1540233827988:summarize(count=n())
1540233827996:fullcount<-survey %>%
1540233827998:summarize(count=n())
1540233828008:numoutliers
1540233828012:fullcount
1540233834835:#Descriptive statisics
1540233834839:pastecs::stat.desc(survey$tslfest, basic=F)
1540233834861:#skewness and kurtosis from semTools with standard error
1540233834864:tpskew<-semTools::skew(survey$tslfest)
1540233834874:tpkurt<-semTools::kurtosis(survey$tslfest)
1540233834884:#We divide the skew statistic by the standard error to get the standardised score
1540233834889:stdskew<-tpskew[1]/tpskew[2]
1540233834895:stdkurt<-tpkurt[1]/tpkurt[2]
1540233834900:stdskew
1540233834906:stdkurt
1540233834916:#Use dplyr filter to filter out the rows with a standardised value outsude the range
1540233834921:outliers <- survey %>%
1540233834926:filter(scale(tslfest) >3.29 | scale(tslfest) < -3.29)
1540233834945:#count them using dplyr summarize
1540233834947:numoutliers<-outliers %>%
1540233834948:summarize(count=n())
1540233834957:fullcount<-survey %>%
1540233834958:summarize(count=n())
1540233834972:numoutliers
1540233834976:fullcount
1540234001184:setwd("~/R/Stats/CA")
1540234015194:library(dplyr)
1540234015198:library(ggplot2) #For creating histograms with more detail than plot
1540234015202:library(psych) # Some useful descriptive functions
1540234015205:library(pastecs)#Some useful descriptive functions
1540234015206:library(semTools) #For skewness and kurtosis
1540234015206:library(car) # For Levene's test for homogeneity of variance
1540234015206:library(pander) # For creating a table
1540234015206:#Read in the dataset
1540234015223:survey <- read.table("survey.dat")
1540234015230:#Setting the column names to be that used in the dataset
1540234015233:colnames(survey) <- tolower(colnames(survey))
1540234021230:panderOptions('table.split.table', Inf)
1540234021236:my.data <- "
1540234021241:Concept                       | Variable Name     | Statistical Type        | Possible Values
1540234021244:Self Esteem                   | tlfsest           | Scale                   | Range from 10 to 40
1540234021247:Perceived Sense of Control    | tpcoiss           | Scale                   | Range from 18 to 90
1540234021252:Gender                        | sex               | Nominal                 | 1= male; 2=female
1540234021252:Age Group                     | agegp3            | Nominal                 | 1=18-29yrs, 2=30-44yrs, 3=45+yrs "
1540234021252:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1540234021252:names(df) <- unname(as.list(df[1,])) # put headers on
1540234021270:df <- df[-1,] # remove first row
1540234021270:row.names(df)<-NULL
1540234021270:pander(df, style = 'rmarkdown')
1540234027019:#Descriptive statisics
1540234027021:pastecs::stat.desc(survey$tslfest, basic=F)
1540234027029:#skewness and kurtosis from semTools with standard error
1540234027030:tpskew<-semTools::skew(survey$tslfest)
1540234027034:tpkurt<-semTools::kurtosis(survey$tslfest)
1540234027038:#We divide the skew statistic by the standard error to get the standardised score
1540234027038:stdskew<-tpskew[1]/tpskew[2]
1540234027038:stdkurt<-tpkurt[1]/tpkurt[2]
1540234027042:stdskew
1540234027042:stdkurt
1540234027042:#Use dplyr filter to filter out the rows with a standardised value outsude the range
1540234027042:outliers <- survey %>%
1540234027042:filter(scale(tslfest) >3.29 | scale(tslfest) < -3.29)
1540234027057:#count them using dplyr summarize
1540234027057:numoutliers<-outliers %>%
1540234027057:summarize(count=n())
1540234027073:fullcount<-survey %>%
1540234027074:summarize(count=n())
1540234027074:numoutliers
1540234027074:fullcount
1540234095127:table(survey$qualslp)
1540234095139:plot(survey$qualslp)
1540234109244:library(foreign)
1540234109253:#library(dplyr)
1540234109264:library(ggplot2)
1540234109272:#library(psych)
1540234109283:#library(pastecs)
1540234109291:#library(semTools)
1540234109298:#library(car)
1540234109308:library(pander)
1540234111851:#Reading in the dataset
1540234111860:sleepsurvey <- as.data.frame(read.spss("sleep5ED.sav"))
1540234118377:library('plyr')
1540234118389:library('dplyr')
1540234118397:survey<-select(sleepsurvey, id, anxiety, ess, depress, qualslp, medhelp)
1540234118671:head(survey)
1540234122281:panderOptions('table.split.table', Inf)
1540234122290:my.data <- "
1540234122300:Concept                       | Variable Name     | Statistical Type  | Possible Values
1540234122308:Anxiety Level                 | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1540234122320:Sleepiness Level              | ess               | Scale             | Range from 0=low to
1540234122330:24=high daytime sleepiness
1540234122337:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe
1540234122346:depression
1540234122353:Quality of Sleep              | qualslp           | Nominal           | 1=very poor 2=poor 3=fair 4=good
1540234122359:5=very good 6=excellent
1540234122370:Medication used for Sleeping  | medhelp           | Nominal           | 1=yes 2=no "
1540234122377:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1540234122387:names(df) <- unname(as.list(df[1,])) # put headers on
1540234122397:df <- df[-1,] # remove first row
1540234122406:row.names(df)<-NULL
1540234122415:pander(df, style = 'rmarkdown')
1540234128168:num_na <- sum(is.na(survey$anxiety))
1540234128175:num_na
1540234128185:len_tot <- length(survey$anxiety)
1540234128192:len_tot
1540234128403:100*num_na/len_tot
1540234133542:#skewness and kurtosis from semTools with standard error
1540234133550:tpskew<-semTools::skew(survey$anxiety)
1540234133563:tpkurt<-semTools::kurtosis(survey$anxiety)
1540234133578:#We divide the skew statistic by the standard error to get the standardised score
1540234133587:stdskew<-tpskew[1]/tpskew[2]
1540234133600:stdkurt<-tpkurt[1]/tpkurt[2]
1540234133763:stdskew
1540234133772:stdkurt
1540234136451:pastecs::stat.desc(survey$anxiety, basic=F)
1540234146672:outliers <- survey %>% filter(scale(anxiety) >3.29 | scale(anxiety) < -3.29)
1540234146702:#count them using dplyr summarize
1540234146912:numoutliers<-outliers %>% summarize(count=n())
1540234146921:fullcount<-survey %>% summarize(count=n())
1540234146932:numoutliers
1540234146944:fullcount
1540234150650:#Create the histogram
1540234150657:#Adjusting theme so that all plot titles after this will be centred and in bold
1540234150670:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540234150682:gg <- ggplot(survey, aes(x=survey$anxiety))
1540234150709:#Change the label of the x axis
1540234150713:gg <- gg + labs(x="Total Self Esteem")
1540234150736:#manage binwidth and colours
1540234150741:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540234150772:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540234150802:#adding a normal curve
1540234150807:#use stat_function to compute a normalised score for each value of tpcois
1540234150811:#pass the mean and standard deviation
1540234150817:#use the na.rm parameter to say how missing values are handled
1540234150822:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$anxiety, na.rm=TRUE), sd=sd(survey$anxiety, na.rm=TRUE)))
1540234150857:gg<-gg+ggtitle('Figure 1: Distribution Total Perceieved Feeling of Control')
1540234150905:#to display the graph request the contents of the variable be shown
1540234150909:gg
1540234155591:#Create a qqplot
1540234155600:qqnorm(survey$anxiety, main="Figure 2: QQPlot or Total Self Esteem")
1540234155653:qqline(survey$anxiety, col=2) #show a line on theplot
1540234158747:num_na <- sum(is.na(survey$ess))
1540234158756:num_na
1540234158924:len_tot <- length(survey$ess)
1540234158933:len_tot
1540234158943:100*num_na/len_tot
1540234161975:pastecs::stat.desc(survey$ess, basic=F)
1540234164977:#skewness and kurtosis from semTools with standard error
1540234164985:tpskew<-semTools::skew(survey$ess)
1540234165225:tpkurt<-semTools::kurtosis(survey$ess)
1540234165234:#We divide the skew statistic by the standard error to get the standardised score
1540234165238:stdskew<-tpskew[1]/tpskew[2]
1540234165244:stdkurt<-tpkurt[1]/tpkurt[2]
1540234165250:stdskew
1540234165260:stdkurt
1540234169837:outliers <- survey %>% filter(scale(ess) >3.29 | scale(ess) < -3.29)
1540234169870:#count them using dplyr summarize
1540234169876:numoutliers<-outliers %>% summarize(count=n())
1540234169887:fullcount<-survey %>% summarize(count=n())
1540234170048:numoutliers
1540234170065:fullcount
1540234173294:#Create the histogram
1540234173301:#Adjusting theme so that all plot titles after this will be centred and in bold
1540234173308:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540234173321:gg <- ggplot(survey, aes(x=survey$ess))
1540234173364:#Change the label of the x axis
1540234173370:gg <- gg + labs(x="Total Self Esteem")
1540234173551:#manage binwidth and colours
1540234173557:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540234173601:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540234173936:#adding a normal curve
1540234173940:#use stat_function to compute a normalised score for each value of tpcois
1540234173945:#pass the mean and standard deviation
1540234173952:#use the na.rm parameter to say how missing values are handled
1540234173957:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$ess, na.rm=TRUE), sd=sd(survey$ess, na.rm=TRUE)))
1540234173995:gg<-gg+ggtitle('Figure 1: Distribution Total Perceieved Feeling of Control')
1540234174026:#to display the graph request the contents of the variable be shown
1540234174030:gg
1540234178485:#Create a qqplot
1540234178491:qqnorm(survey$ess, main="Figure 2: QQPlot or Total Self Esteem")
1540234178694:qqline(survey$ess, col=2) #show a line on theplot
1540234182511:num_na <- sum(is.na(survey$depress))
1540234182697:num_na
1540234182707:len_tot <- length(survey$depress)
1540234182713:len_tot
1540234182723:100*num_na/len_tot
1540234187404:pastecs::stat.desc(survey$depress, basic=F)
1540234190099:#skewness and kurtosis from semTools with standard error
1540234190103:tpskew<-semTools::skew(survey$depress)
1540234190114:tpkurt<-semTools::kurtosis(survey$depress)
1540234190124:#We divide the skew statistic by the standard error to get the standardised score
1540234190130:stdskew<-tpskew[1]/tpskew[2]
1540234190137:stdkurt<-tpkurt[1]/tpkurt[2]
1540234190144:stdskew
1540234190153:stdkurt
1540234194656:#Create the histogram
1540234194662:#Adjusting theme so that all plot titles after this will be centred and in bold
1540234194670:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540234194686:gg <- ggplot(survey, aes(x=survey$depress))
1540234194870:#Change the label of the x axis
1540234194874:gg <- gg + labs(x="Total Self Esteem")
1540234194895:#manage binwidth and colours
1540234194900:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540234194929:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540234194957:#adding a normal curve
1540234194961:#use stat_function to compute a normalised score for each value of tpcois
1540234194966:#pass the mean and standard deviation
1540234194973:#use the na.rm parameter to say how missing values are handled
1540234194977:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$depress, na.rm=TRUE), sd=sd(survey$depress, na.rm=TRUE)))
1540234195014:gg<-gg+ggtitle('Figure 1: Distribution Total Perceieved Feeling of Control')
1540234195047:#to display the graph request the contents of the variable be shown
1540234195051:gg
1540234204321:#Create a qqplot
1540234204328:qqnorm(survey$depress, main="Figure 2: QQPlot or Total Self Esteem")
1540234204530:qqline(survey$depress, col=2) #show a line on theplot
1540234208099:num_na <- sum(is.na(survey$qualslp))
1540234208332:num_na
1540234208342:len_tot <- length(survey$qualslp)
1540234208349:len_tot
1540234208357:100*num_na/len_tot
1540234211859:table(survey$qualslp)
1540234212060:plot(survey$qualslp)
1540234212078:#Get descriptive stastitics by group
1540234212084:#psych::describeBy(survey$qualslp)
1540234297592:psych::describeBy(survey$depress, survey$qualslp)
1540234334041:psych::describeBy(survey$qualslp)
1540234384080:?describeby
1540234395022:?describeBy
1540234431631:psych::describeBy(survey$depress, survey$medhelp)
1540234480945:table(survey$sex)
1540234488763:table(survey$medhelp)
1540234525335:bar <- ggplot(survey, aes(medhelp, depress))
1540234532604:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Gender", y = "Mean Total Self Esteem Score", title="Figure 5: Mean Total Self Esteem by Gender")
1540234680606:bar <- ggplot(survey, aes(qualslp, depress))
1540234680742:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Gender", y = "Mean Total Self Esteem Score", title="Figure 5: Mean Total Self Esteem by Gender")
1540234959547:describeBy(survey$anxiety, group=survey$medhelp)
1540235035730:#Pearson Correlation
1540235035737:stats::cor.test(survey$anxiety, survey$ess,  method='pearson')
1540235377330:plot(survey$anxiety, survey$ess)
1540235543122:plot(survey$anxiety, survey$depress)
1540235671683:#Pearson Correlation
1540235671692:stats::cor.test(survey$anxiety, survey$depress,  method='pearson')
1540235826480:#Conduct Levene's test for homogeneity of variance in library car
1540235826484:ltest<-car::leveneTest(anxiety ~ qualsleep, data=survey)
1540235845166:#Conduct Levene's test for homogeneity of variance in library car
1540235845169:ltest<-car::leveneTest(anxiety ~ qualslp, data=survey)
1540235850236:#Pr(F) is your probability
1540235850240:ltest
1540238080847:#Create the histogram
1540238080847:#Adjusting theme so that all plot titles after this will be centred and in bold
1540238080847:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540238080847:gg <- ggplot(survey, aes(x=survey$anxiety))
1540238080980:#Change the label of the x axis
1540238080983:gg <- gg + labs(x="HADS Anxiety Level")
1540238080995:#manage binwidth and colours
1540238080997:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540238081014:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540238081030:#adding a normal curve
1540238081032:#use stat_function to compute a normalised score for each value of tpcois
1540238081034:#pass the mean and standard deviation
1540238081039:#use the na.rm parameter to say how missing values are handled
1540238081042:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$anxiety, na.rm=TRUE), sd=sd(survey$anxiety, na.rm=TRUE)))
1540238081060:gg<-gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1540238081077:#to display the graph request the contents of the variable be shown
1540238081079:gg
1540314505605:library(foreign)
1540314505618:#library(dplyr)
1540314505626:library(ggplot2)
1540314505635:#library(psych)
1540314505643:#library(pastecs)
1540314505651:#library(semTools)
1540314505659:#library(car)
1540314505666:library(pander)
1540314509303:#Reading in the dataset
1540314509309:sleepsurveyfull <- as.data.frame(read.spss("sleep5ED.sav"))
1540314520657:library('plyr')
1540314520666:library('dplyr')
1540314520676:sleepsurvey<-select(sleepsurvey, id, anxiety, ess, depress, qualslp, medhelp)
1540314535532:library('plyr')
1540314535543:library('dplyr')
1540314535555:sleepsurvey<-select(sleepsurveyfull, id, anxiety, ess, depress, qualslp, medhelp)
1540314536200:head(survey)
1540314541765:library('plyr')
1540314541774:library('dplyr')
1540314541782:sleepsurvey<-select(sleepsurveyfull, id, anxiety, ess, depress, qualslp, medhelp)
1540314542294:head(sleepsurvey)
1540315455247:getmode <- function(v)
1540315455253:{
1540315455260:uniqv <- unique(v)
1540315455267:uniqv[which.max(tabulate(match(v,uniqv)))]
1540315455273:}
1540315455283:getmode(sleepsurvey$qualslp)
1540315513098:range(sleepsurvey$qualslp)
1540315984348:table(sleepsurvey$medhelp)
1540315984600:psych::describeBy(sleepsurvey$depress, sleepsurvey$medhelp)
1540315984636:psych::describeBy(sleepsurvey$qualslp)
1540315999781:table(sleepsurvey$medhelp)
1540315999808:psych::describeBy(sleepsurvey$depress, sleepsurvey$medhelp)
1540316166356:num_na <- sum(is.na(sleepsurvey$anxiety))
1540316166366:num_na
1540316166380:len_tot <- length(sleepsurvey$anxiety)
1540316166391:len_tot
1540316166405:100*num_na/len_tot
1540316180517:outliers <- sleepsurvey %>% filter(scale(anxiety) >3.29 | scale(anxiety) < -3.29)
1540316180553:#count them using dplyr summarize
1540316180564:numoutliers<-outliers %>% summarize(count=n())
1540316180581:fullcount<-sleepsurvey %>% summarize(count=n())
1540316180596:numoutliers
1540316180810:fullcount
1540316269176:plot(sleepsurvey$anxiety, sleepsurvey$ess)
1540316575556:num_na <- sum(is.na(sleepsurvey$anxiety))
1540316575566:num_na
1540316575580:len_tot <- length(sleepsurvey$anxiety)
1540316575591:len_tot
1540316575605:100*num_na/len_tot
1540316578178:#skewness and kurtosis from semTools with standard error
1540316578187:tpskew<-semTools::skew(sleepsurvey$anxiety)
1540316578419:tpkurt<-semTools::kurtosis(sleepsurvey$anxiety)
1540316578426:#We divide the skew statistic by the standard error to get the standardised score
1540316578429:stdskew<-tpskew[1]/tpskew[2]
1540316578434:stdkurt<-tpkurt[1]/tpkurt[2]
1540316578439:stdskew
1540316578446:stdkurt
1540316589784:outliers <- sleepsurvey %>% filter(scale(anxiety) >3.29 | scale(anxiety) < -3.29)
1540316589807:#count them using dplyr summarize
1540316589815:numoutliers<-outliers %>% summarize(count=n())
1540316589829:fullcount<-sleepsurvey %>% summarize(count=n())
1540316590044:numoutliers
1540316590050:fullcount
1540316611555:outliers <- sleepsurvey %>% filter(scale(anxiety) > 1.96 | scale(anxiety) < -1.96)
1540316611796:#count them using dplyr summarize
1540316611798:numoutliers<-outliers %>% summarize(count=n())
1540316611804:fullcount<-sleepsurvey %>% summarize(count=n())
1540316611809:numoutliers
1540316611816:fullcount
1540316650304:100*numoutliers/fullcount
1540317258936:num_na <- sum(is.na(sleepsurvey$anxiety))
1540317258948:num_na
1540317259196:len_tot <- length(sleepsurvey$anxiety)
1540317259200:len_tot
1540317259205:100*num_na/len_tot
1540317349105:num_na <- sum(is.na(sleepsurvey$anxiety))
1540317349211:len_tot <- length(sleepsurvey$anxiety)
1540317349215:100*num_na/len_tot
1540317447181:range(sleepsurvey$anxiety)
1540317466478:?range
1540317481585:range(sleepsurvey$anxiety, na.rm = TRUE)
1540318483002:#Create the histogram
1540318483005:#Adjusting theme so that all plot titles after this will be centred and in bold
1540318483008:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540318483015:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540318483033:#Change the label of the x axis
1540318483036:gg <- gg + labs(x="HADS Anxiety Level")
1540318483053:#manage binwidth and colours
1540318483057:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540318483081:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540318483539:#adding a normal curve
1540318483542:#use stat_function to compute a normalised score for each value of tpcois
1540318483546:#pass the mean and standard deviation
1540318483552:#use the na.rm parameter to say how missing values are handled
1540318483555:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$anxiety, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540318483580:gg<-gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1540318483604:#to display the graph request the contents of the variable be shown
1540318483606:gg
1540318535949:#Create the histogram
1540318535958:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540318535972:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540318536011:gg <- gg + labs(x="HADS Anxiety Level")
1540318536049:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540318536100:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540318536140:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$anxiety, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540318536166:gg<-gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1540318536189:gg
1540318568581:#Create a qqplot
1540318568592:qqnorm(sleepsurvey$anxiety, main="Figure 2: QQPlot of HADS Anxiety Score")
1540318568788:qqline(sleepsurvey$anxiety, col=2)
1540318582040:#Create the histogram
1540318582047:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540318582059:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540318582100:gg <- gg + labs(x="HADS Anxiety Level")
1540318582282:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540318582305:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540318582326:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$anxiety, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540318582350:gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1540318781190:num_na <- sum(is.na(sleepsurvey$ess))
1540318781194:num_na
1540318781201:len_tot <- length(sleepsurvey$ess)
1540318781206:len_tot
1540318781212:100*num_na/len_tot
1540318805978:range(sleepsurvey$ess)
1540318817984:range(sleepsurvey$ess, rm.na = TRUE)
1540318831158:range(sleepsurvey$ess, na.rm = TRUE)
1540318856573:#skewness and kurtosis from semTools with standard error
1540318856578:tpskew<-semTools::skew(sleepsurvey$ess)
1540318856588:tpkurt<-semTools::kurtosis(sleepsurvey$ess)
1540318856598:#We divide the skew statistic by the standard error to get the standardised score
1540318856602:stdskew<-tpskew[1]/tpskew[2]
1540318856610:stdkurt<-tpkurt[1]/tpkurt[2]
1540318856619:stdskew
1540318856789:stdkurt
1540318870137:outliers <- sleepsurvey %>% filter(scale(ess) >3.29 | scale(ess) < -3.29)
1540318870344:#count them using dplyr summarize
1540318870347:numoutliers<-outliers %>% summarize(count=n())
1540318870353:fullcount<-sleepsurvey %>% summarize(count=n())
1540318870359:numoutliers
1540318870369:fullcount
1540318944929:#Create the histogram
1540318944938:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540318944956:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$ess))
1540318945602:gg <- gg + labs(x="Epworth Sleepiness Scale")
1540318945618:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540318945651:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540318945672:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$ess, na.rm=TRUE), sd=sd(sleepsurvey$ess, na.rm=TRUE)))
1540318945695:gg+ggtitle('Figure 1: Distribution Epworth Sleepiness')
1540319015684:#Create a qqplot
1540319015693:qqnorm(sleepsurvey$ess, main="Figure 4: QQPlot or Total Self Esteem")
1540319015919:qqline(sleepsurvey$ess, col=2)
1540319401433:library(foreign)
1540319401443:#library(dplyr)
1540319401450:library(ggplot2)
1540319401511:#library(psych)
1540319401518:#library(pastecs)
1540319401525:#library(semTools)
1540319401532:#library(car)
1540319401539:library(pander)
1540319406089:#Reading in the dataset
1540319406096:sleepsurveyfull <- as.data.frame(read.spss("sleep5ED.sav"))
1540319410652:library('plyr')
1540319410662:library('dplyr')
1540319410671:sleepsurvey<-select(sleepsurveyfull, id, anxiety, ess, depress, qualslp, medhelp)
1540319410701:head(sleepsurvey)
1540319414869:panderOptions('table.split.table', Inf)
1540319414876:my.data <- "
1540319414887:Concept                       | Variable Name     | Statistical Type  | Possible Values
1540319414894:Anxiety Level                 | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1540319414902:Sleepiness Level              | ess               | Scale             | Range from 0=low to
1540319414909:24=high daytime sleepiness
1540319415693:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe
1540319415698:depression
1540319415703:Quality of Sleep              | qualslp           | Nominal           | 1=very poor 2=poor 3=fair 4=good
1540319415707:5=very good 6=excellent
1540319415715:Medication used for Sleeping  | medhelp           | Nominal           | 1=yes 2=no "
1540319415724:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1540319415733:names(df) <- unname(as.list(df[1,])) # put headers on
1540319415740:df <- df[-1,] # remove first row
1540319415747:row.names(df)<-NULL
1540319415754:pander(df, style = 'rmarkdown')
1540319419860:num_na <- sum(is.na(sleepsurvey$anxiety))
1540319420104:len_tot <- length(sleepsurvey$anxiety)
1540319420108:100*num_na/len_tot
1540319425457:pastecs::stat.desc(sleepsurvey$anxiety, basic=F)
1540319425682:range(sleepsurvey$anxiety, na.rm = TRUE)
1540319429298:#skewness and kurtosis from semTools with standard error
1540319429305:tpskew_anx<-semTools::skew(sleepsurvey$anxiety)
1540319429604:tpkurt_anx<-semTools::kurtosis(sleepsurvey$anxiety)
1540319429610:#We divide the skew statistic by the standard error to get the standardised score
1540319429614:stdskew_anx<-tpskew_anx[1]/tpskew_anx[2]
1540319429620:stdkurt_anx<-tpkurt_anx[1]/tpkurt_anx[2]
1540319429625:stdskew_anx
1540319429633:stdkurt_anx
1540319471440:#skewness and kurtosis from semTools with standard error
1540319471447:tpskew_anx<-semTools::skew(sleepsurvey$anxiety)
1540319471462:tpkurt_anx<-semTools::kurtosis(sleepsurvey$anxiety)
1540319471477:#We divide the skew statistic by the standard error to get the standardised score
1540319471485:stdskew_anx<-tpskew_anx[1]/tpskew_anx[2]
1540319471498:stdkurt_anx<-tpkurt_anx[1]/tpkurt_anx[2]
1540319471510:stdskew_anx
1540319471728:stdkurt_anx
1540319474116:outliers_anx <- sleepsurvey %>% filter(scale(anxiety) > 1.96 | scale(anxiety) < -1.96)
1540319474142:#count them using dplyr summarize
1540319474153:numoutliers_anx<-outliers_anx %>% summarize(count=n())
1540319474170:fullcount<-sleepsurvey %>% summarize(count=n())
1540319474188:numoutliers_anx
1540319474217:fullcount
1540319474436:100*numoutliers_anx/fullcount
1540319492626:#Create the histogram
1540319492632:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540319492648:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540319492691:gg <- gg + labs(x="HADS Anxiety Level")
1540319492731:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540319492787:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540319492823:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$anxiety, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540319492846:gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1540319497255:#Create a qqplot
1540319497259:qqnorm(sleepsurvey$anxiety, main="Figure 2: QQPlot of HADS Anxiety Score")
1540319497283:qqline(sleepsurvey$anxiety, col=2)
1540319511808:pastecs::stat.desc(sleepsurvey$ess, basic=F)
1540319512059:range(sleepsurvey$ess, na.rm = TRUE)
1540319539985:#skewness and kurtosis from semTools with standard error
1540319539993:tpskew_ess<-semTools::skew(sleepsurvey$ess)
1540319540230:tpkurt_ess<-semTools::kurtosis(sleepsurvey$ess)
1540319540236:#We divide the skew statistic by the standard error to get the standardised score
1540319540239:stdskew_ess<-tpskew_ess[1]/tpskew_ess[2]
1540319540243:stdkurt_ess<-tpkurt_ess[1]/tpkurt_ess[2]
1540319540248:stdskew_ess
1540319540255:stdkurt_ess
1540319572723:outliers_ess <- sleepsurvey %>% filter(scale(ess) >3.29 | scale(ess) < -3.29)
1540319572752:#count them using dplyr summarize
1540319572760:numoutliers_ess<-outliers_ess %>% summarize(count=n())
1540319572776:numoutliers_ess
1540319615701:#Create the histogram
1540319615704:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540319615713:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$ess))
1540319615903:gg <- gg + labs(x="Epworth Sleepiness Scale")
1540319615920:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540319615945:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540319615968:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$ess, na.rm=TRUE), sd=sd(sleepsurvey$ess, na.rm=TRUE)))
1540319616004:gg+ggtitle('Figure 3: Distribution Epworth Sleepiness')
1540319653185:qqnorm(sleepsurvey$ess, main="Figure 4: QQPlot of Epworth Sleepiness Scale")
1540319653228:qqline(sleepsurvey$ess, col=2)
1540319694953:pastecs::stat.desc(survey$depress, basic=F)
1540319702681:pastecs::stat.desc(sleepsurvey$depress, basic=F)
1540319702885:range(sleepsurvey$depress, na.rm = TRUE)
1540319741324:#skewness and kurtosis from semTools with standard error
1540319741331:tpskew_depress<-semTools::skew(sleepsurvey$depress)
1540319741347:tpkurt_depress<-semTools::kurtosis(sleepsurvey$depress)
1540319741588:#We divide the skew statistic by the standard error to get the standardised score
1540319741591:stdskew_depress<-tpskew_depress[1]/tpskew_depress[2]
1540319741595:stdkurt_depress<-tpkurt_depress[1]/tpkurt_depress[2]
1540319741599:stdskew_depress
1540319741606:stdkurt_depress
1540319860336:outliers_ess <- sleepsurvey %>% filter(scale(ess) >3.29 | scale(ess) < -3.29)
1540319860357:#count them using dplyr summarize
1540319860365:numoutliers_ess<-outliers_ess %>% summarize(count=n())
1540319860378:numoutliers_ess
1540319860393:100*numoutliers_ess/fullcount
1540319887324:outliers_depress <- sleepsurvey %<% filter(scale(depress) >3.29 | scale(depress) < -3.29)
1540319897657:outliers_depress <- sleepsurvey %>% filter(scale(depress) >3.29 | scale(depress) < -3.29)
1540319897680:#count them using dplyr summarize
1540319897690:numoutliers_depress<-outliers_depress %>% summarize(count=n())
1540319897705:numoutliers_depress
1540319897724:100*numoutliers_depress/fullcount
1540320045457:#Create the histogram
1540320045464:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540320045478:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$depress))
1540320045739:gg <- gg + labs(x="HADS Depression Scale")
1540320045755:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540320045776:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540320045796:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$depress, na.rm=TRUE), sd=sd(sleepsurvey$depress, na.rm=TRUE)))
1540320045821:gg+ggtitle('Figure 3: Distribution HADS Depression Scale')
1540320102154:qqnorm(sleepsurvey$depress, main="Figure 6: QQPlot of HADS Depression Scale")
1540320102402:qqline(sleepsurvey, col=2)
1540320112179:qqnorm(sleepsurvey$depress, main="Figure 6: QQPlot of HADS Depression Scale")
1540320112230:qqline(sleepsurvey$depress, col=2)
1540320231432:outliers_depress <- sleepsurvey %>% filter(scale(depress) >3.29 | scale(depress) < -3.29)
1540320231455:#count them using dplyr summarize
1540320231464:numoutliers_depress<-outliers_depress %>% summarize(count=n())
1540320231480:numoutliers_depress
1540320231499:100*numoutliers_depress/fullcount
1540320284080:num_na <- sum(is.na(sleepsurvey$qualslp))
1540320284090:num_na
1540320284544:len_tot <- length(sleepsurvey$qualslp)
1540320284548:len_tot
1540320284554:100*num_na/len_tot
1540320291855:table(sleepsurvey$qualslp)
1540320291886:plot(sleepsurvey$qualslp)
1540320291908:#Get descriptive stastitics by group
1540320291914:#psych::describeBy(survey$qualslp)
1540320358988:?describeBy
1540320597156:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540320676087:?plot
1540320767720:bar <- ggplot(sleepsurvey, aes(qualslp, anxiety))
1540320767777:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure 8: Anxiety Level by Quality of Sleep")
1540320834686:num_na <- sum(is.na(survey$medhelp))
1540320846291:num_na <- sum(is.na(sleepsurvey$medhelp))
1540320846532:num_na
1540320846537:len_tot <- length(sleepsurvey$medhelp)
1540320846541:len_tot
1540320846550:100*num_na/len_tot
1540320981458:table(sleepsurvey$medhelp)
1540320981482:plot(sleepsurvey$medhelp)
1540320986610:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$medhelp)
1540321011712:psych::describeBy(sleepsurvey$qualslp, sleepsurvey$medhelp)
1540321134818:bar <- ggplot(sleepsurvey, aes(medhelp, anxiety))
1540321134865:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Sleep Aided by Medication", y = "HADS level of Anxiety", title="Figure 10: HADS Anxiety LEvel by Sleep Aid used")
1540321193750:bar <- ggplot(sleepsurvey, aes(medhelp, qualslp))
1540321193899:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Sleep Aided by Medication", y = "HADS level of Anxiety", title="Figure 10: HADS Anxiety Level by Sleep Aid used")
1540321243659:bar <- ggplot(sleepsurvey, aes(medhelp, qualslp))
1540321243678:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Sleep Aided by Medication", y = "Quality of Sleep", title="Figure 11: Quality of Sleep by Whether Sleep Aid used")
1540321264030:?ggplot
1540321303048:plot(sleepsurvey$anxiety, sleepsurvey$ess)
1540321316550:#Pearson Correlation
1540321316558:stats::cor.test(sleepsurvey$anxiety, sleepsurvey$ess,  method='pearson')
1540321324424:plot(sleepsurvey$anxiety, sleepsurvey$depress)
1540321352787:#Conduct Levene's test for homogeneity of variance in library car
1540321352791:ltest<-car::leveneTest(anxiety ~ qualslp, data=sleepsurvey)
1540321352804:#Pr(F) is your probability
1540321352808:ltest
1540321352830:#Conduct the t-test from package stats
1540321352833:#You can use the var.equal = TRUE option to specify equal variances and a pooled variance estimate
1540321352837:#stats::t.test(tslfest~sex,var.equal=TRUE,data=sleepsurvey)
1540321367726:describeBy(sleepsurvey$anxiety, group=sleepsurvey$medhelp)
1540321379050:leveneTest(anxiety ~ medhelp, data = sleepsurvey)
1540321382689:t.test(anxiety ~ medhelp, var.equal = TRUE, data = sleepsurvey)
1540321387897:2*2.6471/sqrt(266)
1540321764445:#Pearson Correlation
1540321764452:stats::cor.test(sleepsurvey$anxiety, sleepsurvey$depress,  method='pearson')
1540321819951:leveneTest(anxiety ~ medhelp, data = sleepsurvey)
1540408354926:count(sleepsurvey)
1540409254195:len_tot <- count(sleepsurvey) #number of surveys
1540409258016:num_na_anxiety <- sum(is.na(sleepsurvey$anxiety)) #number of null values in anxiety
1540409803063:len_tot <- count(sleepsurvey) #number of surveys
1540410038604:len_tot <- count(sleepsurvey) #number of surveys
1540410038675:len_tot
1540410045842:len_tot <- count(sleepsurvey) #number of surveys
1540410045863:len_tot[1]
1540410055790:num_na_anxiety <- sum(is.na(sleepsurvey$anxiety)) #number of null values in anxiety
1540410055798:num_na_anxiety
1540410066897:len_tot <- count(sleepsurvey) #number of surveys
1540410066906:len_tot[[1]]
1540410134572:num_na_anxiety <- sum(is.na(sleepsurvey$anxiety)) #number of null values in anxiety
1540410134581:round(100*num_na_anxiety/len_tot,2)
1540410141137:num_na_anxiety <- sum(is.na(sleepsurvey$anxiety)) #number of null values in anxiety
1540410141146:round(100*num_na_anxiety/len_tot,2)[[1]]
1540410537303:#skewness and kurtosis from semTools with standard error
1540410537308:tpskew_anx<-semTools::skew(sleepsurvey$anxiety)
1540410537319:tpkurt_anx<-semTools::kurtosis(sleepsurvey$anxiety)
1540410537329:#We divide the skew statistic by the standard error to get the standardised score
1540410537334:stdskew_anx<-tpskew_anx[1]/tpskew_anx[2]
1540410537455:stdkurt_anx<-tpkurt_anx[1]/tpkurt_anx[2]
1540410537461:stdskew_anx
1540410537469:stdkurt_anx
1540410566427:#skewness and kurtosis from semTools with standard error
1540410566435:tpskew_anx<-semTools::skew(sleepsurvey$anxiety)
1540410566454:tpkurt_anx<-semTools::kurtosis(sleepsurvey$anxiety)
1540410566470:#We divide the skew statistic by the standard error to get the standardised score
1540410566479:stdskew_anx<-tpskew_anx[1]/tpskew_anx[2]
1540410566493:stdkurt_anx<-tpkurt_anx[1]/tpkurt_anx[2]
1540410566508:stdskew_anx[[1]]
1540410566525:stdkurt_anx[[1]]
1540410601386:#skewness and kurtosis from semTools with standard error
1540410601394:tpskew_anx<-semTools::skew(sleepsurvey$anxiety)
1540410601408:tpkurt_anx<-semTools::kurtosis(sleepsurvey$anxiety)
1540410601424:#We divide the skew statistic by the standard error to get the standardised score
1540410601432:stdskew_anx<-tpskew_anx[1]/tpskew_anx[2]
1540410601696:stdkurt_anx<-tpkurt_anx[1]/tpkurt_anx[2]
1540410601701:stdskew_anx
1540410601708:stdkurt_anx
1540410610224:pastecs::stat.desc(sleepsurvey$anxiety, basic=F)
1540410610511:range(sleepsurvey$anxiety, na.rm = TRUE)
1540411151386:#skewness and kurtosis from semTools with standard error
1540411151391:tpskew_anx<-semTools::skew(sleepsurvey$anxiety)
1540411151399:tpkurt_anx<-semTools::kurtosis(sleepsurvey$anxiety)
1540411151407:#We divide the skew statistic by the standard error to get the standardised score
1540411151412:stdskew_anx<-tpskew_anx[1]/tpskew_anx[2]
1540411151419:stdkurt_anx<-tpkurt_anx[1]/tpkurt_anx[2]
1540415076186:?set
1540415089753:opts_chunk$set
1540415546742:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1540415546757:fullcount<-sleepsurvey %>% summarize(count=n())
1540415555688:fullcount
1540415561909:len_tot
1540415732987:outliers_anx
1540415757855:outliers_anx <- sleepsurvey %>% filter(scale(anxiety) > 3.29 | scale(anxiety) < -3.29)
1540415763620:outliers_anx
1540415769117:outliers_anx
1540415789147:(scale(anxiety)
1540415799104:(scale(anxiety))
1540415803432:)
1540415817986:(scale(sleepsurvey$anxiety))
1540415830674:plot((scale(sleepsurvey$anxiety)))
1540415870059:hist((scale(sleepsurvey$anxiety)))
1540415956881:scale_anx <- sleep survey %>% scale(anxiety)
1540415964143:scale_anx <- sleepsurvey %>% scale(anxiety)
1540415989385:scale_anx <-  scale(sleepsurvey$anxiety)
1540415995631:scale_anx
1540416006927:plot(scale_anx)
1540416019223:?plot
1540416035989:?ggplot
1540416055595:ggplot(scale_anx)
1540416065990:hist(scale_anx)
1540416101572:range(scale_anx)
1540416113085:range(scale_anx, rm.na = TRUE
1540416118962:)
1540416129743:range(scale_anx, na.rm = TRUE)
1540416194585:abs(scale_anx)
1540416268814:scale_anx <-  scale(sleepsurvey$anxiety)
1540416268866:hist(scale_anx)
1540416300365:?hist
1540416332825:hist(scale_anx, breaks = 100)
1540416369682:hist(scale_anx, breaks = 1000)
1540416434248:hist(scale_anx, breaks = 10)
1540416439305:hist(scale_anx, breaks = 20)
1540416448595:hist(scale_anx, breaks = 30)
1540416456597:hist(scale_anx, breaks = 50)
1540416463039:hist(scale_anx, breaks = 40)
1540416469097:hist(scale_anx, breaks = 30)
1540416591028:range(scale_anx, na.rm = TRUE)
1540416599042:range(scale_anx, na.rm = TRUE)[[1]]
1540416889552:pastecs::stat.desc(sleepsurvey$anxiety, basic=F)
1540416968872:stdkurt_anx
1540416976345:stdkurt_anx[1]
1540416985275:stdkurt_anx[[1]]
1540417187955:tpskew_anx<-semTools::skew(sleepsurvey$anxiety)
1540417187970:tpkurt_anx<-semTools::kurtosis(sleepsurvey$anxiety)
1540417188286:stdskew_anx<-tpskew_anx[1]/tpskew_anx[2]
1540417188292:stdkurt_anx<-tpkurt_anx[1]/tpkurt_anx[2]
1540418250966:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540418250983:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540418251032:gg <- gg + labs(x="HADS Anxiety Level")
1540418251070:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540418251096:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540418251117:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$anxiety, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540418251141:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1540418920939:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540418920958:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540418921002:gg <- gg + labs(x="Epworth Sleepiness Scale")
1540418921022:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540418921047:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540418921069:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$ess, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540418921095:gg+ggtitle('Figure X: Distribution Epworth Sleepiness Scale')
1540418945906:qqnorm(sleepsurvey$anxiety, main="Figure X: QQPlot of HADS Anxiety Score")
1540418945954:qqline(sleepsurvey$anxiety, col=2)
1540419013787:qqnorm(sleepsurvey$ess, main="Figure X: QQPlot of Epworth Sleepiness Scale")
1540419013840:qqline(sleepsurvey$ess, col=2)
1540419346252:scale_ess <-  scale(sleepsurvey$ess)
1540419346271:range_scale_ess <- round(range(scale_ess, na.rm = TRUE), 2)
1540419346284:hist(scale_ess, breaks = 30)
1540419359166:range_scale_ess
1540419371608:scale_ess <-  scale(sleepsurvey$ess)
1540419371618:range_scale_ess <- round(range(scale_ess, na.rm = TRUE), 2)
1540419371626:hist(scale_ess, breaks = 30)
1540419639600:num_na_anxiety <- sum(is.na(sleepsurvey$anxiety)) #number of null values in anxiety
1540419639612:num_anx <- len_tot[[1]] - num_na_anxiety
1540419639625:range_anx <- range(sleepsurvey$anxiety, na.rm = TRUE)
1540419917033:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540419917044:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$depress))
1540419917067:gg <- gg + labs(x="HADS Depression Level")
1540419917084:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540419917109:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540419917131:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$depress, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540419917158:gg+ggtitle('Figure X: Distribution HADS Depression')
1540419933212:qqnorm(sleepsurvey$press, main="Figure X: QQPlot of HADS Depression Score")
1540419943711:qqnorm(sleepsurvey$depress, main="Figure X: QQPlot of HADS Depression Score")
1540419944604:qqline(sleepsurvey$depress, col=2)
1540420508868:scale_depress <-  scale(sleepsurvey$depress)
1540420535819:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1540420535932:library(foreign)
1540420535952:#library(dplyr)
1540420535957:library(ggplot2)
1540420537486:#library(psych)
1540420537489:#library(pastecs)
1540420537492:#library(semTools)
1540420537496:#library(car)
1540420537499:library(pander)
1540420537610:#Reading in the dataset
1540420537614:sleepsurveyfull <- as.data.frame(read.spss("sleep5ED.sav"))
1540420538204:library('plyr')
1540420538216:library('dplyr')
1540420538239:sleepsurvey<-select(sleepsurveyfull, id, anxiety, ess, depress, qualslp, medhelp)
1540420538297:head(sleepsurvey)
1540420538319:panderOptions('table.split.table', Inf)
1540420538323:my.data <- "
1540420538326:Concept                       | Variable Name     | Statistical Type  | Possible Values
1540420538329:Anxiety Level                 | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1540420538331:Sleepiness Level              | ess               | Scale             | Range from 0=low to
1540420538334:24=high daytime sleepiness
1540420538336:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe
1540420538339:depression
1540420538342:Quality of Sleep              | qualslp           | Nominal           | 1=very poor 2=poor 3=fair 4=good
1540420538344:5=very good 6=excellent
1540420538350:Medication used for Sleeping  | medhelp           | Nominal           | 1=yes 2=no "
1540420538355:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1540420538365:names(df) <- unname(as.list(df[1,])) # put headers on
1540420538373:df <- df[-1,] # remove first row
1540420538381:row.names(df)<-NULL
1540420538389:pander(df, style = 'rmarkdown')
1540420538568:len_tot <- count(sleepsurvey) #number of surveys
1540420538588:num_na_anxiety <- sum(is.na(sleepsurvey$anxiety)) #number of null values in anxiety
1540420538593:num_anx <- len_tot[[1]] - num_na_anxiety
1540420538600:range_anx <- range(sleepsurvey$anxiety, na.rm = TRUE)
1540420538612:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540420538621:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540420538643:gg <- gg + labs(x="HADS Anxiety Level")
1540420538661:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540420538693:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540420538717:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$anxiety, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540420538743:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1540420539265:qqnorm(sleepsurvey$anxiety, main="Figure X: QQPlot of HADS Anxiety Score")
1540420539449:qqline(sleepsurvey$anxiety, col=2)
1540420539504:tpskew_anx<-semTools::skew(sleepsurvey$anxiety)
1540420539895:tpkurt_anx<-semTools::kurtosis(sleepsurvey$anxiety)
1540420539908:scale_anx <-  scale(sleepsurvey$anxiety)
1540420540118:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540420540123:hist(scale_anx, breaks = 30)
1540420540161:num_na_ess <- sum(is.na(sleepsurvey$ess)) #number of null values in ess
1540420540166:num_ess <- len_tot[[1]] - num_na_ess
1540420540172:range_ess <- range(sleepsurvey$ess, na.rm = TRUE)
1540420540185:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540420540208:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540420540226:gg <- gg + labs(x="Epworth Sleepiness Scale")
1540420540443:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540420540467:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540420540540:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$ess, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540420540567:gg+ggtitle('Figure X: Distribution Epworth Sleepiness Scale')
1540420541283:qqnorm(sleepsurvey$ess, main="Figure X: QQPlot of Epworth Sleepiness Scale")
1540420541305:qqline(sleepsurvey$ess, col=2)
1540420541333:tpskew_ess<-semTools::skew(sleepsurvey$ess)
1540420541339:tpkurt_ess<-semTools::kurtosis(sleepsurvey$ess)
1540420541352:scale_ess <-  scale(sleepsurvey$ess)
1540420541358:range_scale_ess <- round(range(scale_ess, na.rm = TRUE), 2)
1540420541363:hist(scale_ess, breaks = 30)
1540420541403:num_na_depress <- sum(is.na(sleepsurvey$depress))
1540420541408:num_depress <- len_tot[[1]] - num_na_depress
1540420541412:range_depress <- range(sleepsurvey$depress, na.rm = TRUE)
1540420541425:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540420541431:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$depress))
1540420541449:gg <- gg + labs(x="HADS Depression Level")
1540420541467:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540420541490:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540420541719:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$depress, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540420541744:gg+ggtitle('Figure X: Distribution HADS Depression')
1540420542260:qqnorm(sleepsurvey$depress, main="Figure X: QQPlot of HADS Depression Score")
1540420542279:qqline(sleepsurvey$depress, col=2)
1540420542306:tpskew_depress<-semTools::skew(sleepsurvey$depress)
1540420542312:tpkurt_depress<-semTools::kurtosis(sleepsurvey$depress)
1540420542342:scale_depress <-  scale(sleepsurvey$depress)
1540420542348:range_scale_depress <- round(range(scale_depress, na.rm = TRUE), 2)
1540420542354:hist(scale_depress, breaks = 30)
1540420542390:num_na <- sum(is.na(sleepsurvey$depress))
1540420542395:num_na
1540420542401:len_tot <- length(sleepsurvey$depress)
1540420542406:len_tot
1540420542413:100*num_na/len_tot
1540420542426:pastecs::stat.desc(sleepsurvey$depress, basic=F)
1540420542462:range(sleepsurvey$depress, na.rm = TRUE)
1540420542477:#skewness and kurtosis from semTools with standard error
1540420542480:tpskew_depress<-semTools::skew(sleepsurvey$depress)
1540420542486:tpkurt_depress<-semTools::kurtosis(sleepsurvey$depress)
1540420542492:#We divide the skew statistic by the standard error to get the standardised score
1540420542495:stdskew_depress<-tpskew_depress[1]/tpskew_depress[2]
1540420542501:stdkurt_depress<-tpkurt_depress[1]/tpkurt_depress[2]
1540420542506:stdskew_depress
1540420542514:stdkurt_depress
1540420542529:outliers_depress <- sleepsurvey %>% filter(scale(depress) >3.29 | scale(depress) < -3.29)
1540420542671:#count them using dplyr summarize
1540420542676:numoutliers_depress<-outliers_depress %>% summarize(count=n())
1540420542682:numoutliers_depress
1540420542763:100*numoutliers_depress/len_tot
1540420542780:#Create the histogram
1540420542783:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540420542790:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$depress))
1540420542812:gg <- gg + labs(x="HADS Depression Scale")
1540420542830:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540420543057:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540420543083:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$depress, na.rm=TRUE), sd=sd(sleepsurvey$depress, na.rm=TRUE)))
1540420543109:gg+ggtitle('Figure 5: Distribution HADS Depression Scale')
1540420544077:qqnorm(sleepsurvey$depress, main="Figure 6: QQPlot of HADS Depression Scale")
1540420544097:qqline(sleepsurvey$depress, col=2)
1540420544125:num_na <- sum(is.na(sleepsurvey$qualslp))
1540420544130:num_na
1540420544135:len_tot <- length(sleepsurvey$qualslp)
1540420544140:len_tot
1540420544146:100*num_na/len_tot
1540420544160:table(sleepsurvey$qualslp)
1540420544180:plot(sleepsurvey$qualslp)
1540420544193:getmode <- function(v)
1540420544196:{
1540420544199:uniqv <- unique(v)
1540420544203:uniqv[which.max(tabulate(match(v,uniqv)))]
1540420544206:}
1540420544211:getmode(sleepsurvey$qualslp)
1540420544447:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540420544920:bar <- ggplot(sleepsurvey, aes(qualslp, anxiety))
1540420544940:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure 8: Anxiety Level by Quality of Sleep")
1540420547141:num_na <- sum(is.na(sleepsurvey$medhelp))
1540420547146:num_na
1540420547153:len_tot <- length(sleepsurvey$medhelp)
1540420547158:len_tot
1540420547164:100*num_na/len_tot
1540420547178:table(sleepsurvey$medhelp)
1540420547189:plot(sleepsurvey$medhelp)
1540420547274:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$medhelp)
1540420547317:#psych::describeBy(sleepsurvey$qualslp, sleepsurvey$medhelp)
1540420547327:bar <- ggplot(sleepsurvey, aes(medhelp, anxiety))
1540420547347:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Sleep Aided by Medication", y = "HADS level of Anxiety", title="Figure 10: HADS Anxiety Level by Sleep Aid used")
1540420547825:bar <- ggplot(sleepsurvey, aes(medhelp, qualslp))
1540420547851:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Sleep Aided by Medication", y = "Quality of Sleep", title="Figure 11: Quality of Sleep by Whether Sleep Aid used")
1540420548565:plot(sleepsurvey$anxiety, sleepsurvey$ess)
1540420548750:#Pearson Correlation
1540420548757:stats::cor.test(sleepsurvey$anxiety, sleepsurvey$ess,  method='pearson')
1540420548962:plot(sleepsurvey$anxiety, sleepsurvey$depress)
1540420549003:#Pearson Correlation
1540420549141:stats::cor.test(sleepsurvey$anxiety, sleepsurvey$depress,  method='pearson')
1540420549183:#Conduct Levene's test for homogeneity of variance in library car
1540420549187:ltest<-car::leveneTest(anxiety ~ qualslp, data=sleepsurvey)
1540420549380:#Pr(F) is your probability
1540420549383:ltest
1540420549404:#Conduct the t-test from package stats
1540420549407:#You can use the var.equal = TRUE option to specify equal variances and a pooled variance estimate
1540420549411:#stats::t.test(tslfest~sex,var.equal=TRUE,data=sleepsurvey)
1540420549421:#leveneTest(anxiety ~ medhelp, data = sleepsurvey)
1540420549432:t.test(anxiety ~ medhelp, var.equal = TRUE, data = sleepsurvey)
1540420549479:2*2.6471/sqrt(266)
1540420564085:hist(scale_depress, breaks = 10)
1540421326359:num_na_qual <- sum(is.na(sleepsurvey$qualslp))
1540421327690:num_na_qual
1540421329742:num_qual <- len_tot[[1]] - num_na_qual
1540421331754:num_qual
1540421405954:table(sleepsurvey$qualslp)
1540421405999:plot(sleepsurvey$qualslp)
1540421406029:getmode <- function(v)
1540421406036:{
1540421406043:uniqv <- unique(v)
1540421406051:uniqv[which.max(tabulate(match(v,uniqv)))]
1540421406059:}
1540421406070:getmode(sleepsurvey$qualslp)
1540421523834:table(sleepsurvey$qualslp)
1540421523882:prop.table(sleepsurvey$qualslp)
1540421606907:table(sleepsurvey$qualslp)
1540421606958:str(salary$gender)
1540421614068:str(sleepsurvey$gender)
1540421623882:str(sleepsurvey$qualslp)
1540421645378:summary(sleepsurvey$qualslp)
1540421771983:table(sleepsurvey$qualslp)
1540421777731:prop.table(sleepsurvey$qualslp)
1540421796912:?prop.table
1540421826640:m <- matrix(1:4, 2)
1540421837382:m
1540421844220:prop.table(m, 1)
1540421851022:m <- matrix(1:4)
1540421853297:m
1540421856508:prop.table(m, 1)
1540421872282:prop.table(sleepsurvey$qualslp, 1)
1540421888854:sleepsurvey$qualslp
1540422010484:newfactor <- factor(sleepsurvey$qualslp, exclude=NULL)
1540422021410:prop.table(newfactor)
1540422028257:prop.table(newfactor, 1)
1540422171736:summary(sleepsurvey$qualslp)
1540422180025:100*summary(sleepsurvey$qualslp)
1540422220445:100*summary(sleepsurvey$qualslp)/len_tot
1540422238045:round(100*summary(sleepsurvey$qualslp)/len_tot))
1540422243294:round(100*summary(sleepsurvey$qualslp)/len_tot), 2)
1540422253627:round(100*summary(sleepsurvey$qualslp)/len_tot, 2)
1540422301866:round(100*summary(sleepsurvey$qualslp)/len_tot, 2)
1540422307349:round(100*summary(sleepsurvey$qualslp)/len_tot, 2)[1]
1540422315817:round(100*summary(sleepsurvey$qualslp)/len_tot, 2)[[1]]
1540422357658:round(100*summary(sleepsurvey$qualslp)/len_tot, 2)
1540422459216:table_qual <- summary(sleepsurvey$qualslp)
1540422459221:table_qual
1540422459239:perc_table_qual <- round(100*table_qual/len_tot, 2)
1540422459244:perc_table_qual
1540422459262:num_na_qual <- sum(is.na(sleepsurvey$qualslp))
1540422459269:num_qual <- len_tot[[1]] - num_na_qual
1540422480115:typeof(table_qual)
1540422493469:table_qual <- summary(sleepsurvey$qualslp)
1540422493482:table_qual
1540422493696:perc_table_qual <- round(100*table_qual/len_tot, 2)
1540422493703:perc_table_qual
1540422493722:num_na_qual <- sum(is.na(sleepsurvey$qualslp))
1540422493729:num_qual <- len_tot[[1]] - num_na_qual
1540422538332:rbind(table_qual, perc_table_qual)
1540422621620:num_qual_sleep <- summary(sleepsurvey$qualslp)
1540422621626:perc_qual_sleep <- round(100*num_qual_sleep/len_tot, 2)
1540422621632:table_qual <- rbind(num_qual_sleep, perc_table_qual)
1540422621640:table_qual
1540422642082:num_qual_sleep <- summary(sleepsurvey$qualslp)
1540422642097:table_qual <- rbind(num_qual_sleep, round(100*num_qual_sleep/len_tot, 2))
1540422642112:table_qual
1540422655458:num_qual_sleep <- summary(sleepsurvey$qualslp)
1540422655464:perc_qual_sleep <- round(100*num_qual_sleep/len_tot, 2)
1540422655470:table_qual <- rbind(num_qual_sleep, perc_table_qual)
1540422655476:table_qual
1540422666150:table_qual[[1]]
1540422679243:table_qual
1540422684404:table_qual[1,2]
1540422691399:table_qual
1540422735730:table_qual[1, 7]
1540422741204:table_qual
1540423181436:plot(sleepsurvey$qualslp)
1540423245877:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540423355585:bar <- ggplot(sleepsurvey, aes(qualslp, anxiety))
1540423355638:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Quality of Sleep")
1540423503602:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540423503609:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$qualslp))
1540423503745:gg <- gg + labs(x="Quality of Sleep")
1540423503774:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540423503804:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540423503893:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$qualslp, na.rm=TRUE), sd=sd(sleepsurvey$qualslp, na.rm=TRUE)))
1540423504024:gg+ggtitle('Figure X: Distribution Quality of Sleep')
1540423523324:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540423523341:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$qualslp))
1540423524108:gg <- gg + labs(x="Quality of Sleep")
1540423524124:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540423524147:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540423524168:#gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$qualslp, na.rm=TRUE), sd=sd(sleepsurvey$qualslp, na.rm=TRUE)))
1540423524172:gg+ggtitle('Figure X: Distribution Quality of Sleep')
1540423547277:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540423547290:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$qualslp))
1540423547502:#gg <- gg + labs(x="Quality of Sleep")
1540423547505:#gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540423547508:#gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540423547511:#gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$qualslp, na.rm=TRUE), sd=sd(sleepsurvey$qualslp, na.rm=TRUE)))
1540423547513:gg+ggtitle('Figure X: Distribution Quality of Sleep')
1540423611233:num_qual_sleep <- summary(sleepsurvey$qualslp)
1540423611247:perc_qual_sleep <- round(100*num_qual_sleep/len_tot, 2)
1540423611477:table_qual <- rbind(num_qual_sleep, perc_table_qual)
1540423611484:table_qual
1540423611518:plot(sleepsurvey$qualslp)
1540424012321:num_med <- summary(sleepsurvey$medhelp)
1540424012471:perc_med <- round(100*num_med/len_tot, 2)
1540424012476:table_med <- rbind(num_med, perc_med)
1540424012481:table_med
1540424012493:plot(sleepsurvey$medhelp)
1540424389787:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$medhelp)
1540424473842:psych::describeBy(sleepsurvey$qualslp, sleepsurvey$medhelp)
1540424571131:bar <- ggplot(sleepsurvey, aes(medhelp, anxiety))
1540424571156:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Sleep Aided by Medication", y = "HADS level of Anxiety", title="Figure 10: HADS Anxiety Level by Sleep Aid used")
1540424575917:bar <- ggplot(sleepsurvey, aes(medhelp, qualslp))
1540424576069:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Sleep Aided by Medication", y = "Quality of Sleep", title="Figure 11: Quality of Sleep by Whether Sleep Aid used")
1540424594848:bar <- ggplot(sleepsurvey, aes(medhelp, qualslp))
1540424597137:bar
1540424635210:ggplot(sleepsurvey, aes(medhelp, qualslp)) +
1540424635213:geom_bar(stat="identity", position = "dodge") +
1540424635215:scale_fill_brewer(palette = "Set1")
1540424722047:barchart(medhelp ~ qualslp,data=sleepsurvey,groups=Catergory,
1540424722054:scales=list(x=list(rot=90,cex=0.8)))
1540424735803:library(lattice)
1540424738728:barchart(medhelp ~ qualslp,data=sleepsurvey,groups=Catergory,
1540424738730:scales=list(x=list(rot=90,cex=0.8)))
1540424750054:barchart(medhelp ~ qualslp,data=sleepsurvey,
1540424750056:scales=list(x=list(rot=90,cex=0.8)))
1540811584381:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1540811584547:library(foreign)
1540811584633:#library(dplyr)
1540811584637:library(ggplot2)
1540811585311:#library(psych)
1540811585314:#library(pastecs)
1540811585317:#library(semTools)
1540811585320:#library(car)
1540811585374:library(pander)
1540811585431:#Reading in the dataset
1540811585484:sleepsurveyfull <- as.data.frame(read.spss("sleep5ED.sav"))
1540811585527:library('plyr')
1540811585588:library('dplyr')
1540811585807:sleepsurvey<-select(sleepsurveyfull, id, anxiety, ess, depress, qualslp, medhelp)
1540811585860:head(sleepsurvey)
1540811585878:panderOptions('table.split.table', Inf)
1540811585883:my.data <- "
1540811585886:Concept                       | Variable Name     | Statistical Type  | Possible Values
1540811585889:Anxiety Level                 | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1540811585891:Sleepiness Level              | ess               | Scale             | Range from 0=low to
1540811585894:24=high daytime sleepiness
1540811585897:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe
1540811585900:depression
1540811585903:Quality of Sleep              | qualslp           | Nominal           | 1=very poor 2=poor 3=fair 4=good
1540811585905:5=very good 6=excellent
1540811585911:Medication used for Sleeping  | medhelp           | Nominal           | 1=yes 2=no "
1540811585916:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1540811585925:names(df) <- unname(as.list(df[1,])) # put headers on
1540811585936:df <- df[-1,] # remove first row
1540811585944:row.names(df)<-NULL
1540811585952:pander(df, style = 'rmarkdown')
1540811585975:len_tot <- count(sleepsurvey) #number of surveys
1540811585992:num_na_anxiety <- sum(is.na(sleepsurvey$anxiety)) #number of null values in anxiety
1540811585997:num_anx <- len_tot[[1]] - num_na_anxiety
1540811586001:range_anx <- range(sleepsurvey$anxiety, na.rm = TRUE)
1540811586013:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540811586021:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540811586093:gg <- gg + labs(x="HADS Anxiety Level")
1540811586108:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540811586131:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540811586170:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$anxiety, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540811586196:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1540811586674:qqnorm(sleepsurvey$anxiety, main="Figure X: QQPlot of HADS Anxiety Score")
1540811586715:qqline(sleepsurvey$anxiety, col=2)
1540811586742:tpskew_anx<-semTools::skew(sleepsurvey$anxiety)
1540811586941:tpkurt_anx<-semTools::kurtosis(sleepsurvey$anxiety)
1540811587196:scale_anx <-  scale(sleepsurvey$anxiety)
1540811587204:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540811587211:hist(scale_anx, breaks = 30)
1540811587248:num_na_ess <- sum(is.na(sleepsurvey$ess)) #number of null values in ess
1540811587252:num_ess <- len_tot[[1]] - num_na_ess
1540811587257:range_ess <- range(sleepsurvey$ess, na.rm = TRUE)
1540811587268:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540811587275:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540811587305:gg <- gg + labs(x="Epworth Sleepiness Scale")
1540811587457:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540811587550:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540811587572:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$ess, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540811587598:gg+ggtitle('Figure X: Distribution Epworth Sleepiness Scale')
1540811588202:qqnorm(sleepsurvey$ess, main="Figure X: QQPlot of Epworth Sleepiness Scale")
1540811588469:qqline(sleepsurvey$ess, col=2)
1540811588498:tpskew_ess<-semTools::skew(sleepsurvey$ess)
1540811588503:tpkurt_ess<-semTools::kurtosis(sleepsurvey$ess)
1540811588514:scale_ess <-  scale(sleepsurvey$ess)
1540811588520:range_scale_ess <- round(range(scale_ess, na.rm = TRUE), 2)
1540811588526:hist(scale_ess, breaks = 30)
1540811588560:num_na_depress <- sum(is.na(sleepsurvey$depress))
1540811588565:num_depress <- len_tot[[1]] - num_na_depress
1540811588570:range_depress <- range(sleepsurvey$depress, na.rm = TRUE)
1540811588583:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540811588589:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$depress))
1540811588606:gg <- gg + labs(x="HADS Depression Level")
1540811588621:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540811588643:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540811588717:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$depress, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540811588739:gg+ggtitle('Figure X: Distribution HADS Depression')
1540811589238:qqnorm(sleepsurvey$depress, main="Figure X: QQPlot of HADS Depression Score")
1540811589309:qqline(sleepsurvey$depress, col=2)
1540811589334:tpskew_depress<-semTools::skew(sleepsurvey$depress)
1540811589339:tpkurt_depress<-semTools::kurtosis(sleepsurvey$depress)
1540811589351:scale_depress <-  scale(sleepsurvey$depress)
1540811589357:range_scale_depress <- round(range(scale_depress, na.rm = TRUE), 2)
1540811589361:hist(scale_depress, breaks = 10)
1540811589507:num_qual <- summary(sleepsurvey$qualslp)
1540811589512:perc_qual <- round(100*num_qual/len_tot, 2)
1540811589518:table_qual <- rbind(num_qual, perc_qual)
1540811589523:table_qual
1540811589590:plot(sleepsurvey$qualslp)
1540811589625:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540811589961:bar <- ggplot(sleepsurvey, aes(qualslp, anxiety))
1540811589977:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Quality of Sleep")
1540811591893:num_med <- summary(sleepsurvey$medhelp)
1540811591899:perc_med <- round(100*num_med/len_tot, 2)
1540811591905:table_med <- rbind(num_med, perc_med)
1540811592148:table_med
1540811592156:plot(sleepsurvey$medhelp)
1540811592190:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$medhelp)
1540811592235:#psych::describeBy(sleepsurvey$qualslp, sleepsurvey$medhelp)
1540811592244:bar <- ggplot(sleepsurvey, aes(medhelp, anxiety))
1540811592263:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Sleep Aided by Medication", y = "HADS level of Anxiety", title="Figure 10: HADS Anxiety Level by Sleep Aid used")
1540811592820:ggplot(sleepsurvey, aes(medhelp, qualslp)) +
1540811592823:geom_bar(stat="identity", position = "dodge") +
1540811592826:scale_fill_brewer(palette = "Set1")
1540811593056:ggplot(ddf2, aes(x=name, y=value, fill=variable))+geom_bar(stat='identity', position='dodge')
1540811698616:ddf = structure(list(name = c("bass.karen", "braley", "chu", "cicilline",
1540811698618:"clinton", "conyers"), total = c(13L, 48L, 18L, 18L, 56L, 54L
1540811698622:), ratio.dis = c(2, 2.5625, 2.166667, 2.5, 2, 2.555556), n = c(5L,
1540811698625:16L, 6L, 6L, 18L, 18L), ratio.opt = c(2.6, 3, 3, 3, 3.111111,
1540811698629:3)), .Names = c("name", "total", "ratio.dis", "n", "ratio.opt"
1540811698632:), class = "data.frame", row.names = c(NA, -6L))
1540811704238:dff
1540811711093:ddf
1540811737595:ddf2 = melt(ddf[,c(1,3,5)], id='name'
1540811754428:ddf2 = melt(ddf[,c(1,3,5)], id='name')
1540811770748:ddf2 = melt(ddf[,c(1,3,5)], id='name')
1540811824040:ggplot(sleepsurvey, aes(x=medhelp, y=qualslp, fill=variable))+geom_bar(stat='identity', position='dodge')
1540811898519:?barplot
1540811963041:setwd("~/R/Stats/wk2")
1540811971545:library(ggplot2)
1540811971547:library(reshape)
1540811971577:library(plyr)
1540811971577:library (Hmisc)
1540811978469:#-- Some Basics with ggplot
1540811978470:#facebookNarcissim - data file from a study that looked at ratings of Facebook profile pictures
1540811978471:#which were rated (on coolness, fashion, atrractiveness and galmour)
1540811978473:#and predicting from this how high the person predicted rates on narcissim
1540811978474:facebookData <- read.delim("facebookNarcissism.dat",  header = TRUE)
1540812014704:facebookData <- read.delim("facebookNarcissism.dat",  header = TRUE)
1540812028148:ggplot(facebookData, aes(NPQC_R_Total, Rating))
1540812048208:graph <- ggplot(facebookData, aes(NPQC_R_Total, Rating))
1540812048210:graph + geom_point() + ggtitle("geompoint")
1540812048436:ggsave("Week2 Example with point.png", plot=last_plot())
1540812062096:graph + geom_point(shape = 17) + ggtitle("geom_point(shape = 17)")
1540812062338:ggsave("Week2 Example with triangle.png", plot=last_plot())
1540812083066:ggplot(facebookData, aes(NPQC_R_Total, Rating))
1540812092008:graph <- ggplot(facebookData, aes(NPQC_R_Total, Rating))
1540812092010:graph + geom_point() + ggtitle("geompoint")
1540812102320:graph + geom_point(size = 6) + ggtitle ("geom_point(size = 3)")
1540812111590:graph + theme_bw(base_size=13)  + geom_point(shape = 17) + ggtitle ("theme_bw(base_size=13")
1540812123672:graph + theme_dark() + geom_point(shape = 17) + ggtitle ("theme_dark")
1540812133473:graph + geom_point(aes(colour = Rating_Type)) + ggtitle("geom_point(aes(colour = Rating_Type))")
1540812143660:graph + geom_point(aes(colour = Rating_Type), position = "jitter") + ggtitle ("geom_point(aes(colour = Rating_Type), position = jitter)")
1540812162808:festivalData <- read.delim("DownloadFestival.dat",  header = TRUE)
1540812170868:ggplot(festivalData, aes(day1)) + theme(legend.position="none")
1540812179321:festivalHistogram <- ggplot(festivalData, aes(day1)) + theme(legend.position="none")
1540812179328:festivalHistogram + geom_histogram(binwidth = 0.4) + labs(x = "Hygiene (Day 1 of Festival)", y = "Frequency")
1540812194125:festivalData2 = read.delim("DownloadFestival(No Outlier).dat",  header = TRUE)
1540812194129:festivalDensity <- ggplot(festivalData2, aes(day1))
1540812194131:festivalDensity + geom_density() + labs(x = "Hygiene (Day 1 of Festival)", y = "Density Estimate")
1540812206220:festivalDensity + geom_density(aes(fill = gender), alpha = 0.5) + labs(x = "Hygiene (Day 1 of Festival)", y = "Density Estimate")
1540812311251:swirl()
1540812329418:?swirl
1540812337063:??swirl
1540812372234:library(swirl)
1540812440458:rm(list=ls())
1540812445665:swirl()
1540812525660:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1540812525800:library(foreign)
1540812525923:#library(dplyr)
1540812525926:library(ggplot2)
1540812526679:#library(psych)
1540812526732:#library(pastecs)
1540812526736:#library(semTools)
1540812526739:#library(car)
1540812526742:library(pander)
1540812526801:#Reading in the dataset
1540812526804:sleepsurveyfull <- as.data.frame(read.spss("sleep5ED.sav"))
1540812527073:library('plyr')
1540812527085:library('dplyr')
1540812527109:sleepsurvey<-select(sleepsurveyfull, id, anxiety, ess, depress, qualslp, medhelp)
1540812527163:head(sleepsurvey)
1540812527185:panderOptions('table.split.table', Inf)
1540812527189:my.data <- "
1540812527192:Concept                       | Variable Name     | Statistical Type  | Possible Values
1540812527195:Anxiety Level                 | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1540812527198:Sleepiness Level              | ess               | Scale             | Range from 0=low to
1540812527200:24=high daytime sleepiness
1540812527203:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe
1540812527206:depression
1540812527209:Quality of Sleep              | qualslp           | Nominal           | 1=very poor 2=poor 3=fair 4=good
1540812527212:5=very good 6=excellent
1540812527218:Medication used for Sleeping  | medhelp           | Nominal           | 1=yes 2=no "
1540812527223:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1540812527233:names(df) <- unname(as.list(df[1,])) # put headers on
1540812527245:df <- df[-1,] # remove first row
1540812527253:row.names(df)<-NULL
1540812527261:pander(df, style = 'rmarkdown')
1540812527290:len_tot <- count(sleepsurvey) #number of surveys
1540812527308:num_na_anxiety <- sum(is.na(sleepsurvey$anxiety)) #number of null values in anxiety
1540812527313:num_anx <- len_tot[[1]] - num_na_anxiety
1540812527318:range_anx <- range(sleepsurvey$anxiety, na.rm = TRUE)
1540812527333:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540812527342:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540812527514:gg <- gg + labs(x="HADS Anxiety Level")
1540812527529:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540812527556:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540812527584:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$anxiety, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540812527611:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1540812528105:qqnorm(sleepsurvey$anxiety, main="Figure X: QQPlot of HADS Anxiety Score")
1540812528141:qqline(sleepsurvey$anxiety, col=2)
1540812528171:tpskew_anx<-semTools::skew(sleepsurvey$anxiety)
1540812528482:tpkurt_anx<-semTools::kurtosis(sleepsurvey$anxiety)
1540812528498:scale_anx <-  scale(sleepsurvey$anxiety)
1540812528504:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540812528512:hist(scale_anx, breaks = 30)
1540812528910:num_na_ess <- sum(is.na(sleepsurvey$ess)) #number of null values in ess
1540812528915:num_ess <- len_tot[[1]] - num_na_ess
1540812528919:range_ess <- range(sleepsurvey$ess, na.rm = TRUE)
1540812528934:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540812528941:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540812528968:gg <- gg + labs(x="Epworth Sleepiness Scale")
1540812528985:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540812529209:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540812529269:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$ess, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540812529502:gg+ggtitle('Figure X: Distribution Epworth Sleepiness Scale')
1540812530115:qqnorm(sleepsurvey$ess, main="Figure X: QQPlot of Epworth Sleepiness Scale")
1540812530135:qqline(sleepsurvey$ess, col=2)
1540812530165:tpskew_ess<-semTools::skew(sleepsurvey$ess)
1540812530170:tpkurt_ess<-semTools::kurtosis(sleepsurvey$ess)
1540812530185:scale_ess <-  scale(sleepsurvey$ess)
1540812530191:range_scale_ess <- round(range(scale_ess, na.rm = TRUE), 2)
1540812530196:hist(scale_ess, breaks = 30)
1540812530236:num_na_depress <- sum(is.na(sleepsurvey$depress))
1540812530241:num_depress <- len_tot[[1]] - num_na_depress
1540812530245:range_depress <- range(sleepsurvey$depress, na.rm = TRUE)
1540812530261:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540812530267:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$depress))
1540812530285:gg <- gg + labs(x="HADS Depression Level")
1540812530303:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540812530326:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540812530349:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$depress, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540812530378:gg+ggtitle('Figure X: Distribution HADS Depression')
1540812531120:qqnorm(sleepsurvey$depress, main="Figure X: QQPlot of HADS Depression Score")
1540812531143:qqline(sleepsurvey$depress, col=2)
1540812531375:tpskew_depress<-semTools::skew(sleepsurvey$depress)
1540812531381:tpkurt_depress<-semTools::kurtosis(sleepsurvey$depress)
1540812531397:scale_depress <-  scale(sleepsurvey$depress)
1540812531404:range_scale_depress <- round(range(scale_depress, na.rm = TRUE), 2)
1540812531590:hist(scale_depress, breaks = 10)
1540812531628:num_qual <- summary(sleepsurvey$qualslp)
1540812531633:perc_qual <- round(100*num_qual/len_tot, 2)
1540812531640:table_qual <- rbind(num_qual, perc_qual)
1540812531645:table_qual
1540812531722:plot(sleepsurvey$qualslp)
1540812531869:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540812532197:bar <- ggplot(sleepsurvey, aes(qualslp, anxiety))
1540812532221:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Quality of Sleep")
1540812534396:num_med <- summary(sleepsurvey$medhelp)
1540812534411:perc_med <- round(100*num_med/len_tot, 2)
1540812534427:table_med <- rbind(num_med, perc_med)
1540812534442:table_med
1540812534463:plot(sleepsurvey$medhelp)
1540812534613:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$medhelp)
1540812534874:#psych::describeBy(sleepsurvey$qualslp, sleepsurvey$medhelp)
1540812534890:bar <- ggplot(sleepsurvey, aes(medhelp, anxiety))
1540812534909:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Sleep Aided by Medication", y = "HADS level of Anxiety", title="Figure 10: HADS Anxiety Level by Sleep Aid used")
1540812535497:ddf = structure(list(name = c("bass.karen", "braley", "chu", "cicilline",
1540812535501:"clinton", "conyers"), total = c(13L, 48L, 18L, 18L, 56L, 54L
1540812535504:), ratio.dis = c(2, 2.5625, 2.166667, 2.5, 2, 2.555556), n = c(5L,
1540812535509:16L, 6L, 6L, 18L, 18L), ratio.opt = c(2.6, 3, 3, 3, 3.111111,
1540812535513:3)), .Names = c("name", "total", "ratio.dis", "n", "ratio.opt"
1540812535517:), class = "data.frame", row.names = c(NA, -6L))
1540812535528:ddf
1540812535541:ddf2 = melt(ddf[,c(1,3,5)], id='name')
1540812568799:ggplot(sleepsurvey, aes(medhelp, qualslp)) +
1540812568930:geom_bar(stat="identity", position = "dodge") +
1540812568934:scale_fill_brewer(palette = "Set1")
1540812569096:#ggplot(sleepsurvey, aes(x=medhelp, y=qualslp, fill=variable))+geom_bar(stat='identity', position='dodge')
1540812719065:ggplot(sleepsurvey, aes(x=qualslp, fill=medhelp))+geom_bar(stat='identity', position='dodge')
1540812757165:head(sleepsurvey)
1540812795835:hist(sleepsurvey$qualslp)
1540812907713:ggplot(sleepsurvey$medhelp)
1540812924610:ggplot(sleepsurvey, aes=(medhelp))
1540812977113:swirl()
1540813005819:library(swirl)
1540813010137:swirl()
1540813697034:head(pollution)
1540813739847:dim(pollution)
1540813767072:summary(pollution$pm25)
1540813823407:quantile(ppm)
1540813850769:boxplot(ppm, col='blue')
1540813897002:abline(h=12)
1540813926222:hist(ppm, col=green)
1540813933094:hist(ppm, col='green')
1540813955127:rug(ppm)
1540813982378:low(ppm)
1540813997759:rug(low)
1540817691616:summary(low)
1540817696738:low
1540817705894:high
1540817749367:hist(ppm, col='green', breaks=100)
1540817773019:rug(ppm)
1540817792156:hist(ppm, col='green')
1540817811399:abline(v=12, lwd=2)
1540817838549:abline(v=median, col='magenta', lwd=4)
1540817849638:abline(v=median(ppm), col='magenta', lwd=4)
1540817924036:scale_anx <-  scale(sleepsurvey$anxiety)
1540817924138:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540817924156:hist(scale_anx, breaks = 30, col='blue')
1540817924228:abline(v=3.29)
1540817964366:names(pollution)
1540817979783:table(region)
1540817991636:reg <- table(pollution$region)
1540817994666:reg
1540818039504:barplot(pollution$reg, col='wheat', main='Number of Counties in Each Region')
1540818054505:barplot(reg, col='wheat', main='Number of Counties in Each Region')
1540818135687:boxplot(pm25~region, data=pollution, col='red')
1540818180832:par(mfrom=c(2,1), mar=c(4,4,2,1))
1540818218723:par(mfrom = c(2, 1), mar = c(4, 4, 2, 1))
1540818225970:par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
1540818317727:east <- subset(pollution, region == 'east')
1540818322698:ead(east)
1540818325878:head(east)
1540818350126:hist(east$pm25, col='green')
1540818406437:hist(subset(pollution, region=='west')$pm25, col='green')
1540818551072:plot(pollution)
1540818579438:with(pollution, plot(latitude, pm25))
1540818599563:abline(lwd=2, lty=2)
1540818613407:abline(h=12, lwd=2, lty=2)
1540818659144:plot(pollution$latitude, pollution$ppm, col=pollution$region)
1540818673173:plot(pollution$latitude, ppm, col=pollution$region)
1540818750423:abline(h=12, lwd=2, lty=2)
1540818787799:par(mfrow = c(1,2), mar = c(5, 4, 2, 1))
1540818821870:west<-subset(pollution, region =='west')
1540818851712:plot(west$latitude, west$pm25, main='West')
1540818884026:plot(east$latitude, east$pm25, main='East')
1540818953517:scale_anx <-  scale(sleepsurvey$anxiety)
1540818953537:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540818953551:hist(scale_anx, breaks = 30, col='blue')
1540818953798:abline(v=3.29)
1540818977327:scale_anx <-  scale(sleepsurvey$anxiety)
1540818977344:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540818977360:hist(scale_anx, breaks = 30, col='blue')
1540818977451:#abline(v=3.29)
1540818985968:scale_anx <-  scale(sleepsurvey$anxiety)
1540818985975:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540818985980:hist(scale_anx, breaks = 30, col='blue')
1540818985995:abline(v=3.29)
1540819010074:scale_anx <-  scale(sleepsurvey$anxiety)
1540819010089:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540819010102:hist(scale_anx, breaks = 30, col='blue')
1540819010138:abline(v=3.29)
1540819010400:abline(v=-3.29)
1540819020597:scale_anx <-  scale(sleepsurvey$anxiety)
1540819020617:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540819020631:hist(scale_anx, breaks = 30, col='blue')
1540819020822:abline(v=3.29)
1540819020827:abline(v=-2.29)
1540819039879:scale_anx <-  scale(sleepsurvey$anxiety)
1540819039894:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540819039910:hist(scale_anx, breaks = 30, col='blue')
1540819039950:abline(v=c(2.29, 3.29))
1540819052199:scale_anx <-  scale(sleepsurvey$anxiety)
1540819052217:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540819052238:hist(scale_anx, breaks = 30, col='blue')
1540819052277:abline(v=c(-3.29, 3.29))
1540819743817:swirl()
1540819818672:?Devices
1540819864437:plot(eruptions, waiting)
1540819896359:with(faithful ,plot(eruptions, waiting))
1540819927586:title(main='Old Faithful Geyser data')
1540819942113:dev.cur()
1540819966269:pdf(file='myplot.pdf')
1540819990103:with(faithful ,plot(eruptions, waiting))
1540819996165:title(main='Old Faithful Geyser data')
1540820083334:dev.cur()
1540820089260:dev.off()
1540820094126:dev.cur()
1540820119511:with(faithful ,plot(eruptions, waiting))
1540820124038:title(main='Old Faithful Geyser data')
1540820156781:dev.copy(png, file='geyserplot.plg')
1540820180470:dev.copy(png, file='geyserplot.png')
1540820198835:dev.off()
1540820411306:swirl.bye()
1540820416814:swirl(bye)
1540820489771:head(cars)
1540820519644:with(cars, plot(speed, dist()))
1540820523570:with(cars, plot(speed, dist)
1540820526692:)
1540820586766:text(x=mean(cars$speed), y=max(cars$dist), 'SWIRL rules!')
1540820633360:head(state)
1540820662763:table(state$region)
1540820733379:xyplot(Life.exp ~ Income | region, data=state, layout=c(4, 1))
1540820740908:xyplot(Life.Exp ~ Income | region, data=state, layout=c(4, 1))
1540820785475:xyplot(Life.Exp ~ Income | region, data=state, layout=c(2, 2))
1540820828978:head(mpg)
1540820840967:dim(mpg)
1540825002816:table(mpg$model)
1540825053718:qplot(displ, hwy, arg=mpg)
1540825074986:qplot(displ, hwy, argument=mpg)
1540825101117:ggplot::qplot(displ, hwy, argument=mpg)
1540825109668:library(ggplot2)
1540825120417:ggplot::qplot(displ, hwy, data()=mpg)
1540825124222:ggplot::qplot(displ, hwy, data=mpg)
1540825129957:qplot(displ, hwy, data=mpg)
1540825417293:counts <- table(mtcars$vs, mtcars$gear)
1540825417310:barplot(counts, main="Car Distribution by Gears and VS",
1540825417320:xlab="Number of Gears", col=c("darkblue","red"),
1540825417328:legend = rownames(counts), beside=TRUE)
1540825464780:counts <- table(mtcars$vs, mtcars$gear)
1540825464798:barplot(counts, main="Car Distribution by Gears and VS",
1540825464808:xlab="Number of Gears", col=c("darkblue","red"),
1540825464818:legend = rownames(counts), beside=TRUE)
1540825499866:ggplot(sleepsurvey, aes(medhelp, qualslp)) +
1540825499875:geom_bar(stat="identity", position = "dodge") +
1540825499883:scale_fill_brewer(palette = "Set1")
1540825500098:ggplot(sleepsurvey, aes(x=qualslp, fill=medhelp))+geom_bar(stat='identity', position='dodge')
1540825506563:counts <- table(mtcars$vs, mtcars$gear)
1540825506580:barplot(counts, main="Car Distribution by Gears and VS",
1540825506590:xlab="Number of Gears", col=c("darkblue","red"),
1540825506599:legend = rownames(counts), beside=TRUE)
1540825522248:counts
1540825575938:table(sleepsurvey$medhelp, sleepsurvey$qualslp)
1540825654646:barplot(counts, main="Car Distribution by Gears and VS",
1540825654653:xlab="Number of Gears", col=c("darkblue","red"),
1540825654659:legend = rownames(counts), beside=TRUE)
1540825698359:counts2 <- table(sleepsurvey$medhelp, sleepsurvey$qualslp)
1540825700415:barplot(counts2, main="Car Distribution by Gears and VS",
1540825700424:xlab="Number of Gears", col=c("darkblue","red"),
1540825700433:legend = rownames(counts), beside=TRUE)
1540825769363:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1540825769608:library(foreign)
1540825769626:#library(dplyr)
1540825769629:library(ggplot2)
1540825770948:#library(psych)
1540825770951:#library(pastecs)
1540825770955:#library(semTools)
1540825770958:#library(car)
1540825770961:library(pander)
1540825771024:#Reading in the dataset
1540825771027:sleepsurveyfull <- as.data.frame(read.spss("sleep5ED.sav"))
1540825771099:library('plyr')
1540825771111:library('dplyr')
1540825771131:sleepsurvey<-select(sleepsurveyfull, id, anxiety, ess, depress, qualslp, medhelp)
1540825771151:head(sleepsurvey)
1540825771172:panderOptions('table.split.table', Inf)
1540825771176:my.data <- "
1540825771180:Concept                       | Variable Name     | Statistical Type  | Possible Values
1540825771183:Anxiety Level                 | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1540825771186:Sleepiness Level              | ess               | Scale             | Range from 0=low to
1540825771189:24=high daytime sleepiness
1540825771192:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe
1540825771195:depression
1540825771198:Quality of Sleep              | qualslp           | Nominal           | 1=very poor 2=poor 3=fair 4=good
1540825771201:5=very good 6=excellent
1540825771205:Medication used for Sleeping  | medhelp           | Nominal           | 1=yes 2=no "
1540825771210:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1540825771220:names(df) <- unname(as.list(df[1,])) # put headers on
1540825771228:df <- df[-1,] # remove first row
1540825771235:row.names(df)<-NULL
1540825771243:pander(df, style = 'rmarkdown')
1540825771265:len_tot <- count(sleepsurvey) #number of surveys
1540825771284:num_na_anxiety <- sum(is.na(sleepsurvey$anxiety)) #number of null values in anxiety
1540825771290:num_anx <- len_tot[[1]] - num_na_anxiety
1540825771297:range_anx <- range(sleepsurvey$anxiety, na.rm = TRUE)
1540825771314:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540825771323:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540825771342:gg <- gg + labs(x="HADS Anxiety Level")
1540825771511:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540825771541:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540825771566:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$anxiety, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540825771593:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1540825772105:qqnorm(sleepsurvey$anxiety, main="Figure X: QQPlot of HADS Anxiety Score")
1540825772136:qqline(sleepsurvey$anxiety, col=2)
1540825772164:tpskew_anx<-semTools::skew(sleepsurvey$anxiety)
1540825772358:tpkurt_anx<-semTools::kurtosis(sleepsurvey$anxiety)
1540825772375:scale_anx <-  scale(sleepsurvey$anxiety)
1540825772382:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540825772387:hist(scale_anx, breaks = 30, col='blue')
1540825772402:abline(v=c(-3.29, 3.29))
1540825772434:num_na_ess <- sum(is.na(sleepsurvey$ess)) #number of null values in ess
1540825772438:num_ess <- len_tot[[1]] - num_na_ess
1540825772443:range_ess <- range(sleepsurvey$ess, na.rm = TRUE)
1540825772478:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540825772485:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540825772503:gg <- gg + labs(x="Epworth Sleepiness Scale")
1540825772607:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540825772630:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540825772651:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$ess, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540825772680:gg+ggtitle('Figure X: Distribution Epworth Sleepiness Scale')
1540825773169:qqnorm(sleepsurvey$ess, main="Figure X: QQPlot of Epworth Sleepiness Scale")
1540825773186:qqline(sleepsurvey$ess, col=2)
1540825773213:tpskew_ess<-semTools::skew(sleepsurvey$ess)
1540825773219:tpkurt_ess<-semTools::kurtosis(sleepsurvey$ess)
1540825773236:scale_ess <-  scale(sleepsurvey$ess)
1540825773244:range_scale_ess <- round(range(scale_ess, na.rm = TRUE), 2)
1540825773250:hist(scale_ess, breaks = 30)
1540825773290:num_na_depress <- sum(is.na(sleepsurvey$depress))
1540825773294:num_depress <- len_tot[[1]] - num_na_depress
1540825773298:range_depress <- range(sleepsurvey$depress, na.rm = TRUE)
1540825773314:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540825773320:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$depress))
1540825773336:gg <- gg + labs(x="HADS Depression Level")
1540825773352:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540825773374:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540825773395:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$depress, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540825773419:gg+ggtitle('Figure X: Distribution HADS Depression')
1540825773849:qqnorm(sleepsurvey$depress, main="Figure X: QQPlot of HADS Depression Score")
1540825774147:qqline(sleepsurvey$depress, col=2)
1540825774195:tpskew_depress<-semTools::skew(sleepsurvey$depress)
1540825774208:tpkurt_depress<-semTools::kurtosis(sleepsurvey$depress)
1540825774262:scale_depress <-  scale(sleepsurvey$depress)
1540825774278:range_scale_depress <- round(range(scale_depress, na.rm = TRUE), 2)
1540825774292:hist(scale_depress, breaks = 10)
1540825774390:num_qual <- summary(sleepsurvey$qualslp)
1540825774399:perc_qual <- round(100*num_qual/len_tot, 2)
1540825774408:table_qual <- rbind(num_qual, perc_qual)
1540825774414:table_qual
1540825774493:plot(sleepsurvey$qualslp)
1540825774535:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540825774709:bar <- ggplot(sleepsurvey, aes(qualslp, anxiety))
1540825774726:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Quality of Sleep")
1540825776928:num_med <- summary(sleepsurvey$medhelp)
1540825776934:perc_med <- round(100*num_med/len_tot, 2)
1540825776941:table_med <- rbind(num_med, perc_med)
1540825776947:table_med
1540825777107:plot(sleepsurvey$medhelp)
1540825777118:ggplot(sleepsurvey, aes=(medhelp))
1540825777270:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$medhelp)
1540825777312:#psych::describeBy(sleepsurvey$qualslp, sleepsurvey$medhelp)
1540825777325:bar <- ggplot(sleepsurvey, aes(medhelp, anxiety))
1540825777351:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Sleep Aided by Medication", y = "HADS level of Anxiety", title="Figure 10: HADS Anxiety Level by Sleep Aid used")
1540825777662:ddf = structure(list(name = c("bass.karen", "braley", "chu", "cicilline",
1540825777665:"clinton", "conyers"), total = c(13L, 48L, 18L, 18L, 56L, 54L
1540825777668:), ratio.dis = c(2, 2.5625, 2.166667, 2.5, 2, 2.555556), n = c(5L,
1540825777671:16L, 6L, 6L, 18L, 18L), ratio.opt = c(2.6, 3, 3, 3, 3.111111,
1540825777675:3)), .Names = c("name", "total", "ratio.dis", "n", "ratio.opt"
1540825777678:), class = "data.frame", row.names = c(NA, -6L))
1540825777686:ddf
1540825777695:ddf2 = melt(ddf[,c(1,3,5)], id='name')
1540825824839:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1540825825014:library(foreign)
1540825825193:#library(dplyr)
1540825825196:library(ggplot2)
1540825825233:#library(psych)
1540825825236:#library(pastecs)
1540825825239:#library(semTools)
1540825825242:#library(car)
1540825825245:library(pander)
1540825825325:#Reading in the dataset
1540825825425:sleepsurveyfull <- as.data.frame(read.spss("sleep5ED.sav"))
1540825825500:library('plyr')
1540825826007:library('dplyr')
1540825826033:sleepsurvey<-select(sleepsurveyfull, id, anxiety, ess, depress, qualslp, medhelp)
1540825826046:head(sleepsurvey)
1540825826066:panderOptions('table.split.table', Inf)
1540825826070:my.data <- "
1540825826073:Concept                       | Variable Name     | Statistical Type  | Possible Values
1540825826076:Anxiety Level                 | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1540825826079:Sleepiness Level              | ess               | Scale             | Range from 0=low to
1540825826082:24=high daytime sleepiness
1540825826085:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe
1540825826088:depression
1540825826091:Quality of Sleep              | qualslp           | Nominal           | 1=very poor 2=poor 3=fair 4=good
1540825826094:5=very good 6=excellent
1540825826098:Medication used for Sleeping  | medhelp           | Nominal           | 1=yes 2=no "
1540825826103:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1540825826112:names(df) <- unname(as.list(df[1,])) # put headers on
1540825826120:df <- df[-1,] # remove first row
1540825826127:row.names(df)<-NULL
1540825826135:pander(df, style = 'rmarkdown')
1540825826161:len_tot <- count(sleepsurvey) #number of surveys
1540825826180:num_na_anxiety <- sum(is.na(sleepsurvey$anxiety)) #number of null values in anxiety
1540825826185:num_anx <- len_tot[[1]] - num_na_anxiety
1540825826190:range_anx <- range(sleepsurvey$anxiety, na.rm = TRUE)
1540825826204:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540825826212:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540825826231:gg <- gg + labs(x="HADS Anxiety Level")
1540825826263:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540825826289:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540825826314:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$anxiety, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540825826341:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1540825826834:qqnorm(sleepsurvey$anxiety, main="Figure X: QQPlot of HADS Anxiety Score")
1540825826867:qqline(sleepsurvey$anxiety, col=2)
1540825826897:tpskew_anx<-semTools::skew(sleepsurvey$anxiety)
1540825827076:tpkurt_anx<-semTools::kurtosis(sleepsurvey$anxiety)
1540825827092:scale_anx <-  scale(sleepsurvey$anxiety)
1540825827099:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540825827104:hist(scale_anx, breaks = 30, col='blue')
1540825827120:abline(v=c(-3.29, 3.29))
1540825827170:num_na_ess <- sum(is.na(sleepsurvey$ess)) #number of null values in ess
1540825827175:num_ess <- len_tot[[1]] - num_na_ess
1540825827180:range_ess <- range(sleepsurvey$ess, na.rm = TRUE)
1540825827194:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540825827201:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540825827219:gg <- gg + labs(x="Epworth Sleepiness Scale")
1540825827320:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540825827343:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540825827365:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$ess, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540825827389:gg+ggtitle('Figure X: Distribution Epworth Sleepiness Scale')
1540825827891:qqnorm(sleepsurvey$ess, main="Figure X: QQPlot of Epworth Sleepiness Scale")
1540825827909:qqline(sleepsurvey$ess, col=2)
1540825827936:tpskew_ess<-semTools::skew(sleepsurvey$ess)
1540825827943:tpkurt_ess<-semTools::kurtosis(sleepsurvey$ess)
1540825827956:scale_ess <-  scale(sleepsurvey$ess)
1540825827962:range_scale_ess <- round(range(scale_ess, na.rm = TRUE), 2)
1540825828170:hist(scale_ess, breaks = 30)
1540825828201:num_na_depress <- sum(is.na(sleepsurvey$depress))
1540825828205:num_depress <- len_tot[[1]] - num_na_depress
1540825828209:range_depress <- range(sleepsurvey$depress, na.rm = TRUE)
1540825828222:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540825828228:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$depress))
1540825828243:gg <- gg + labs(x="HADS Depression Level")
1540825828260:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540825828282:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540825828302:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$depress, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540825828326:gg+ggtitle('Figure X: Distribution HADS Depression')
1540825828705:qqnorm(sleepsurvey$depress, main="Figure X: QQPlot of HADS Depression Score")
1540825828724:qqline(sleepsurvey$depress, col=2)
1540825828750:tpskew_depress<-semTools::skew(sleepsurvey$depress)
1540825828755:tpkurt_depress<-semTools::kurtosis(sleepsurvey$depress)
1540825828769:scale_depress <-  scale(sleepsurvey$depress)
1540825828775:range_scale_depress <- round(range(scale_depress, na.rm = TRUE), 2)
1540825828779:hist(scale_depress, breaks = 10)
1540825828815:num_qual <- summary(sleepsurvey$qualslp)
1540825828820:perc_qual <- round(100*num_qual/len_tot, 2)
1540825828826:table_qual <- rbind(num_qual, perc_qual)
1540825828831:table_qual
1540825828908:plot(sleepsurvey$qualslp)
1540825828948:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540825829109:bar <- ggplot(sleepsurvey, aes(qualslp, anxiety))
1540825829125:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Quality of Sleep")
1540825830730:num_med <- summary(sleepsurvey$medhelp)
1540825830736:perc_med <- round(100*num_med/len_tot, 2)
1540825830742:table_med <- rbind(num_med, perc_med)
1540825830965:table_med
1540825830987:plot(sleepsurvey$medhelp)
1540825830999:ggplot(sleepsurvey, aes=(medhelp))
1540825831091:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$medhelp)
1540825831139:#psych::describeBy(sleepsurvey$qualslp, sleepsurvey$medhelp)
1540825831175:bar <- ggplot(sleepsurvey, aes(medhelp, anxiety))
1540825831196:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Sleep Aided by Medication", y = "HADS level of Anxiety", title="Figure 10: HADS Anxiety Level by Sleep Aid used")
1540825831554:counts2 <- table(sleepsurvey$medhelp, sleepsurvey$qualslp)
1540825831570:barplot(counts2, main="Car Distribution by Gears and VS",
1540825831573:xlab="Number of Gears", col=c("darkblue","red"),
1540825831580:legend = rownames(counts), beside=TRUE)
1540825831617:plot(sleepsurvey$anxiety, sleepsurvey$ess)
1540825831656:#Pearson Correlation
1540825831660:stats::cor.test(sleepsurvey$anxiety, sleepsurvey$ess,  method='pearson')
1540825831703:plot(sleepsurvey$anxiety, sleepsurvey$depress)
1540825831746:#Pearson Correlation
1540825831749:stats::cor.test(sleepsurvey$anxiety, sleepsurvey$depress,  method='pearson')
1540825831790:#Conduct Levene's test for homogeneity of variance in library car
1540825831794:ltest<-car::leveneTest(anxiety ~ qualslp, data=sleepsurvey)
1540825832167:#Pr(F) is your probability
1540825832171:ltest
1540825832190:#Conduct the t-test from package stats
1540825832804:#You can use the var.equal = TRUE option to specify equal variances and a pooled variance estimate
1540825832838:#stats::t.test(tslfest~sex,var.equal=TRUE,data=sleepsurvey)
1540825832849:#leveneTest(anxiety ~ medhelp, data = sleepsurvey)
1540825832860:t.test(anxiety ~ medhelp, var.equal = TRUE, data = sleepsurvey)
1540825832906:2*2.6471/sqrt(266)
1540826080787:num_med <- summary(sleepsurvey$medhelp)
1540826080803:perc_med <- round(100*num_med/len_tot, 2)
1540826080822:table_med <- rbind(num_med, perc_med)
1540826080838:table_med
1540826080868:plot(sleepsurvey$medhelp)
1540826269205:bar <- ggplot(sleepsurvey, aes(medhelp, anxiety))
1540826269271:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1540826480808:table_med_qual <- table(sleepsurvey$medhelp, sleepsurvey$qualslp)
1540826480816:table_med_qual
1540826480841:barplot(table_med_qual, main="Car Distribution by Gears and VS",
1540826480844:xlab="Number of Gears", col=c("darkblue","red"),
1540826480847:legend = rownames(counts), beside=TRUE)
1540826515267:table_med_qual <- table(sleepsurvey$medhelp, sleepsurvey$qualslp)
1540826515286:table_med_qual
1540826515503:barplot(table_med_qual, main="Car Distribution by Gears and VS",
1540826515508:xlab="Number of Gears", col=c("darkblue","red"),
1540826515512:legend = rownames(table_med_qual), beside=TRUE)
1540826566420:table_med_qual <- table(sleepsurvey$medhelp, sleepsurvey$qualslp)
1540826566439:table_med_qual
1540826566555:barplot(table_med_qual, main="Quality of Sleep by whether medication was used to aid sleep",
1540826566558:xlab="Quality of Sleep", col=c("darkblue","red"),
1540826566561:legend = rownames(table_med_qual), beside=TRUE)
1540826792156:plot(sleepsurvey$anxiety, sleepsurvey$ess)
1540826797133:#Pearson Correlation
1540826797141:stats::cor.test(sleepsurvey$anxiety, sleepsurvey$ess,  method='pearson')
1540827951928:scatter_anx_ess <- gplot(sleepsurvey, aes(anxiety, ess))
1540827959098:scatter_anx_ess <- ggplot(sleepsurvey, aes(anxiety, ess))
1540828008550:scatter + geom_point + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1540828014824:scatter_anx_ess + geom_point + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1540828026153:scatter_anx_ess + geom_point() + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1540828105274:scatter_anx_ess <- ggplot(sleepsurvey, aes(anxiety, ess))
1540828105324:scatter_anx_ess + geom_point() + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score') + geom_smooth(method = 'lm', colour = 'red', se = 'F')
1540828126199:scatter_anx_ess <- ggplot(sleepsurvey, aes(anxiety, ess))
1540828126249:scatter_anx_ess + geom_point() + geom_smooth(method = 'lm', colour = 'red', se = 'F') + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1540828257700:scatter_anx_ess <- ggplot(sleepsurvey, aes(anxiety, ess))
1540828257755:scatter_anx_ess + geom_point()  + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1540828257978:#+ geom_smooth(method = 'lm', colour = 'red', se = 'F')
1540828275179:scatter_anx_ess + geom_point()  + +geom_smooth() + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1540828299619:scatter_anx_ess + geom_point() + geom_smooth() + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1540828321331:scatter_anx_ess + geom_point() + geom_smooth( colour = 'red') + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1540828344603:scatter_anx_ess + geom_point() + geom_smooth( colour = 'red',  se = 'F') + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1540828368318:scatter_anx_ess + geom_point() + geom_smooth( colour = 'red', se = 'FALSE') + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1540828394772:scatter_anx_ess + geom_point() + geom_smooth(method = 'lm', colour = 'red') + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1540828430987:scatter_anx_ess + geom_point() + geom_smooth(method = 'lm', colour = 'red', se = FALSE) + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1540828600707:#Pearson Correlation
1540828600715:pear_anx_ess <- stats::cor.test(sleepsurvey$anxiety, sleepsurvey$ess,  method='pearson')
1540828602566:pear_anx_ess[1]
1540828609866:pear_anx_ess
1540828620862:pear_anx_ess[2]
1540828627771:pear_anx_ess[3]
1540828632388:pear_anx_ess[4]
1540828654006:pear_anx_ess[5]
1540828657932:pear_anx_ess[6]
1540828662371:pear_anx_ess[7]
1540828666477:pear_anx_ess[8]
1540828670143:pear_anx_ess[9]
1540828675759:pear_anx_ess[10]
1540828680232:pear_anx_ess[11]
1540828684434:#Pearson Correlation
1540828684442:pear_anx_ess <- stats::cor.test(sleepsurvey$anxiety, sleepsurvey$ess,  method='pearson')
1540828687886:pear_anx_ess
1540828750578:pear_anx_ess[4]
1540828756431:pear_anx_ess[4,1]
1540828765745:pear_anx_ess[4,0]
1540828776576:pear_anx_ess[[4,1]]
1540828782389:pear_anx_ess[[4]]
1540828790384:dim(pear_anx_ess[[4]])
1540829041283:#Pearson Correlation
1540829041291:pear_anx_ess <- stats::cor.test(sleepsurvey$anxiety, sleepsurvey$ess,  method='pearson')
1540829041540:pear_anx_ess
1540830260371:scatter_anx_ess <- ggplot(sleepsurvey, aes(anxiety, depress))
1540830260426:scatter_anx_ess + geom_point() + geom_smooth(method = 'lm', colour = 'red', se = FALSE) + labs(x = 'HADS Anxiety Score', y = 'HADS Depression Score')
1540830416301:pear_anx_ess <- stats::cor.test(sleepsurvey$anxiety, sleepsurvey$depress,  method='pearson')
1540830416332:pear_anx_ess
1540830429034:pear_anx_depress <- stats::cor.test(sleepsurvey$anxiety, sleepsurvey$depress,  method='pearson')
1540830429565:pear_anx_depress
1540831992585:t.test(anxiety ~ medhelp, var.equal = TRUE, data = sleepsurvey)
1540832076405:ttest_anx_med <- t.test(anxiety ~ medhelp, var.equal = TRUE, data = sleepsurvey)
1540832076446:ttest_anx_med[1]
1540832081019:ttest_anx_med[2]
1540832140558:2*2.6471/sqrt(266)
1540832140576:d <-  2*ttest_anx_med[[1]]/sqrt(ttest_anx_med[[2]])
1540832140767:d
1540832222660:ttest_anx_med
1540832235177:d <-  2*ttest_anx_med[[1]]/sqrt(ttest_anx_med[[2]])
1540832235189:d
1540832359253:ttest_anx_med[4]
1540832368821:ttest_anx_med[5]
1540832383396:ttest_anx_med[[5,1]]
1540832391398:ttest_anx_med[5][1]
1540832402492:ttest_anx_med[[5]][1]
1540832411059:ttest_anx_med[[5]][[1]]
1540832494892:ttest_anx_med[[5]][[2]]
1540832635708:d <-  2*ttest_anx_med[[1]]/sqrt(ttest_anx_med[[2]])
1540832635725:d
1540832667845:d
1540832670164:d[1]
1540832673985:d[[1]]
1540833117619:anx_yes <- select(sleepsurvey$anxiety, sleepsurvey$medhelp == 'yes')
1540833372126:head(sleepsurvey)
1540833398493:select(sleepsurvey$anxiety, sleepsurvey$medhelp == 'yes')
1540833413285:dplyr::select(sleepsurvey$anxiety, sleepsurvey$medhelp == 'yes')
1540833442309:filter(sleepsurvey$anxiety, sleepsurvey$medhelp == 'yes')
1540833450989:dplyr::filter(sleepsurvey$anxiety, sleepsurvey$medhelp == 'yes')
1540833471285:dplyr::filter(sleepsurvey, sleepsurvey$medhelp == 'yes')
1540833482387:filter(sleepsurvey, sleepsurvey$medhelp == 'yes')
1540833528039:summary(med_yes$anxiety)
1540833532531:med_yes <- filter(sleepsurvey, sleepsurvey$medhelp == 'yes')
1540833534422:summary(med_yes$anxiety)
1540833703063:sd(filter(sleepsurvey, sleepsurvey$medhelp == 'yes'), na.rm=TRUE)
1540833716504:filter(sleepsurvey, sleepsurvey$medhelp == 'yes')
1540833724279:filter(sleepsurvey, sleepsurvey$medhelp == 'yes')$anxiety
1540833735691:sd(filter(sleepsurvey, sleepsurvey$medhelp == 'yes')$anxiety, na.rm=TRUE)
1540833825079:ttest_anx_med <- t.test(anxiety ~ medhelp, var.equal = TRUE, data = sleepsurvey)
1540833825397:ttest_anx_med
1540833898743:ttest_anx_med[1]
1540833928959:ttest_anx_med[3]
1540834342295:leveneTest(anxiety ~ medhelp, data = sleepsurvey)
1540834365405:library(foreign)
1540834365415:library(car)
1540834365482:#library(dplyr)
1540834365488:library(ggplot2)
1540834365497:#library(psych)
1540834365654:#library(pastecs)
1540834365658:#library(semTools)
1540834365661:#library(car)
1540834365664:library(pander)
1540834378765:leveneTest(anxiety ~ medhelp, data = sleepsurvey)
1540834453818:ttest_anx_med <- t.test(anxiety ~ medhelp, var.equal = FALSE, data = sleepsurvey)
1540834453857:d <-  2*ttest_anx_med[[1]]/sqrt(ttest_anx_med[[2]])
1540834460661:ttest_anx_med
1540834639994:lev_anx_med <- leveneTest(anxiety ~ medhelp, data = sleepsurvey)
1540834640021:lev_anx_med
1540834646703:lev_anx_med[1]
1540834650318:lev_anx_med[2]
1540834652851:lev_anx_med[3]
1540834794501:lev_anx_med[[3]]
1540834798869:lev_anx_med[[3]][1]
1540834940604:ttest_anx_med <- t.test(anxiety ~ medhelp, var.equal = FALSE, data = sleepsurvey)
1540834940651:ttest_anx_med
1540834940702:d <-  2*ttest_anx_med[[1]]/sqrt(ttest_anx_med[[2]])
1540835024832:ttest_anx_med <- t.test(anxiety ~ medhelp, var.equal = FALSE, data = sleepsurvey)
1540835025920:ttest_anx_med
1540835026010:d <-  2*ttest_anx_med[[1]]/sqrt(ttest_anx_med[[2]])
1540835026016:d
1540835328446:#Conduct Levene's test for homogeneity of variance in library car
1540835328454:ltest<-car::leveneTest(anxiety ~ qualslp, data=sleepsurvey)
1540835328487:#Pr(F) is your probability
1540835328495:ltest
1540835328549:#Conduct the t-test from package stats
1540835328559:#You can use the var.equal = TRUE option to specify equal variances and a pooled variance estimate
1540835328568:#stats::t.test(tslfest~sex,var.equal=TRUE,data=sleepsurvey)
1540835402569:ttest_anx_med <- t.test(anxiety ~ medhelp, var.equal = FALSE, data = sleepsurvey, paired = FALSE)
1540835402608:ttest_anx_med
1540835402690:d <-  2*ttest_anx_med[[1]]/sqrt(ttest_anx_med[[2]])
1540835402696:d
1540835551201:lev_anx_qual <- leveneTest(anxiety ~ qualslp, data=sleepsurvey)
1540835551234:lev_anx_qual
1540835956962:bartlett.test(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540836078858:res.aov <- aov(sleepsurvey$anxiety ~ sleepsurvey$qualslp, data = sleepsurvey)
1540836079133:# Summary of the analysis
1540836079137:summary(res.aov)
1540836846654:# Summary of the analysis
1540836846656:res.avo
1540836851311:res.aov <- aov(sleepsurvey$anxiety ~ sleepsurvey$qualslp, data = sleepsurvey)
1540836852040:# Summary of the analysis
1540836852042:res.avo
1540836861944:# Summary of the analysis
1540836861947:res.aov
1540836917418:aov_anx_qual <- summary(aov(sleepsurvey$anxiety ~ sleepsurvey$qualslp, data = sleepsurvey))
1540836917429:aov_anx_qual
1540837053602:TukeyHSD(aov_anx_qual)
1540837074343:summary(aov_anx_qual)
1540837076833:aov_anx_qual <- aov(sleepsurvey$anxiety ~ sleepsurvey$qualslp, data = sleepsurvey)
1540837077078:summary(aov_anx_qual)
1540837080007:TukeyHSD(aov_anx_qual)
1540837419914:order(TukeyHSD(aov_anx_qual), 'p adj')
1540837450169:avo_tur <- TukeyHSD(aov_anx_qual)
1540837451979:avo_tur
1540837463275:avo_tur$p
1540837480928:avo_tur
1540837493537:avo_tur$upr
1540837504127:names(avo_tur)
1540837581293:avo_tur[1]
1540837590172:avo_tur[[1]]
1540837598571:avo_tur[[1]][1]
1540837614840:avo_tur[[1]]$upr
1540837625191:avo_tur[[1]][4]
1540837645946:summary(avo_tur)
1540837655655:avo_tur
1540837890760:summary(aov_anx_qual)[1]
1540837898557:summary(aov_anx_qual)[[1]]
1540837905820:summary(aov_anx_qual)[[1]][1]
1540837912270:summary(aov_anx_qual)[[1]][1,1]
1540837918864:summary(aov_anx_qual)[[1]][1,2]
1540837926051:summary(aov_anx_qual)[[1]][1,1]
1540837961612:aov_anx_qual <- aov(sleepsurvey$anxiety ~ sleepsurvey$qualslp, data = sleepsurvey)
1540837961835:aov_anx_qual_sum <- summary(aov_anx_qual)
1540837961848:aov_anx_qual_sum
1540837978938:aov_anx_qual <- aov(sleepsurvey$anxiety ~ sleepsurvey$qualslp, data = sleepsurvey)
1540837979126:summary(aov_anx_qual)
1540837981998:summary(aov_anx_qual)[[1]][1,1]
1540838029712:summary(aov_anx_qual)[[1]][2,1]
1540838077721:summary(aov_anx_qual)[[1]][1,4]
1540838091975:round(summary(aov_anx_qual)[[1]][1,4], 3)
1540839574667:round(summary(aov_anx_qual)[[1]][1,2], 3)
1540839600586:round(summary(aov_anx_qual)[[1]][1,2], 3)
1540839601168:round(summary(aov_anx_qual)[[1]][2,2], 3)
1540839609525:round(summary(aov_anx_qual)[[1]][2,2], 0)
1540839624943:round(summary(aov_anx_qual)[[1]][1,2], 0)/round(summary(aov_anx_qual)[[1]][2,2], 0)
1540840737772:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1540840737866:library(foreign)
1540840737885:library(car)
1540840739261:#library(dplyr)
1540840739264:library(ggplot2)
1540840739582:#library(psych)
1540840739585:#library(pastecs)
1540840739588:#library(semTools)
1540840739592:#library(car)
1540840739595:library(pander)
1540840739660:#Reading in the dataset
1540840739664:sleepsurveyfull <- as.data.frame(read.spss("sleep5ED.sav"))
1540840739700:library('plyr')
1540840739713:library('dplyr')
1540840739737:sleepsurvey<-select(sleepsurveyfull, id, anxiety, ess, depress, qualslp, medhelp)
1540840739754:head(sleepsurvey)
1540840739774:panderOptions('table.split.table', Inf)
1540840739778:my.data <- "
1540840739781:Concept                       | Variable Name     | Statistical Type  | Possible Values
1540840739784:Anxiety Level                 | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1540840739787:Sleepiness Level              | ess               | Scale             | Range from 0=low to
1540840739790:24=high daytime sleepiness
1540840739793:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe
1540840739796:depression
1540840739799:Quality of Sleep              | qualslp           | Nominal           | 1=very poor 2=poor 3=fair 4=good
1540840739802:5=very good 6=excellent
1540840739808:Medication used for Sleeping  | medhelp           | Nominal           | 1=yes 2=no "
1540840739845:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1540840739868:names(df) <- unname(as.list(df[1,])) # put headers on
1540840739876:df <- df[-1,] # remove first row
1540840739883:row.names(df)<-NULL
1540840739895:pander(df, style = 'rmarkdown')
1540840739920:len_tot <- count(sleepsurvey) #number of surveys
1540840739939:num_na_anxiety <- sum(is.na(sleepsurvey$anxiety)) #number of null values in anxiety
1540840739943:num_anx <- len_tot[[1]] - num_na_anxiety
1540840739948:range_anx <- range(sleepsurvey$anxiety, na.rm = TRUE)
1540840739963:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540840739971:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540840740873:gg <- gg + labs(x="HADS Anxiety Level")
1540840741041:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540840741065:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540840741086:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$anxiety, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540840741115:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1540840741822:qqnorm(sleepsurvey$anxiety, main="Figure X: QQPlot of HADS Anxiety Score")
1540840741858:qqline(sleepsurvey$anxiety, col=2)
1540840741887:tpskew_anx<-semTools::skew(sleepsurvey$anxiety)
1540840742051:tpkurt_anx<-semTools::kurtosis(sleepsurvey$anxiety)
1540840742066:scale_anx <-  scale(sleepsurvey$anxiety)
1540840742072:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1540840742078:hist(scale_anx, breaks = 30, col='blue')
1540840742094:abline(v=c(-3.29, 3.29))
1540840742283:num_na_ess <- sum(is.na(sleepsurvey$ess)) #number of null values in ess
1540840742287:num_ess <- len_tot[[1]] - num_na_ess
1540840742291:range_ess <- range(sleepsurvey$ess, na.rm = TRUE)
1540840742303:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540840742308:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$anxiety))
1540840742323:gg <- gg + labs(x="Epworth Sleepiness Scale")
1540840742411:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540840742573:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540840742692:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$ess, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540840742718:gg+ggtitle('Figure X: Distribution Epworth Sleepiness Scale')
1540840743209:qqnorm(sleepsurvey$ess, main="Figure X: QQPlot of Epworth Sleepiness Scale")
1540840743228:qqline(sleepsurvey$ess, col=2)
1540840743256:tpskew_ess<-semTools::skew(sleepsurvey$ess)
1540840743261:tpkurt_ess<-semTools::kurtosis(sleepsurvey$ess)
1540840743275:scale_ess <-  scale(sleepsurvey$ess)
1540840743281:range_scale_ess <- round(range(scale_ess, na.rm = TRUE), 2)
1540840743286:hist(scale_ess, breaks = 30)
1540840743323:num_na_depress <- sum(is.na(sleepsurvey$depress))
1540840743329:num_depress <- len_tot[[1]] - num_na_depress
1540840743334:range_depress <- range(sleepsurvey$depress, na.rm = TRUE)
1540840743353:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1540840743360:gg <- ggplot(sleepsurvey, aes(x=sleepsurvey$depress))
1540840743377:gg <- gg + labs(x="HADS Depression Level")
1540840743547:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1540840743594:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1540840743631:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleepsurvey$depress, na.rm=TRUE), sd=sd(sleepsurvey$anxiety, na.rm=TRUE)))
1540840743657:gg+ggtitle('Figure X: Distribution HADS Depression')
1540840744227:qqnorm(sleepsurvey$depress, main="Figure X: QQPlot of HADS Depression Score")
1540840744289:qqline(sleepsurvey$depress, col=2)
1540840744352:tpskew_depress<-semTools::skew(sleepsurvey$depress)
1540840744362:tpkurt_depress<-semTools::kurtosis(sleepsurvey$depress)
1540840744387:scale_depress <-  scale(sleepsurvey$depress)
1540840744397:range_scale_depress <- round(range(scale_depress, na.rm = TRUE), 2)
1540840744406:hist(scale_depress, breaks = 10)
1540840744469:num_qual <- summary(sleepsurvey$qualslp)
1540840744476:perc_qual <- round(100*num_qual/len_tot, 2)
1540840744483:table_qual <- rbind(num_qual, perc_qual)
1540840744489:table_qual
1540840744569:plot(sleepsurvey$qualslp)
1540840744614:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540840744896:bar <- ggplot(sleepsurvey, aes(qualslp, anxiety))
1540840744918:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Quality of Sleep")
1540840747467:num_med <- summary(sleepsurvey$medhelp)
1540840747473:perc_med <- round(100*num_med/len_tot, 2)
1540840747478:table_med <- rbind(num_med, perc_med)
1540840747639:table_med
1540840747647:plot(sleepsurvey$medhelp)
1540840747686:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$medhelp)
1540840747817:bar <- ggplot(sleepsurvey, aes(medhelp, anxiety))
1540840747836:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1540840748169:table_med_qual <- table(sleepsurvey$medhelp, sleepsurvey$qualslp)
1540840748176:table_med_qual
1540840748201:barplot(table_med_qual, main="Quality of Sleep by whether medication was used to aid sleep",
1540840748204:xlab="Quality of Sleep", col=c("darkblue","red"),
1540840748207:legend = rownames(table_med_qual), beside=TRUE)
1540840748246:scatter_anx_ess <- ggplot(sleepsurvey, aes(anxiety, ess))
1540840748265:scatter_anx_ess + geom_point() + geom_smooth(method = 'lm', colour = 'red', se = FALSE) + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1540840748568:pear_anx_ess <- stats::cor.test(sleepsurvey$anxiety, sleepsurvey$ess,  method='pearson')
1540840748582:pear_anx_ess
1540840748783:scatter_anx_ess <- ggplot(sleepsurvey, aes(anxiety, depress))
1540840748801:scatter_anx_ess + geom_point() + geom_smooth(method = 'lm', colour = 'red', se = FALSE) + labs(x = 'HADS Anxiety Score', y = 'HADS Depression Score')
1540840749247:pear_anx_depress <- stats::cor.test(sleepsurvey$anxiety, sleepsurvey$depress,  method='pearson')
1540840749260:pear_anx_depress
1540840749304:lev_anx_qual <- leveneTest(anxiety ~ qualslp, data=sleepsurvey)
1540840749317:lev_anx_qual
1540840749345:aov_anx_qual <- aov(sleepsurvey$anxiety ~ sleepsurvey$qualslp, data = sleepsurvey)
1540840749387:summary(aov_anx_qual)
1540840749430:round(summary(aov_anx_qual)[[1]][1,2], 0)/round(summary(aov_anx_qual)[[1]][2,2], 0)
1540840749600:avo_tur <- TukeyHSD(aov_anx_qual)
1540840749625:avo_tur
1540840750290:lev_anx_med <- leveneTest(anxiety ~ medhelp, data = sleepsurvey)
1540840750301:lev_anx_med
1540840750331:ttest_anx_med <- t.test(anxiety ~ medhelp, var.equal = FALSE, data = sleepsurvey, paired = FALSE)
1540840750345:ttest_anx_med
1540840750386:d <-  2*ttest_anx_med[[1]]/sqrt(ttest_anx_med[[2]])
1540840750392:d
1540840840539:avo_tur[1]
1540840849111:avo_tur[[1]]
1540840855311:avo_tur[[1]][1]
1540840865341:avo_tur[[1]][1,1]
1540840869974:avo_tur[[1]][3,1]
1540840880955:avo_tur
1540840893744:avo_tur[[1]][3,1]
1540842359731:desc.anx.qual <- psych::describeBy(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540842359858:desc.anx.qual
1540842388147:desc.anx.qual <- psych::describeBy(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540842388427:desc.anx.qual
1540842415775:desc.anx.qual
1540842488270:desc.anx.qual
1540842488410:desc.anx.qual[1]
1540842500616:desc.anx.qual
1540842500870:desc.anx.qual[1,3]
1540842514462:desc.anx.qual
1540842514700:desc.anx.qual[[1]]
1540842532642:desc.anx.qual
1540842541173:desc.anx.qual[[1]]
1540842557895:desc.anx.qual[[1]][1]
1540842570431:desc.anx.qual[[1]][[1]]
1540842576424:desc.anx.qual[[1]][[3]]
1540842639275:round(desc.anx.qual[[1]][[4]], 2)
1540842755334:round(desc.anx.qual[[6]][[4]], 2)
1540842761579:round(desc.anx.qual[[6]][[3]], 2)
1540842927432:round(desc.anx.qual[[5]][[3]], 2)
1540848355828:bartlett.test(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540848416298:bar_anx_qual[[3]][1]
1540848421720:bar_anx_qual <- bartlett.test(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540848421745:bar_anx_qual
1540848421995:bar_anx_qual[[3]][1]
1540848518015:bar_anx_qual <- bartlett.test(sleepsurvey$anxiety, sleepsurvey$qualslp)
1540848518042:bar_anx_qual
1540848692034:library(foreign)
1540848692044:library(car)
1540848692056:library(gmodels)
1540848703963:install.packages('gmodels')
1540848716145:library(foreign)
1540848716157:library(car)
1540848716168:library(gmodels)
1540848719399:#library(dplyr)
1540848719404:library(ggplot2)
1540848719460:#library(psych)
1540848719466:#library(pastecs)
1540848719471:#library(semTools)
1540848719476:library(pander)
1540848849565:gmodels::CrossTable(sleepsurvey$medhelp , sleepsurvey$qualslp, fisher = TRUE, chisq = TRUE, expected = TRUE, sresid = TRUE, format = "SPSS")
1540849879381:gmodels::CrossTable(sleepsurvey$qualslp, sleepsurvey$medhelp , fisher = TRUE, chisq = TRUE, expected = TRUE, sresid = TRUE, format = "SPSS")
1540850013462:fisher.test(sleepsurvey$qualslp, sleepsurvey$medhelp)
1541011915485:knitr::opts_chunk$set(echo = TRUE)
1541011918839:summary(cars)
1541011922418:plot(pressure)
1541012132524:setwd("C:/Users/Kate/OneDrive/Documents/R/Working with Data/wd_assign1/WWD_Assignment_Oct_2018")
1541012330862:df <- read.table('dublin employment trends.txt', sep = ':')
1541012330871:head(df)
1541012349644:df <- read.table('dublin employment trends.txt')
1541012349681:head(df)
1541012419177:knitr::opts_chunk$set(echo = TRUE)
1541012419186:df <- read.table('dublin employment trends.txt')
1541012419193:head(df)
1541012430017:df <- read.table('dublin employment trends.txt', sep = ':')
1541012430127:head(df)
1541012616735:df <- read.table('dublin employment trends.txt', sep = ':', header = 'TRUE')
1541012629398:df <- read.table('dublin employment trends.txt', sep = ':', header = TRUE)
1541012629405:head(df)
1541012664673:qplot ( data = df , x = Time , y = Employment ) + facet_grid ( sector ~ . )
1541012728461:library('ggplot2')
1541012743610:install.packages('ggplot2')
1541012752269:library('ggplot2')
1541012756235:knitr::opts_chunk$set(echo = TRUE)
1541012769146:df <- read.table('dublin employment trends.txt', sep = ':', header = TRUE)
1541012769153:head(df)
1541012775302:qplot ( data = df , x = Time , y = Employment ) + facet_grid ( sector ~ . )
1541012856862:qplot ( data = df , x = Time , y = Employment ) + facet_grid ( Sector ~ . )
1541012875123:qplot ( data = df , x = Time , y = Employment ) + facet_grid ( .~ Sector)
1541015048606:qplot ( data = df , x = Time , y = Employment ) + facet_grid ( .~ Sector, geom = 'smooth')
1541015075500:qplot ( data = df , x = Time , y = Employment ,geom = 'smooth') + facet_grid ( .~ Sector)
1541015143812:qplot ( data = df , x = Time , y = Employment) + geom_line() + facet_grid ( .~ Sector)
1541015285057:qplot ( data = df , x = Time , y = Employment) + geom_point(size = 2) + geom_line() + facet_grid ( .~ Sector)
1541015292452:qplot ( data = df , x = Time , y = Employment) + geom_point(size = 0.5) + geom_line() + facet_grid ( .~ Sector)
1541015297208:qplot ( data = df , x = Time , y = Employment) + geom_point(size = 0) + geom_line() + facet_grid ( .~ Sector)
1541015309788:qplot ( data = df , x = Time , y = Employment) + geom_point(size = -1) + geom_line() + facet_grid ( .~ Sector)
1541015329464:qplot ( data = df , x = Time , y = Employment) + geom_point(size = -1, colour = 'purple') + geom_line() + facet_grid ( .~ Sector)
1541015334705:qplot ( data = df , x = Time , y = Employment) + geom_point(size = -1, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541015340207:qplot ( data = df , x = Time , y = Employment) + geom_point(size = 10, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541015345907:qplot ( data = df , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541015370976:?ggplot
1541015601102:employ_extract <- read.table('dublin employment trends.txt', sep = ':', header = TRUE)
1541015601110:qplot ( data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541015639532:employ_extract
1541015665638:employ_extract <- read.table('dublin employment trends.txt', sep = ':', header = TRUE)
1541015665638:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541015670364:employ_extract
1541015767648:str(employ_extract)
1541015793846:head(employ_extract)
1541016050991:employ_extract$Time
1541016062975:employ_extract$Employment
1541016071769:employ_extract$Sector
1541016081539:employ_extract$QuarterYear
1541016099160:employ_extract <- read.table('dublin employment trends.txt', sep = ':')#, header = TRUE)
1541016099160:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541016107978:employ_extract <- read.table('dublin employment trends.txt', sep = ':', header = TRUE)
1541016107978:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541016142396:?read.table
1541016677583:employ_extract <- read.table('dublin employment trends.txt', sep = ':', skip = 1)#, header = TRUE)
1541016682781:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541016689915:head(employ_extract)
1541016713893:employ_extract <- read.table('dublin employment trends.txt', sep = ':', skip = 1, allowEscapes = FALSE)#, header = TRUE)
1541016713893:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541016718931:head(employ_extract)
1541016726983:employ_extract <- read.table('dublin employment trends.txt', sep = ':', skip = 1, allowEscapes = TRUE)#, header = TRUE)
1541016726983:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541016731752:head(employ_extract)
1541016853223:?readRDS
1541016918569:?read_csv
1541016928035:library('readr')
1541016934719:install.packages('readr')
1541017016490:read.fwf('dublin employment trends.txt', skip = 1, widths = c(4, 10, -3, 1),
1541017016593:col.names = c('price', 'stock.item', 'purchased'),
1541017016596:stringsAsFactors = F)
1541017095426:tx  <- readLines('dublin employment trends.txt')
1541017114721:tx2  <- gsub(pattern = "\n", replace = ":", x = tx)
1541017130520:writeLines(tx2, con="dublin employment trends2.txt")
1541017171659:employ_extract <- read.table('dublin employment trends2.txt', sep = ':', header = TRUE)
1541017173571:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541017183734:head(employ_extract)
1541017219396:tx  <- readLines('dublin employment trends.txt')
1541017219396:tx2  <- gsub(pattern = "\n", replace = ":", x = tx)
1541017219529:writeLines(tx2, con="dublin employment trends2.txt")
1541017243305:tx  <- readLines('dublin employment trends.txt')
1541017243305:tx2  <- gsub(pattern = "\n", replace = ":", x = tx)
1541017243453:writeLines(tx2, con="dublin employment trends2.txt")
1541017251113:employ_extract <- read.table('dublin employment trends2.txt', sep = ':', header = TRUE)
1541017251120:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541017264545:head(employ_extract)
1541017264545:str(employ_extract)
1541017450737:tx  <- readLines('dublin employment trends.txt')
1541017450807:tx2  <- gsub(pattern = "\\n", replace = ":", x = tx)
1541017450814:writeLines(tx2, con="dublin employment trends3.txt")
1541017473883:employ_extract <- read.table('dublin employment trends3.txt', sep = ':', header = TRUE)
1541017473883:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541017480106:head(employ_extract)
1541017480113:str(employ_extract)
1541017495158:tx  <- readLines('dublin employment trends.txt')
1541017495221:tx2  <- gsub(pattern = \\n, replace = ":", x = tx)
1541017530534:tx  <- readLines('dublin employment trends.txt')
1541017530649:tx2  <- gsub(pattern = "\\n", replace = ":", x = tx)
1541017530663:writeLines(tx2, con="dublin employment trends3.txt")
1541017535829:employ_extract <- read.table('dublin employment trends3.txt', sep = ':', header = TRUE)
1541017535829:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541017539407:head(employ_extract)
1541017539407:str(employ_extract)
1541017775487:tx  <- readLines('dublin employment trends.txt')
1541017775554:tx2  <- gsub(pattern = "'", replace = ":", x = tx)
1541017775569:writeLines(tx2, con="dublin employment trends3.txt")
1541018171693:tx  <- readLines('dublin employment trends.txt')
1541018171756:tx2  <- gsub(pattern = "n", replace = ":", x = tx)
1541018171874:writeLines(tx2, con="dublin employment trends3.txt")
1541018176666:employ_extract <- read.table('dublin employment trends3.txt', sep = ':', header = TRUE)
1541018228633:tx  <- readLines('dublin employment trends.txt')
1541018228699:tx2  <- gsub(pattern = "\n", replace = ":", x = tx)
1541018228819:writeLines(tx2, con="dublin employment trends3.txt")
1541018233534:employ_extract <- read.table('dublin employment trends3.txt', sep = ':', header = TRUE)
1541018233545:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541018249228:head(employ_extract)
1541018249237:str(employ_extract)
1541018264537:tx  <- readLines('dublin employment trends.txt')
1541018264652:tx2  <- gsub(pattern = "n", replace = "", x = tx)
1541018264721:writeLines(tx2, con="dublin employment trends3.txt")
1541018269912:employ_extract <- read.table('dublin employment trends3.txt', sep = ':', header = TRUE)
1541018269920:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541018275629:employ_extract <- read.table('dublin employment trends3.txt', sep = ':', header = TRUE)
1541018275636:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541018278658:head(employ_extract)
1541018278668:str(employ_extract)
1541018339822:employ_extract <- read.table('dublin employment trends.txt', sep = ':', header = TRUE, allowEscapes = FALSE)
1541018339829:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541018345938:head(employ_extract)
1541018352070:employ_extract <- read.table('dublin employment trends.txt', sep = ':', header = TRUE, allowEscapes = TRUE)
1541018352078:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541018356850:head(employ_extract)
1541018436380:?gsub
1541018554081:employ_extract2 <- read.table('dublin employment trends.txt')
1541018560411:employ_extract2
1541018660536:?stringr
1541018680110:?str_split_fixed
1541018749560:employ_extract2 <- read.table('dublin employment trends.txt')
1541018749560:employ_extract2
1541018749670:employ_extract3 <- str_split(employ_extract2, ':')
1541018755083:employ_extract2 <- read.table('dublin employment trends.txt')
1541018755083:employ_extract2
1541018755098:employ_extract3 <- strsplit(employ_extract2, ':')
1541018800565:employ_extract3 <- strsplit(employ_extract2, ":")
1541018858659:employ_extract2 <- read.table('dublin employment trends.txt')
1541018860149:employ_extract3 <- as.character(employ_extract2)
1541018862375:employ_extract3
1541018867110:employ_extract4 <- strsplit(employ_extract3, ":")
1541018868868:employ_extract4
1541018903784:?write.table
1541018977687:employ_extract2 <- read.table('dublin employment trends.txt')
1541018977687:write.table(employ_extract2, file = 'dublin employment trends10.txt')
1541019022333:employ_extract10 <- read.table('dublin employment trends10.txt', sep = ':', header = TRUE)
1541019026989:employ_extract10
1541019343160:?read_delim
1541019347351:??read_delim
1541019363952:install.packages("readr")
1541019369897:?read_delim
1541019379211:library(readr)
1541019382052:?read_delim
1541019420631:read_delim('dublin employment trends.txt', ':')
1541019479435:employ_extract <- read_delim('dublin employment trends.txt', ':')
1541019479554:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541019489955:head(employ_extract)
1541019489965:str(employ_extract)
1541019588990:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector) + geom(smooth)
1541019613860:qplot(data = employ_extract , x = Time , y = Employment, geom = 'smooth') + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541019628495:qplot(data = employ_extract , x = Time , y = Employment) + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541019649830:qplot(data = employ_extract , x = Time , y = Employment, geom = 'line') + geom_point(size = 0, colour = 'red') + geom_line() + facet_grid ( .~ Sector)
1541019658110:qplot(data = employ_extract , x = Time , y = Employment, geom = 'line') + facet_grid ( .~ Sector)
1541019858521:employ_extract <- read_delim('dublin employment trends.txt', ':')
1541019858531:qplot(data = employ_extract , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006−2016") + facet_grid ( .~ Sector)
1541019981644:employ_extract <- read_delim('dublin employment trends.txt', ':')
1541019981762:qplot(data = employ_extract , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006−2016") + facet_grid ( .~ Sector)
1541020365549:prop_read <- read_tsv('dublin property trends.txt', ':')
1541020385266:prop_read <- read_tsv('dublin property trends.txt')
1541020391766:prop_read
1541020454860:qplot(data = prop_read , x = Time , y = Trend, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006−2016") + facet_grid ( .~ Category)
1541020501861:qplot(data = prop_read , x = Time , y = Trend, geom = 'line', colour = 'Category', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006−2016")
1541020528709:qplot(data = prop_read , x = Time , y = Trend, geom = 'line', colour = Category, xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006−2016")
1541020570629:prop_read <- read_tsv('dublin property trends.txt')
1541020570747:qplot(data = prop_read , x = Time , y = Trend, geom = 'line', colour = Category, xlab = "Time", ylab = "Trend", main = "Dublin Property Trends: 2007 - 2016")
1541020606522:prop_read <- read_tsv('dublin property trends.txt')
1541020606601:qplot(data = prop_read , x = Time , y = Trend, geom = 'line', colour = Category, xlab = "Time", ylab = "Trend", main = "Dublin Property Trends: 2007 - 2016")
1541021324847:url <- 'http://www.revenue.ie/en/corporate/documents/statistics/farmers/farmer-income-county.csv'
1541021324851:farmInc <- read.csv(url, stringsAsFactors = FALSE)
1541021337908:url <- 'http://www.revenue.ie/en/corporate/documents/statistics/farmers/farmer-income-county.csv'
1541021337912:farmInc <- read.csv(url, stringsAsFactors = FALSE)
1541021337969:farmInc
1541021416784:?rvest
1541021419596:??rvest
1541021443007:library(jsonlite)
1541021465972:?rvest
1541021500939:library(rvest)
1541021505254:library('rvest')
1541021515940:install.packages('rvest')
1541021522101:library('rvest')
1541021542219:?rvest
1541021692627:install.packages('rnoaa')
1541021712997:library('ggplot2')
1541021713165:library('rnoaa')
1541022092747:api_key = '174980a157364085f718726daecb380b7aeaf5b4'
1541022094187:GET https://api.jcdecaux.com/vls/v1/stations?contract={contract_name}&apiKey={api_key}
1541022232905:url <- 'https://api.jcdecaux.com/vls/v1/stations?contract=Paris&apiKey=174980a157364085f718726daecb380b7aeaf5b4'
1541022232905:farmInc <- read.csv(url, stringsAsFactors = FALSE)
1541022359272:url <- 'https://api.jcdecaux.com/vls/v1/contracts HTTP/1.1'
1541022359273:farmInc <- read.csv(url, stringsAsFactors = FALSE)
1541104863832:knitr::opts_chunk$set(echo = TRUE)
1541104863988:x <- GET('https://api.jcdecaux.com/vls/v1/stations?contract=Dublin&apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541104890846:library('httr')
1541104895256:x <- GET('https://api.jcdecaux.com/vls/v1/stations?contract=Dublin&apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541104907882:content(x)
1541244046260:knitr::opts_chunk$set(echo = TRUE)
1541244046351:x <- GET(https://api.jcdecaux.com/vls/v1/stations?contract={contract_name}&apiKey={174980a157364085f718726daecb380b7aeaf5b4}
1541244073877:x <- GET(https://api.jcdecaux.com/vls/v1/stations?contract={'Dublin'}&apiKey={'174980a157364085f718726daecb380b7aeaf5b4'}
1541244102800:x <- GET('https://api.jcdecaux.com/vls/v1/stations?contract={Dublin}&apiKey={174980a157364085f718726daecb380b7aeaf5b4}
1541244108412:x
1541244132523:''
1541244141332:x <- GET('https://api.jcdecaux.com/vls/v1/stations?contract={Dublin}&apiKey={174980a157364085f718726daecb380b7aeaf5b4}')
1541244177274:library('httr')
1541244179806:x <- GET('https://api.jcdecaux.com/vls/v1/stations?contract={Dublin}&apiKey={174980a157364085f718726daecb380b7aeaf5b4}')
1541244181790:content(x)
1541244336612:content(x)
1541245532361:library('httr')
1541245536305:library('httr')
1541245539068:x <- GET('https://api.jcdecaux.com/vls/v1/stations?contract={Dublin}&apiKey={174980a157364085f718726daecb380b7aeaf5b4}')
1541245545119:x
1541245550753:content(x)
1541245560125:head(content(x))
1541245566427:content(x)
1541245743851:x <- GET('https://api.jcdecaux.com/vls/v1/stations?contract=Dublin&apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541245748774:content(x)
1541245938755:GET('https://api.jcdecaux.com/vls/v1/stations HTTP/1.1')
1541245962240:stations <- GET('https://api.jcdecaux.com/vls/v1/stations HTTP/1.1')
1541245963552:content(stations)
1541245972767:stations <- GET('https://api.jcdecaux.com/vls/v1/stations')
1541245974181:content(stations)
1541245987580:stations <- GET('https://api.jcdecaux.com/vls/v1/stations', 'HTTP/1.1')
1541246052167:stations <- GET('https://api.jcdecaux.com/vls/v1/stations', 'HTTP/1.1')
1541246053265:content(stations)
1541246063394:stations <- GET('https://api.jcdecaux.com/vls/v1/stations', config = ('HTTP/1.1'))
1541246132672:stations <- GET('https://api.jcdecaux.com/vls/v1/stations&apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541246134922:content(stations)
1541246148595:stations <- GET('https://api.jcdecaux.com/vls/v1/stations?apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541246150114:content(stations)
1541246267281:content(stations, as = TEXT)
1541246278115:content(stations, as = 'TEXT')
1541246287551:content(stations, as = text)
1541246300781:content(stations, as = 'text')
1541246316553:df <- content(stations, as = 'text')
1541246329942:head(df)
1541246500271:http_type(stations)
1541246577331:library('jsonlite')
1541246589709:jsonlite::fromJSON(content(stations, "text"), simplifyVector = FALSE)
1541246699771:jsonlite::fromJSON(content(stations, "text"), simplifyVector = TRUE)
1541246745320:stations <- GET('https://api.jcdecaux.com/vls/v1/stations?apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541246745921:http_type(stations)
1541246745928:stations.df <- jsonlite::fromJSON(content(stations, "text"), simplifyVector = TRUE)
1541246746083:head(stations.df)
1541246798748:unique(stations.df$contract_name)
1541246842962:stations.df
1541247093867:count(stations.df, wt_var = stations.df$contract_name)
1541247112760:library('plyr)
1541247119983:library('plyr')
1541247128547:library('plyr')
1541247131367:stations <- GET('https://api.jcdecaux.com/vls/v1/stations?apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541247133392:http_type(stations)
1541247134854:stations.df <- jsonlite::fromJSON(content(stations, "text"), simplifyVector = TRUE)
1541247137295:stations.df
1541247140248:count(stations.df, wt_var = stations.df$contract_name)
1541247177860:stations.df
1541247189509:count(stations.df, vars = stations.df$name, wt_var = stations.df$contract_name)
1541247199898:stations.df
1541247200050:unique(stations.df$contract_name)
1541247200082:count(stations.df, vars = stations.df$name, wt_var = stations.df$contract_name)
1541247232060:count(stations.df, vars = stations.df$contract_name)
1541247392158:count(stations.df, vars = 'contract_name')
1541247437829:?order
1541247473732:order(count(stations.df, vars = 'contract_name'), freq)
1541247547468:station.list <- count(stations.df, vars = 'contract_name')
1541247571451:with(station.list, order(freq))
1541247588351:station.list[with(station.list, order(freq))]
1541247631633:library('plyr')
1541247631633:stations <- GET('https://api.jcdecaux.com/vls/v1/stations?apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541247632105:http_type(stations)
1541247632397:stations.df <- jsonlite::fromJSON(content(stations, "text"), simplifyVector = TRUE)
1541247632501:count(stations.df, vars = 'contract_name')
1541247881713:x <- GET('https://api.jcdecaux.com/vls/v1/stations?contract=Dublin&apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541247882051:content(x)
1541247921283:bike <- GET('https://api.jcdecaux.com/vls/v1/stations?contract=Dublin&apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541247924188:http_type(bike)
1541247943722:bike <- jsonlite::fromJSON(content(bike, "text"), simplifyVector = TRUE)
1541247948176:bike
1541247962704:bike <- GET('https://api.jcdecaux.com/vls/v1/stations?contract=Dublin&apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541247962886:http_type(bike)
1541247962891:bike.df <- jsonlite::fromJSON(content(bike, "text"), simplifyVector = TRUE)
1541247962913:bike.df
1541248020426:summerise(bike.df)
1541248024352:summarise(bike.df)
1541248035940:typeof(bike.df)
1541248044155:is.data.frame(bike.df)
1541248059831:summarise(bike.df)
1541248076895:str(bike.df)
1541254460163:install.packages('car')
1541254484517:install.packages('gmodels')
1541254506270:install.packages('pander')
1541254535024:install.packages('semtools')
1541254540485:install.packages('semTools')
1541254564563:install.packages('psyc')
1541254584006:install.packages('psych')
1541266613891:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541266613942:head(sleepsurveyfull)
1541266616636:sleepsurveyfull <- as.data.frame(read.spss("sleep5ED.sav"))
1541266617755:head(sleepsurveyfull)
1541266622516:#R packages required:
1541266622526:library(foreign)
1541266622537:library(car)
1541266622861:library(gmodels)
1541266623036:library(pander)
1541266623073:library(ggplot2)
1541266623293:library(psych)
1541266623344:library(semTools)
1541266623383:library(plyr)
1541266623385:library(dplyr)
1541266630010:sleepsurveyfull <- as.data.frame(read.spss("sleep5ED.sav"))
1541266630104:head(sleepsurveyfull)
1541266737850:sleepsurvey<-select(sleepsurveyfull, id, anxiety, trubslep, trubstay, qualslp, ess, fatigue, tired, depress)
1541266737850:head(sleepsurvey)
1541266774101:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541266776511:#R packages required:
1541266776513:library(foreign)
1541266776513:library(car)
1541266776513:library(gmodels)
1541266776522:library(pander)
1541266776525:library(ggplot2)
1541266776527:library(psych)
1541266776529:library(semTools)
1541266776531:library(plyr)
1541266776531:library(dplyr)
1541266784114:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav"))
1541266784402:head(sleep.survey.full)
1541266789629:sleep.survey<-select(sleepsurveyfull, id, anxiety, trubslep, trubstay, qualslp, ess, fatigue, tired, depress)
1541266789638:head(sleep.survey)
1541266801162:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav"))
1541267215267:panderOptions('table.split.table', Inf)
1541267215267:my.data <- "
1541267215267:Concept                             | Variable Name     | Statistical Type  | Possible Values
1541267215267:Anxiety Level                       | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1541267215267:Trouble falling asleep?             | trubslep          | Nominal           | 1=yes 2=no
1541267215267:Trouble staying asleep?             | trubstay          | Nominal           | 1=yes 2=no
1541267215283:Quality of Sleep                    | qualslp           | Ordinal           | 1=very poor, 2=poor, 3=fair, 4=good, 5=very good, 6=excellent
1541267215388:Sleepiness Level                    | ess               | Scale             | Range from 0=low to 24=high daytime sleepiness
1541267215391:Rate level of fatigue over last week| fatigue           | Ordinal           | 1=not at all 10=to a great extent
1541267215393:Rate how tired over last week       | tired             | Ordinal           | 1=not at all 10=to a great extent
1541267215395:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe depression
1541267215398:"
1541267215402:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1541267215409:names(df) <- unname(as.list(df[1,])) # put headers on
1541267215586:row.names(df)<-NULL
1541267215601:pander(df, style = 'rmarkdown')
1541267296919:panderOptions('table.split.table', Inf)
1541267296919:my.data <- "
1541267296919:Concept                             | Variable Name     | Statistical Type  | Possible Values
1541267296919:Anxiety Level                       | anxiety           | Scale             | Range from 0=no anxiety to 21=severe anxiety
1541267296919:Trouble falling asleep?             | trubslep          | Nominal           | 1=yes 2=no
1541267296919:Trouble staying asleep?             | trubstay          | Nominal           | 1=yes 2=no
1541267296934:Quality of Sleep                    | qualslp           | Ordinal           | 1=very poor, 2=poor, 3=fair, 4=good, 5=very good, 6=excellent
1541267296934:Sleepiness Level                    | ess               | Scale             | Range from 0=low to 24=high daytime sleepiness
1541267297137:Rate level of fatigue over last week| fatigue           | Ordinal           | 1=not at all 10=to a great extent
1541267297139:Rate how tired over last week       | tired             | Ordinal           | 1=not at all 10=to a great extent
1541267297141:Depression Level              | depress           | Scale             | Range from 0=no depression to 21=severe depression
1541267297143:"
1541267297146:df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1541267297164:names(df) <- unname(as.list(df[1,])) # put headers on
1541267297170:df <- df[-1,] # remove first row
1541267297176:row.names(df)<-NULL
1541267297181:pander(df, style = 'rmarkdown')
1541267611259:panderOptions('table.split.table', Inf)
1541267611259:var.desc <- "
1541267611259:Concept                             |Variable Name |Statistical Type  | Possible Values
1541267611259:Anxiety Level                       |anxiety       |Scale             | Range from 0=no anxiety to 21=severe anxiety
1541267611259:Trouble falling asleep?             |trubslep      |Nominal           | 1=yes 2=no
1541267611259:Trouble staying asleep?             |trubstay      |Nominal           | 1=yes 2=no
1541267611274:Quality of Sleep                    |qualslp       |Ordinal           | 1=very poor, 2=poor, 3=fair, 4=good, 5=very good, 6=excellent
1541267611274:Sleepiness Level                    |ess           |Scale             | Range from 0=low to 24=high daytime sleepiness
1541267611274:Rate level of fatigue over last week|fatigue        |Ordinal           | 1=not at all 10=to a great extent
1541267611274:Rate how tired over last week       |tired         |Ordinal           | 1=not at all 10=to a great extent
1541267611274:Depression Level                    |depress       |Scale             | Range from 0=no depression to 21=severe depression
1541267611274:"
1541267611290:var.desc.df <- read.delim(textConnection(var.desc),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1541267611290:names(var.desc.df) <- unname(as.list(df[1,])) # put headers on
1541267611290:var.desc.df <- var.desc.df[-1,] # remove first row
1541267611305:row.names(var.desc.df)<-NULL
1541267611305:pander(var.desc.df, style = 'rmarkdown')
1541268916273:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541268916273:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541268916396:gg <- gg + labs(x="HADS Anxiety Level")
1541268916487:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1541268916506:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541268916575:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541268934958:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541268934958:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541268935078:gg <- gg + labs(x="HADS Anxiety Level")
1541268935091:gg <- gg + geom_histogram(binwidth=1, colour="blue", aes(y=..density.., fill=..count..))
1541268935110:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1541268935155:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541268935174:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269022421:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269022426:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269022541:gg <- gg + labs(x="HADS Anxiety Level")
1541269022554:gg <- gg + geom_histogram(binwidth=1, colour="blue", aes(y=..density.., fill=..count..))
1541269022573:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="dodgerblue4")
1541269022589:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269022617:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269062164:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269062164:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269062184:gg <- gg + labs(x="HADS Anxiety Level")
1541269062199:gg <- gg + geom_histogram(binwidth=1, colour="blue", aes(y=..density.., fill=..count..))
1541269062217:gg <- gg + scale_fill_gradient("Count", low="cyan1", high="dodgerblue4")
1541269062240:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269062260:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269075021:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269075023:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269075146:gg <- gg + labs(x="HADS Anxiety Level")
1541269075167:gg <- gg + geom_histogram(binwidth=1, aes(y=..density.., fill=..count..))
1541269075311:gg <- gg + scale_fill_gradient("Count", low="cyan1", high="dodgerblue4")
1541269075328:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269075346:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269105487:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269105492:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269105506:gg <- gg + labs(x="HADS Anxiety Level")
1541269105513:gg <- gg + geom_histogram(binwidth=1, colour="blue", aes(y=..density.., fill=..count..))
1541269105545:gg <- gg + scale_fill_gradient("Count", low="cyan1", high="royalblue4")
1541269105561:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269105571:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269150675:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269150675:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269150691:gg <- gg + labs(x="HADS Anxiety Level")
1541269150706:gg <- gg + geom_histogram(binwidth=1, colour="blue", aes(y=..density.., fill=..count..))
1541269150722:gg <- gg + scale_fill_gradient("Count", low="cyan1", high="mediumvioletred")
1541269150753:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269150768:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269163898:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269163904:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269164032:gg <- gg + labs(x="HADS Anxiety Level")
1541269164046:gg <- gg + geom_histogram(binwidth=1, colour="blue", aes(y=..density.., fill=..count..))
1541269164065:gg <- gg + scale_fill_gradient("Count", low="plum2", high="mediumvioletred")
1541269164081:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269164101:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269188034:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269188034:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269188165:gg <- gg + labs(x="HADS Anxiety Level")
1541269188179:gg <- gg + geom_histogram(binwidth=1, colour="blue", aes(y=..density.., fill=..count..))
1541269188197:gg <- gg + scale_fill_gradient("Count", low="thistle2", high="mediumvioletred")
1541269188219:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269188239:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269215034:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269215034:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269215049:gg <- gg + labs(x="HADS Anxiety Level")
1541269215065:gg <- gg + geom_histogram(binwidth=1, colour="blue", aes(y=..density.., fill=..count..))
1541269215081:gg <- gg + scale_fill_gradient("Count", low="thistle2", high="darkorcid4")
1541269225692:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269225694:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269225897:gg <- gg + labs(x="HADS Anxiety Level")
1541269225911:gg <- gg + geom_histogram(binwidth=1, colour="blue", aes(y=..density.., fill=..count..))
1541269225937:gg <- gg + scale_fill_gradient("Count", low="thistle2", high="darkorchid4")
1541269225955:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269225974:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269274041:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269274046:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269274061:gg <- gg + labs(x="HADS Anxiety Level")
1541269274074:gg <- gg + geom_histogram(binwidth=1, colour="blue", aes(y=..density.., fill=..count..))
1541269274103:gg <- gg + scale_fill_gradient("Count", low="thistle1", high="darkorchid4")
1541269274120:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269274139:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269313379:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269313384:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269313500:gg <- gg + labs(x="HADS Anxiety Level")
1541269313627:gg <- gg + geom_histogram(binwidth=1, colour="blue", aes(y=..density.., fill=..count..))
1541269313646:gg <- gg + scale_fill_gradient("Count", low="thistle1", high="violetred4")
1541269313662:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269313682:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269343691:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269343799:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269343815:gg <- gg + labs(x="HADS Anxiety Level")
1541269343830:gg <- gg + geom_histogram(binwidth=1, colour="blue", aes(y=..density.., fill=..count..))
1541269343850:gg <- gg + scale_fill_gradient("Count", low="thistle1", high="darkviolet")
1541269343868:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269343891:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269384007:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269384012:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269384126:gg <- gg + labs(x="HADS Anxiety Level")
1541269384140:gg <- gg + geom_histogram(binwidth=1, colour="blue", aes(y=..density.., fill=..count..))
1541269384259:gg <- gg + scale_fill_gradient("Count", low="lavenderblush1", high="darkviolet")
1541269384275:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269384294:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269398415:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269398420:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269398434:gg <- gg + labs(x="HADS Anxiety Level")
1541269398549:gg <- gg + geom_histogram(binwidth=1, colour="purple", aes(y=..density.., fill=..count..))
1541269398567:gg <- gg + scale_fill_gradient("Count", low="lavenderblush1", high="darkviolet")
1541269398685:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269398710:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269410379:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269410384:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269410499:gg <- gg + labs(x="HADS Anxiety Level")
1541269410515:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541269410534:gg <- gg + scale_fill_gradient("Count", low="lavenderblush1", high="darkviolet")
1541269410549:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269410579:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269437725:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269437731:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269437846:gg <- gg + labs(x="HADS Anxiety Level")
1541269437860:gg <- gg + geom_histogram(binwidth=1, colour="gray54", aes(y=..density.., fill=..count..))
1541269437980:gg <- gg + scale_fill_gradient("Count", low="lavenderblush1", high="darkviolet")
1541269438001:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269438020:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269462476:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269462481:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269462494:gg <- gg + labs(x="HADS Anxiety Level")
1541269462507:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541269462530:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541269462546:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269462564:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269488815:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269488820:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269488934:gg <- gg + labs(x="HADS Anxiety Level")
1541269488953:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541269488971:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541269488987:gg <- gg + stat_function(fun=dnorm, color="mediumspringgreen",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269489007:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269515598:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269515603:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269515622:gg <- gg + labs(x="HADS Anxiety Level")
1541269515635:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541269515652:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541269515668:gg <- gg + stat_function(fun=dnorm, color="green4",args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269515687:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269559813:?stat_function
1541269597778:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269597778:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269597793:gg <- gg + labs(x="HADS Anxiety Level")
1541269597809:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541269597825:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541269597840:gg <- gg + stat_function(fun=dnorm, color="green4", size=10, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269597856:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269604647:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269604647:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269604857:gg <- gg + labs(x="HADS Anxiety Level")
1541269604972:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541269604990:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541269605005:gg <- gg + stat_function(fun=dnorm, color="green4", size=3, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269605023:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269610193:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269610195:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269610367:gg <- gg + labs(x="HADS Anxiety Level")
1541269610389:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541269610407:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541269610423:gg <- gg + stat_function(fun=dnorm, color="green4", size=2, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269610544:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269615284:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269615285:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541269615454:gg <- gg + labs(x="HADS Anxiety Level")
1541269615466:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541269615484:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541269615499:gg <- gg + stat_function(fun=dnorm, color="green4", size=1, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269615518:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269651578:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541269651647:gg <- gg + labs(x="HADS Anxiety Level")
1541269651662:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541269651680:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541269651697:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541269651717:gg+ggtitle('Figure X: Distribution HADS Anxiety')
1541269673964:qqnorm(sleep.survey$anxiety, main="Figure X: QQPlot of HADS Anxiety Score")
1541269673981:qqline(sleep.survey$anxiety, col=2)
1541269982332:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541269982335:devtools::install_github("github mkoohafkan/kfigr")
1541269991676:install.packages(devtoole)
1541269994051:install.packages(devtools)
1541270000581:install.packages('devtools')
1541270007710:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541270007713:devtools::install_github("github mkoohafkan/kfigr")
1541270042113:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541270043741:devtools::install_github("github mkoohafkan/kfigr")
1541270249072:install.packages('knitr')
1541270253659:install.packages("knitr")
1541270259188:install.packages("knitr")
1541270263005:install.packages("knitr")
1541270270648:install.packages("knitr")
1541270279256:install.packages("knitr")
1541270283005:install.packages("knitr")
1541270289562:install.packages("knitr")
1541270292725:install.packages("knitr")
1541270298533:devtools::install_github("github mkoohafkan/kfigr")
1541270325504:install.packages("knitr")
1541270328532:install.packages("knitr")
1541270331719:install.packages("knitr")
1541270512759:install.packages("kfigr")
1541270521225:devtools::install_github("github mkoohafkan/kfigr")
1541270541379:library('kfigr')
1541270573719:?`kfigr-package`
1541270685866:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541270712321:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541270726849:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541270728976:library(foreign)
1541270729041:library(car)
1541270729173:library(gmodels)
1541270729258:library(pander)
1541270729293:library(ggplot2)
1541270729303:library(psych)
1541270729367:library(semTools)
1541270729514:library(plyr)
1541270729524:library(dplyr)
1541270806917:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541270809099:library(foreign)
1541270809102:library(car)
1541270809105:library(gmodels)
1541270809108:library(pander)
1541270809111:library(ggplot2)
1541270809114:library(psych)
1541270809220:library(plyr)
1541270809223:library(dplyr)
1541270834449:library(foreign)
1541270834452:library(car)
1541270834455:library(gmodels)
1541270834458:library(pander)
1541270834460:library(ggplot2)
1541270834463:library(psych)
1541270834466:library(semTools)
1541270834469:library(plyr)
1541270834471:library(dplyr)
1541270841666:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541270847284:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav")) #read in the dataset
1541270847430:sleep.survey<-select(sleep.survey.full, id, anxiety, trubslep, trubstay, qualslp, ess, fatigue, tired, depress) #select variables of interest
1541270847442:panderOptions('table.split.table', Inf)
1541270847445:var.desc <- "
1541270847447:Concept                             |Variable Name |Statistical Type  | Possible Values
1541270847449:Anxiety Level                       |anxiety       |Scale             | Range from 0=no anxiety to 21=severe anxiety
1541270847452:Trouble falling asleep?             |trubslep      |Nominal           | 1=yes 2=no
1541270847455:Trouble staying asleep?             |trubstay      |Nominal           | 1=yes 2=no
1541270847460:Quality of Sleep                    |qualslp       |Ordinal           | 1=very poor, 2=poor, 3=fair, 4=good, 5=very good, 6=excellent
1541270847462:Sleepiness Level                    |ess           |Scale             | Range from 0=low to 24=high daytime sleepiness
1541270847464:Rate level of fatigue over last week|fatigue        |Ordinal           | 1=not at all 10=to a great extent
1541270847467:Rate how tired over last week       |tired         |Ordinal           | 1=not at all 10=to a great extent
1541270847469:Depression Level                    |depress       |Scale             | Range from 0=no depression to 21=severe depression
1541270847471:"
1541270847475:var.desc.df <- read.delim(textConnection(var.desc),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1541270847579:names(var.desc.df) <- unname(as.list(var.desc.df[1,])) # put headers on
1541270847585:var.desc.df <- var.desc.df[-1,] # remove first row
1541270847590:row.names(var.desc.df)<-NULL
1541270847596:pander(var.desc.df, style = 'rmarkdown')
1541270851755:len_tot <- count(sleep.survey) #number of surveys
1541270857570:num_na_anxiety <- sum(is.na(sleep.survey$anxiety)) #number of null values in anxiety
1541270857574:num_anx <- len_tot[[1]] - num_na_anxiety #number of non-null values in anxiety
1541270857578:range_anx <- range(sleep.survey$anxiety, na.rm = TRUE) #range of anxiety values excluding nulls
1541270860630:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541270860636:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541270860805:gg <- gg + labs(x="HADS Anxiety Level")
1541270860819:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541270860838:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541270860855:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541270860877:gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1541270864130:qqnorm(sleep.survey$anxiety, main="Figure 2: QQPlot of HADS Anxiety Score")
1541270864260:qqline(sleep.survey$anxiety, col=2)
1541270989850:num_na_anxiety <- sum(is.na(sleep.survey$anxiety)) #number of null values in anxiety
1541270989853:num_anx <- len_tot[[1]] - num_na_anxiety #number of non-null values in anxiety
1541270989857:range_anx <- range(sleep.survey$anxiety, na.rm = TRUE) #range of anxiety values excluding nulls
1541270993509:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541270993515:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541270993530:gg <- gg + labs(x="HADS Anxiety Level")
1541270993544:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541270993568:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541270993583:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541270993601:gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1541270998069:qqnorm(sleep.survey$anxiety, main="Figure 2: QQPlot of HADS Anxiety Score")
1541270998083:qqline(sleep.survey$anxiety, col=2)
1541271000849:tpskew.anx<-semTools::skew(sleep.survey$anxiety)
1541271000853:tpkurt.anx<-semTools::kurtosis(sleep.survey$anxiety)
1541271039314:scale_anx <-  scale(sleep.survey$anxiety)
1541271039319:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1541271039323:hist(scale_anx, breaks = 30, col='blue')
1541271039486:abline(v=c(-3.29, 3.29))
1541271236415:scale_anx <-  scale(sleep.survey$anxiety)
1541271236420:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1541271236424:hist(scale_anx, breaks = 30, col='darkviolet')
1541271236435:abline(v=c(-3.29, 3.29))
1541271259439:abline(v=c(-3.29, 3.29), col='red')
1541271262471:scale_anx <-  scale(sleep.survey$anxiety)
1541271262477:range_scale_anx <- round(range(scale_anx, na.rm = TRUE), 2)
1541271262481:hist(scale_anx, breaks = 30, col='darkviolet')
1541271262645:abline(v=c(-3.29, 3.29), col='red')
1541271489286:tpskew.anx<-semTools::skew(sleep.survey$anxiety)
1541271489291:tpkurt.anx<-semTools::kurtosis(sleep.survey$anxiety)
1541271882629:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541271895506:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541271900474:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav")) #read in the dataset
1541271900543:sleep.survey<-select(sleep.survey.full, id, anxiety, trubslep, trubstay, qualslp, ess, fatigue, tired, depress) #select variables of interest
1541271900554:panderOptions('table.split.table', Inf)
1541271900557:var.desc <- "
1541271900559:Concept                             |Variable Name |Statistical Type  | Possible Values
1541271900562:Anxiety Level                       |anxiety       |Scale             | Range from 0=no anxiety to 21=severe anxiety
1541271900564:Trouble falling asleep?             |trubslep      |Nominal           | 1=yes 2=no
1541271900566:Trouble staying asleep?             |trubstay      |Nominal           | 1=yes 2=no
1541271900572:Quality of Sleep                    |qualslp       |Ordinal           | 1=very poor, 2=poor, 3=fair, 4=good, 5=very good, 6=excellent
1541271900574:Sleepiness Level                    |ess           |Scale             | Range from 0=low to 24=high daytime sleepiness
1541271900576:Rate level of fatigue over last week|fatigue        |Ordinal           | 1=not at all 10=to a great extent
1541271900579:Rate how tired over last week       |tired         |Ordinal           | 1=not at all 10=to a great extent
1541271900581:Depression Level                    |depress       |Scale             | Range from 0=no depression to 21=severe depression
1541271900583:"
1541271900587:var.desc.df <- read.delim(textConnection(var.desc),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1541271900593:names(var.desc.df) <- unname(as.list(var.desc.df[1,])) # put headers on
1541271900692:var.desc.df <- var.desc.df[-1,] # remove first row
1541271900698:row.names(var.desc.df)<-NULL
1541271900703:pander(var.desc.df, style = 'rmarkdown')
1541271906537:len.tot <- count(sleep.survey) #number of surveys
1541271912506:num.na.anxiety <- sum(is.na(sleep.survey$anxiety)) #number of null values in anxiety
1541271912510:num.anx <- len.tot[[1]] - num.na.anxiety #number of non-null values in anxiety
1541271912513:range.anx <- range(sleep.survey$anxiety, na.rm = TRUE) #range of anxiety values excluding nulls
1541271920099:len.tot <- count(sleep.survey) #number of surveys
1541271924908:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541271929722:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav")) #read in the dataset
1541271929741:sleep.survey<-select(sleep.survey.full, id, anxiety, trubslep, trubstay, qualslp, ess, fatigue, tired, depress) #select variables of interest
1541271929902:panderOptions('table.split.table', Inf)
1541271929905:var.desc <- "
1541271930061:Concept                             |Variable Name |Statistical Type  | Possible Values
1541271930064:Anxiety Level                       |anxiety       |Scale             | Range from 0=no anxiety to 21=severe anxiety
1541271930066:Trouble falling asleep?             |trubslep      |Nominal           | 1=yes 2=no
1541271930068:Trouble staying asleep?             |trubstay      |Nominal           | 1=yes 2=no
1541271930073:Quality of Sleep                    |qualslp       |Ordinal           | 1=very poor, 2=poor, 3=fair, 4=good, 5=very good, 6=excellent
1541271930075:Sleepiness Level                    |ess           |Scale             | Range from 0=low to 24=high daytime sleepiness
1541271930077:Rate level of fatigue over last week|fatigue        |Ordinal           | 1=not at all 10=to a great extent
1541271930079:Rate how tired over last week       |tired         |Ordinal           | 1=not at all 10=to a great extent
1541271930081:Depression Level                    |depress       |Scale             | Range from 0=no depression to 21=severe depression
1541271930083:"
1541271930087:var.desc.df <- read.delim(textConnection(var.desc),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1541271930093:names(var.desc.df) <- unname(as.list(var.desc.df[1,])) # put headers on
1541271930098:var.desc.df <- var.desc.df[-1,] # remove first row
1541271930104:row.names(var.desc.df)<-NULL
1541271930110:pander(var.desc.df, style = 'rmarkdown')
1541271935570:len.tot <- count(sleep.survey) #number of surveys
1541271942135:len.tot <- count(sleep.survey) #number of surveys
1541271952938:len.tot
1541271984038:library(foreign)
1541271984040:#library(car)
1541271984043:#library(gmodels)
1541271984045:library(pander)
1541271984048:#library(ggplot2)
1541271984051:#library(psych)
1541271984053:#library(semTools)
1541271992003:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav")) #read in the dataset
1541271992045:sleep.survey<-select(sleep.survey.full, id, anxiety, trubslep, trubstay, qualslp, ess, fatigue, tired, depress) #select variables of interest
1541271992054:panderOptions('table.split.table', Inf)
1541271992057:var.desc <- "
1541271992059:Concept                             |Variable Name |Statistical Type  | Possible Values
1541271992061:Anxiety Level                       |anxiety       |Scale             | Range from 0=no anxiety to 21=severe anxiety
1541271992063:Trouble falling asleep?             |trubslep      |Nominal           | 1=yes 2=no
1541271992065:Trouble staying asleep?             |trubstay      |Nominal           | 1=yes 2=no
1541271992070:Quality of Sleep                    |qualslp       |Ordinal           | 1=very poor, 2=poor, 3=fair, 4=good, 5=very good, 6=excellent
1541271992072:Sleepiness Level                    |ess           |Scale             | Range from 0=low to 24=high daytime sleepiness
1541271992074:Rate level of fatigue over last week|fatigue        |Ordinal           | 1=not at all 10=to a great extent
1541271992076:Rate how tired over last week       |tired         |Ordinal           | 1=not at all 10=to a great extent
1541271992078:Depression Level                    |depress       |Scale             | Range from 0=no depression to 21=severe depression
1541271992080:"
1541271992084:var.desc.df <- read.delim(textConnection(var.desc),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1541271992090:names(var.desc.df) <- unname(as.list(var.desc.df[1,])) # put headers on
1541271992095:var.desc.df <- var.desc.df[-1,] # remove first row
1541271992101:row.names(var.desc.df)<-NULL
1541271992106:pander(var.desc.df, style = 'rmarkdown')
1541272000820:len.tot <- count(sleep.survey) #number of surveys
1541272000828:len.tot
1541272020350:#library(foreign)
1541272020353:#library(car)
1541272020416:#library(psych)
1541272020419:#library(semTools)
1541272020421:#library(plyr)
1541272020424:#library(dplyr)
1541272022130:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541272026607:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav")) #read in the dataset
1541272026631:sleep.survey<-select(sleep.survey.full, id, anxiety, trubslep, trubstay, qualslp, ess, fatigue, tired, depress) #select variables of interest
1541272026640:panderOptions('table.split.table', Inf)
1541272026643:var.desc <- "
1541272026645:Concept                             |Variable Name |Statistical Type  | Possible Values
1541272026647:Anxiety Level                       |anxiety       |Scale             | Range from 0=no anxiety to 21=severe anxiety
1541272026649:Trouble falling asleep?             |trubslep      |Nominal           | 1=yes 2=no
1541272026650:Trouble staying asleep?             |trubstay      |Nominal           | 1=yes 2=no
1541272026655:Quality of Sleep                    |qualslp       |Ordinal           | 1=very poor, 2=poor, 3=fair, 4=good, 5=very good, 6=excellent
1541272026657:Sleepiness Level                    |ess           |Scale             | Range from 0=low to 24=high daytime sleepiness
1541272026659:Rate level of fatigue over last week|fatigue        |Ordinal           | 1=not at all 10=to a great extent
1541272026661:Rate how tired over last week       |tired         |Ordinal           | 1=not at all 10=to a great extent
1541272026664:Depression Level                    |depress       |Scale             | Range from 0=no depression to 21=severe depression
1541272026666:"
1541272026670:var.desc.df <- read.delim(textConnection(var.desc),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1541272026676:names(var.desc.df) <- unname(as.list(var.desc.df[1,])) # put headers on
1541272026682:var.desc.df <- var.desc.df[-1,] # remove first row
1541272026687:row.names(var.desc.df)<-NULL
1541272026692:pander(var.desc.df, style = 'rmarkdown')
1541272032282:len.tot <- count(sleep.survey) #number of surveys
1541272036001:num.na.anxiety <- sum(is.na(sleep.survey$anxiety)) #number of null values in anxiety
1541272036004:num.anx <- len.tot[[1]] - num.na.anxiety #number of non-null values in anxiety
1541272036008:range.anx <- range(sleep.survey$anxiety, na.rm = TRUE) #range of anxiety values excluding nulls
1541272041319:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541272041324:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541272041440:gg <- gg + labs(x="HADS Anxiety Level")
1541272041459:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541272041478:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541272041493:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541272041564:gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1541272071664:qqnorm(sleep.survey$anxiety, main="Figure 2: QQPlot of HADS Anxiety Score")
1541272071678:qqline(sleep.survey$anxiety, col=2)
1541272076289:tpskew.anx<-semTools::skew(sleep.survey$anxiety)
1541272076302:tpkurt.anx<-semTools::kurtosis(sleep.survey$anxiety)
1541272079322:scale.anx <-  scale(sleep.survey$anxiety)
1541272079328:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541272079333:hist(scale.anx, breaks = 30, col='darkviolet')
1541272079446:abline(v=c(-3.29, 3.29), col='red')
1541272145596:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541272145601:gg <- ggplot(scale.anx)
1541272240447:ggplot2.histogram(data=scale.anx, xName='Scaled Anxiety Score', scale="density")
1541272251413:#library(foreign)
1541272251417:#library(car)
1541272251476:library(ggplot2)
1541272251479:#library(psych)
1541272251482:#library(semTools)
1541272251484:#library(plyr)
1541272251487:#library(dplyr)
1541272259408:ggplot2.histogram(data=scale.anx, xName='Scaled Anxiety Score', scale="density")
1541272307228:#library(psych)
1541272307252:#library(semTools)
1541272307254:#library(plyr)
1541272307256:#library(dplyr)
1541272307258:install_github("easyGgplot2")
1541272342971:install.packages("devtools")
1541272347756:install.packages("devtools")
1541272355973:library(devtools)
1541272364782:install_github("easyGgplot2")
1541272374630:install_github("easyGgplot2", "kassambara")
1541272445110:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541272445177:qplot(scale.anx, geom="histogram")
1541272465632:#library(foreign)
1541272465635:#library(car)
1541272465637:#library(gmodels)
1541272465640:library(pander)
1541272465673:library(ggplot2)
1541272465684:#library(psych)
1541272465686:#library(semTools)
1541272465689:#library(plyr)
1541272465691:#library(dplyr)
1541272475412:scale.anx <-  scale(sleep.survey$anxiety)
1541272475418:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541272475573:hist(scale.anx, breaks = 30, col='darkviolet')
1541272475586:abline(v=c(-3.29, 3.29), col='red')
1541272479977:qplot(scale.anx, geom="histogram")
1541272608822:qplot(scale.anx,  geom="histogram",
1541272608824:binwidth = 5,
1541272608827:main = "Histogram of Scaled Anxiety Levels",
1541272608829:xlab = "Scaled Anxiety Levels",
1541272608831:fill=I("darkviolet"),
1541272608833:col=I("red"),
1541272608835:alpha=I(.2),
1541272608837:xlim=c(-3.5, 3.5))
1541272621909:qplot(scale.anx,  geom="histogram",
1541272621912:binwidth = 0.5,
1541272621914:main = "Histogram of Scaled Anxiety Levels",
1541272621916:xlab = "Scaled Anxiety Levels",
1541272621918:fill=I("darkviolet"),
1541272621920:col=I("red"),
1541272621923:alpha=I(.2),
1541272621925:xlim=c(-3.5, 3.5))
1541272635007:qplot(scale.anx,  geom="histogram",
1541272635009:binwidth = 0.5,
1541272635012:main = "Histogram of Scaled Anxiety Levels",
1541272635014:xlab = "Scaled Anxiety Levels",
1541272635016:fill=I("darkviolet"),
1541272635019:col=I("black"),
1541272635021:alpha=I(.2),
1541272635023:xlim=c(-3.5, 3.5))
1541272641441:?qplot
1541272681564:qplot(scale.anx,  geom="histogram",
1541272681567:binwidth = 0.5,
1541272681569:main = "Histogram of Scaled Anxiety Levels",
1541272681571:xlab = "Scaled Anxiety Levels",
1541272681573:fill=I("darkviolet"),
1541272681576:col=I("black"),
1541272681578:xlim=c(-3.5, 3.5))
1541272688630:qplot(scale.anx,  geom="histogram",
1541272688633:binwidth = 0.5,
1541272688635:main = "Histogram of Scaled Anxiety Levels",
1541272688637:xlab = "Scaled Anxiety Levels",
1541272688640:fill=I("darkviolet"),
1541272688642:col=I("black"),
1541272688644:alpha=I(.2),
1541272688646:xlim=c(-3.5, 3.5))
1541272688784:abline(v=c(-3.29, 3.29), col='red')
1541272778535:qplot(scale.anx,  geom="histogram",
1541272778537:binwidth = 0.5,
1541272778540:main = "Histogram of Scaled Anxiety Levels",
1541272778542:xlab = "Scaled Anxiety Levels",
1541272778544:fill=I("darkviolet"),
1541272778546:col=I("black"),
1541272778548:alpha=I(.2),
1541272778550:xlim=c(-3.5, 3.5))
1541272810288:ggplot(scale.anx) +
1541272810290:geom_histogram(breaks=seq(20, 50, by=2),
1541272810292:col="red",
1541272810295:fill="green",
1541272810297:alpha = .2) +
1541272810299:labs(title="Histogram for Age", x="Age", y="Count") +
1541272890288:?hist
1541272943136:scale.anx <-  scale(sleep.survey$anxiety)
1541272943141:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541272943145:hist(scale.anx, breaks = 30, col='darkviolet', xlim=range(-3.5, 3.5))
1541272943156:abline(v=c(-3.29, 3.29), col='red')
1541272960604:scale.anx <-  scale(sleep.survey$anxiety)
1541272960609:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541272960612:hist(scale.anx, breaks = 30, col='darkviolet', xlim=range(-3.35, 3.35))
1541272960814:abline(v=c(-3.29, 3.29), col='red')
1541273053475:scale.anx <-  scale(sleep.survey$anxiety)
1541273053480:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541273053484:hist(scale.anx, breaks = 30, col='darkorchid2', xlim=range(-3.35, 3.35))
1541273053646:abline(v=c(-3.29, 3.29), col='red')
1541273065787:scale.anx <-  scale(sleep.survey$anxiety)
1541273065794:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541273065799:hist(scale.anx, breaks = 30, col='darkorchid2', xlim=range(-3.35, 3.35))
1541273065911:abline(v=c(-3.29, 3.29), col='red', size=1)
1541273072175:abline(v=c(-3.29, 3.29), col='red', size=10)
1541273075101:scale.anx <-  scale(sleep.survey$anxiety)
1541273075101:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541273075101:hist(scale.anx, breaks = 30, col='darkorchid2', xlim=range(-3.35, 3.35))
1541273075224:abline(v=c(-3.29, 3.29), col='red', size=10)
1541273109896:scale.anx <-  scale(sleep.survey$anxiety)
1541273109901:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541273109905:hist(scale.anx, breaks = 30, col='darkorchid2', xlim=range(-3.35, 3.35))
1541273110018:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541273166024:scale.anx <-  scale(sleep.survey$anxiety)
1541273166024:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541273166024:hist(scale.anx, breaks = 30, col='darkorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score')
1541273166144:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541273184899:scale.anx <-  scale(sleep.survey$anxiety)
1541273184903:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541273184908:hist(scale.anx, breaks = 30, col='darkorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', main='Histogram of Scaled Anxiety Score')
1541273184917:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541273231954:scale.anx <-  scale(sleep.survey$anxiety)
1541273232092:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541273232095:hist(scale.anx, breaks = 30, col='darkorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', main='Figure 3: Histogram of Scaled Anxiety Score')
1541273232107:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541273315139:scale.anx <-  scale(sleep.survey$anxiety)
1541273315210:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541273315238:hist(scale.anx, breaks = 30, col='darkorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', main='Figure 3: Histogram of Scaled Anxiety Score')
1541273315249:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541273599728:num.trubslep <- summary(sleepsurvey$trubslep)
1541273611354:num.trubslep <- summary(sleep.survey$trubslep)
1541273611354:perc.trubslep <- round(100*num.trubslep/len.tot, 2)
1541273611354:table.trubslep <- rbind(num.trubslep, perc.trubslep)
1541273611521:table.trubslep
1541273611526:plot(sleep.survey$trubslep)
1541273666152:hist(sleep.survey$trubslep, breaks = 30, col='darkorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', main='Figure 3: Histogram of Scaled Anxiety Score')
1541273678722:?plot
1541273717563:num.trubslep <- summary(sleep.survey$trubslep)
1541273717568:perc.trubslep <- round(100*num.trubslep/len.tot, 2)
1541273717572:table.trubslep <- rbind(num.trubslep, perc.trubslep)
1541273717576:table.trubslep
1541273717735:plot(sleep.survey$trubslep, main='Figure 3: Histogram of Scaled Anxiety Score')
1541273717743:#hist(sleep.survey$trubslep, breaks = 30, col='darkorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', )
1541273740918:num.trubslep <- summary(sleep.survey$trubslep)
1541273740918:perc.trubslep <- round(100*num.trubslep/len.tot, 2)
1541273740918:table.trubslep <- rbind(num.trubslep, perc.trubslep)
1541273740933:table.trubslep
1541273741092:plot(sleep.survey$trubslep, main='Figure 4: Histogram of Scaled Anxiety Score', col='darkorchid2')
1541273741103:#hist(sleep.survey$trubslep, breaks = 30, col='darkorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', )
1541273763783:scale.anx <-  scale(sleep.survey$anxiety)
1541273763788:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541273763791:hist(scale.anx, breaks = 30, col='darkorchid1', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', main='Figure 3: Histogram of Scaled Anxiety Score')
1541273763904:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541273788216:scale.anx <-  scale(sleep.survey$anxiety)
1541273788216:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541273788216:hist(scale.anx, breaks = 30, col='mediumpurple1', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', main='Figure 3: Histogram of Scaled Anxiety Score')
1541273788468:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541273805106:scale.anx <-  scale(sleep.survey$anxiety)
1541273805106:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541273805106:hist(scale.anx, breaks = 30, col='darkorchid1', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', main='Figure 3: Histogram of Scaled Anxiety Score')
1541273805279:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541273822647:scale.anx <-  scale(sleep.survey$anxiety)
1541273822651:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541273822656:hist(scale.anx, breaks = 30, col='mediumorchid1', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', main='Figure 3: Histogram of Scaled Anxiety Score')
1541273822818:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541273829236:scale.anx <-  scale(sleep.survey$anxiety)
1541273829236:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541273829236:hist(scale.anx, breaks = 30, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', main='Figure 3: Histogram of Scaled Anxiety Score')
1541273829354:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541273839328:num.trubslep <- summary(sleep.survey$trubslep)
1541273839328:perc.trubslep <- round(100*num.trubslep/len.tot, 2)
1541273839328:table.trubslep <- rbind(num.trubslep, perc.trubslep)
1541273839328:table.trubslep
1541273839347:plot(sleep.survey$trubslep, main='Figure 4: Histogram of Scaled Anxiety Score', col='mediumorchid2')
1541273839355:#hist(sleep.survey$trubslep, breaks = 30, col='darkorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', )
1541273924626:num.trubslep <- summary(sleep.survey$trubslep)
1541273924630:perc.trubslep <- round(100*num.trubslep/len.tot, 2)
1541273924634:table.trubslep <- rbind(num.trubslep, perc.trubslep)
1541273924639:table.trubslep
1541273924746:plot(sleep.survey$trubslep, main='Figure 4: Histogram of Trouble Falling Asleep?', col='mediumorchid2', xlab='Answer to Trouble Falling Asleep?', ylab='Number of Responses')
1541273924758:#hist(sleep.survey$trubslep, breaks = 30, col='darkorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', )
1541274011440:num.trubslep <-
1541274011442:sum(is.na(sleep.survey$num.trubslep)) #number of null values in anxiety
1541274028522:sum(is.na(sleep.survey$num.trubslep))
1541274063301:num.trubslep
1541274073302:num.trubslep <- summary(sleep.survey$trubslep)
1541274073302:num.trubslep
1541274084752:num.trubslep <-
1541274084754:sum(is.na(sleep.survey$trubslep)) #number of null values in anxiety
1541274091102:sum(is.na(sleep.survey$trubslep))
1541274102755:table.trubslep
1541274128486:num.trubslep <- summary(sleep.survey$trubslep)
1541274128490:num.trubslep
1541274137646:num.trubslep[1]
1541274142150:num.trubslep[3]
1541274147757:num.trubslep[[3]]
1541274568571:num.trubslep[1]
1541274584737:num.trubslep[[1]]
1541274588144:num.trubslep[[2]]
1541274592802:num.trubslep[2]
1541274619918:table.trubslep
1541274625398:num.trubslep
1541274696923:num.na.trubslep <- sum(is.na(sleep.survey$trubslep)) #number of null values in anxiety
1541274698360:num.na.trubslep
1541274717570:num.na.trubslep <- sum(is.na(sleep.survey$trubslep)) #number of null values in anxiety
1541274719360:num.trubslep <- len.tot[[1]] - num.na.trubslep #number of non-null values in anxiety
1541274724098:num.trubslep
1541274742235:perc.trubslep <- round(100*num.trubslep/len.tot, 2)
1541274746563:perc.trubslep
1541274756651:num.trubslep <- summary(sleep.survey$trubslep)
1541274756655:num.trubslep
1541274759215:perc.trubslep <- round(100*num.trubslep/len.tot, 2)
1541274764802:perc.trubslep
1541274776284:num.trubslep
1541274789287:num.trubslep/len.tot
1541275043324:num.trubslep
1541275070414:num.trubslep
1541275073657:num.trubslep/2
1541275082884:len.tot
1541275087319:len.tot[1]
1541275095442:len.tot[[1]]
1541275108646:num.trubslep/len.tot[[1]]
1541275134988:num.trubslep <- summary(sleep.survey$trubslep)
1541275140502:num.trubslep
1541275142805:perc.trubslep <- round(100*num.trubslep/len.tot[[1]], 2)
1541275147428:perc.trubslep
1541275156735:table.trubslep <- rbind(num.trubslep, perc.trubslep)
1541275161981:table.trubslep
1541275185542:table.trubslep[1]
1541275190472:table.trubslep
1541275197132:table.trubslep[1,1]
1541275202186:table.trubslep[2,1]
1541275205551:table.trubslep[3,1]
1541275211707:table.trubslep[1,3]
1541275233189:table.trubslep
1541275242394:table.trubslep[1,2]
1541275248872:table.trubslep[2,2]
1541275261884:table.trubslep[1,2]
1541275281460:table.trubslep
1541275302663:table.trubslep[1,2]
1541275307007:table.trubslep[2,1]
1541275479376:num.trubslep <- summary(sleep.survey$trubslep)
1541275479376:perc.trubslep <- round(100*num.trubslep/len.tot[[1]], 2)
1541275479376:table.trubslep <- rbind(num.trubslep, perc.trubslep)
1541275479376:plot(sleep.survey$trubslep, main='Figure 4: Histogram of Trouble Falling Asleep?', col='mediumorchid2', xlab='Answer to Trouble Falling Asleep?', ylab='Number of Responses')
1541275487351:psych::describeBy(sleepsurvey$anxiety, sleepsurvey$trubslep)
1541275499552:psych::describeBy(sleep.survey$anxiety, sleep.survey$trubslep)
1541275537950:bar <- ggplot(sleep.survey, aes(trubslep, anxiety))
1541275551973:?stat_summary
1541275572233:bar <- ggplot(sleep.survey, aes(trubslep, anxiety))
1541275572249:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black", na.rm = TRUE) + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541275606157:bar <- ggplot(sleep.survey, aes(trubslep, anxiety))
1541275613881:bar <- ggplot(sleep.survey, aes(trubslep, anxiety))
1541275613895:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black", na.rm = TRUE)
1541275614005:#+ stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541275633244:bar <- ggplot(sleep.survey, aes(trubslep, anxiety), na.rm = TRUE)
1541275633259:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black")
1541275633372:#+ stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541275645188:bar <- ggplot(sleep.survey, aes(trubslep, anxiety), na.rm = TRUE)
1541275645203:#bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black")
1541275645309:#+ stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541276013629:bar <- ggplot(sleep.survey, aes(trubslep, anxiety), na.rm = TRUE)
1541276013787:#bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black")
1541276013798:#+ stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541276034585:bar <- ggplot(sleep.survey, aes(trubslep, anxiety), na.rm = TRUE)
1541276034696:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black",, na.rm = TRUE)
1541276034968:#+ stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541276073870:bar <- ggplot(sleep.survey, aes(trubslep, anxiety), na.rm = TRUE)
1541276074165:#+ stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541276103159:bar <- ggplot(sleep.survey, aes(trubslep, anxiety), na.rm = TRUE)
1541276103512:+ stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541276111257:bar <- ggplot(sleep.survey, aes(trubslep, anxiety), na.rm = TRUE)
1541276111365:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black", na.rm = TRUE) + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541276137301:bar <- ggplot(sleep.survey, aes(trubslep, anxiety), na.rm = (TRUE, TRUE)
1541276151246:bar <- ggplot(sleep.survey, aes(trubslep, anxiety), na.rm = TRUE)
1541276151473:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black", na.rm = TRUE) + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541276160515:bar <- ggplot(sleep.survey, aes(trubslep, anxiety), na.rm = TRUE)
1541276160568:#bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black", na.rm = TRUE) + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541276369636:g <- ggplot(sleep.survey, aes(trubslep))
1541276390471:g <- ggplot(sleep.survey, aes(trubslep)) +  # change binwidth
1541276390484:labs(title="Histogram with Auto Binning",
1541276390493:subtitle="Engine Displacement across Vehicle Classes")
1541276412220:g <- ggplot(mpg, aes(displ)) + scale_fill_brewer(palette = "Spectral")
1541276447083:plot(g)
1541276458850:g <- ggplot(sleep.survey, aes(trubslep))
1541276458958:plot(g)
1541276493656:g <- ggplot(sleep.survey, aes(trubslep), binwidth = .1,
1541276493661:col="black",
1541276493667:size=.1))
1541276531106:g <- ggplot(sleep.survey, aes(trubslep))
1541276531214:binwidth = .1,
1541276531226:col="black",
1541276531237:size=.1) +  # change binwidth
1541276531248:plot(g)
1541276541961:g <- ggplot(sleep.survey, aes(trubslep))
1541276542000:g <- g + geom_histogram(aes(fill=class),
1541276542004:binwidth = .1,
1541276542008:col="black",
1541276542013:size=.1) +  # change binwidth
1541276542169:plot(g)
1541276553767:g <- ggplot(sleep.survey, aes(trubslep))
1541276553793:g <- g + geom_histogram(aes(fill=class),
1541276553798:binwidth = .1,
1541276553802:col="black",
1541276553806:size=.1)   # change binwidth
1541276553846:plot(g)
1541276564794:g <- ggplot(sleep.survey, aes(trubslep))
1541276564874:col="black",
1541276564883:size=.1)   # change binwidth
1541276564971:plot(g)
1541276585127:bar <- ggplot(sleep.survey, aes(trubslep, anxiety), na.rm = TRUE)
1541276585237:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black", na.rm = TRUE) + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541276619484:bar <- ggplot(sleep.survey, aes(trubslep, anxiety), na.rm = TRUE)
1541276619529:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black", na.rm = TRUE) + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", na.rm = TRUE) + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541278004198:?mean_cl_normal
1541278427883:bar <- ggplot(sleep.survey, aes(trubslep[!is.na(sleep.survey$trubslep)], anxiety[!is.na(sleep.survey$trubslep)]), na.rm = TRUE)
1541278428223:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black", na.rm = TRUE) + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", na.rm = TRUE) + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541278455967:bar <- ggplot(sleep.survey, aes(trubslep, anxiety), na.rm = TRUE)
1541278456016:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black", na.rm = TRUE) + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", na.rm = TRUE) + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541278491508:bar <- ggplot(sleep.survey, aes(trubslep, anxiety))
1541278491554:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "mediumorchid2") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Medication used to Aid Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Medication used to Aid Sleep")
1541278535198:bar <- ggplot(sleep.survey, aes(trubslep, anxiety))
1541278594023:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav")) #read in the dataset
1541278608688:?read.spss
1541278642263:?select
1541278866429:library(foreign)
1541278866467:#library(car)
1541278866477:#library(gmodels)
1541278866487:library(pander)
1541278866497:library(ggplot2)
1541278866507:#library(psych)
1541278866617:#library(semTools)
1541278866624:#library(plyr)
1541278866631:library(dplyr)
1541278878391:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav")) #read in the dataset
1541278878781:sleep.survey<-select(sleep.survey.full, id, anxiety, trubslep, trubstay, qualslp, ess, fatigue, tired, depress) #select variables of interest
1541278878797:panderOptions('table.split.table', Inf)
1541278878802:var.desc <- "
1541278878804:Concept                             |Variable Name |Statistical Type  | Possible Values
1541278878807:Anxiety Level                       |anxiety       |Scale             | Range from 0=no anxiety to 21=severe anxiety
1541278878810:Trouble falling asleep?             |trubslep      |Nominal           | 1=yes 2=no
1541278878812:Trouble staying asleep?             |trubstay      |Nominal           | 1=yes 2=no
1541278878818:Quality of Sleep                    |qualslp       |Ordinal           | 1=very poor, 2=poor, 3=fair, 4=good, 5=very good, 6=excellent
1541278878821:Sleepiness Level                    |ess           |Scale             | Range from 0=low to 24=high daytime sleepiness
1541278878824:Rate level of fatigue over last week|fatigue        |Ordinal           | 1=not at all 10=to a great extent
1541278878827:Rate how tired over last week       |tired         |Ordinal           | 1=not at all 10=to a great extent
1541278878830:Depression Level                    |depress       |Scale             | Range from 0=no depression to 21=severe depression
1541278878834:"
1541278878839:var.desc.df <- read.delim(textConnection(var.desc),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1541278878849:names(var.desc.df) <- unname(as.list(var.desc.df[1,])) # put headers on
1541278878858:var.desc.df <- var.desc.df[-1,] # remove first row
1541278878866:row.names(var.desc.df)<-NULL
1541278878874:pander(var.desc.df, style = 'rmarkdown')
1541278997857:num.trubstay <- summary(sleep.survey$trubstay)
1541278997865:perc.trubstay <- round(100*num.trubstay/len.tot[[1]], 2)
1541278997872:table.trubstay <- rbind(num.trubstay, perc.trubstay)
1541278997879:plot(sleep.survey$trubstay, main='Figure 4: Histogram of Trouble Falling Asleep?', col='mediumorchid2', xlab='Answer to Trouble Falling Asleep?', ylab='Number of Responses')
1541279086706:num.trubstay <- summary(sleep.survey$trubstay)
1541279086712:perc.trubstay <- round(100*num.trubstay/len.tot[[1]], 2)
1541279086719:table.trubstay <- rbind(num.trubstay, perc.trubstay)
1541279086725:plot(sleep.survey$trubstay, main='Figure 4: Histogram of Trouble Staying Asleep?', col='mediumorchid2', xlab='Answer to Trouble Staying Asleep?', ylab='Number of Responses')
1541279133554:psych::describeBy(sleep.survey$anxiety, sleep.survey$trubstay)
1541279193533:bar <- ggplot(sleep.survey, aes(trubstay, anxiety))
1541279235698:bar <- ggplot(sleep.survey, aes(trubstay, trubslep))
1541279235747:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "mediumorchid2") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Trouble Falling Asleep", y = "HADS Anxiety Score", title="Figure 7: Anxiety Level by Trouble Staying Asleep")
1541279308992:num.trubstay <- summary(sleep.survey$trubstay)
1541279309005:perc.trubstay <- round(100*num.trubstay/len.tot[[1]], 2)
1541279309017:table.trubstay <- rbind(num.trubstay, perc.trubstay)
1541279309032:plot(sleep.survey$trubstay, main='Figure 6: Histogram of Trouble Staying Asleep?', col='mediumorchid2', xlab='Answer to Trouble Staying Asleep?', ylab='Number of Responses')
1541279315897:bar <- ggplot(sleep.survey, aes(trubstay, anxiety))
1541279316228:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "mediumorchid2") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Trouble Falling Asleep", y = "HADS Anxiety Score", title="Figure 7: Anxiety Level by Trouble Staying Asleep")
1541279377810:num.qual <- summary(sleep.survey$qualslp)
1541279377822:perc.qual <- round(100*num.qual/len.tot, 2)
1541279377838:table.qual <- rbind(num.qual, perc.qual)
1541279377851:table.qual
1541279377868:plot(sleep.survey$qualslp)
1541279439507:num.qual <- summary(sleep.survey$qualslp)
1541279439519:perc.qual <- round(100*num.qual/len.tot, 2)
1541279439534:table.qual <- rbind(num.qual, perc.qual)
1541279439547:table.qual
1541279439568:plot(sleep.survey$qualslp, main='Figure 6: Histogram of Trouble Staying Asleep?', col='mediumorchid2', xlab='Answer to Trouble Staying Asleep?', ylab='Number of Responses')
1541279484115:num.qual <- summary(sleep.survey$qualslp)
1541279484129:perc.qual <- round(100*num.qual/len.tot, 2)
1541279484144:table.qual <- rbind(num.qual, perc.qual)
1541279484158:table.qual
1541279484177:plot(sleep.survey$qualslp, main='Figure 8: Histogram of Quality of Sleep', col='mediumorchid2', xlab='Reported Quality of Sleep', ylab='Number of Responses')
1541279508340:table.qual
1541279539675:num.qual <- summary(sleep.survey$qualslp)
1541279541957:num.qual
1541279557208:len.tot[1]
1541279578253:num.qual <- summary(sleep.survey$qualslp)
1541279578268:perc.qual <- round(100*num.qual/len.tot[[1]], 2)
1541279578283:table.qual <- rbind(num.qual, perc.qual)
1541279578300:table.qual
1541279578619:plot(sleep.survey$qualslp, main='Figure 8: Histogram of Quality of Sleep', col='mediumorchid2', xlab='Reported Quality of Sleep', ylab='Number of Responses')
1541279653531:len.tot <- count(sleep.survey) #number of surveys
1541279661119:len.tot
1541279667102:len.tot <- count(sleep.survey) #number of surveys
1541279688566:len.tot <- count(sleep.survey)[[1]] #number of surveys
1541279688948:len.tot
1541279735205:num.qual <- summary(sleep.survey$qualslp)
1541279735210:perc.qual <- round(100*num.qual/len.tot, 2)
1541279735215:table.qual <- rbind(num.qual, perc.qual)
1541279735223:table.qual
1541279735506:plot(sleep.survey$qualslp, main='Figure 8: Histogram of Quality of Sleep', col='mediumorchid2', xlab='Reported Quality of Sleep', ylab='Number of Responses')
1541279766191:desc.anx.qual <- psych::describeBy(sleep.survey$anxiety, sleep.survey$qualslp)
1541279766352:desc.anx.qual
1541279787987:bar <- ggplot(sleep.survey, aes(qualslp, anxiety))
1541279788033:bar + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure X: Anxiety Level by Quality of Sleep")
1541279817417:bar <- ggplot(sleep.survey, aes(qualslp, anxiety))
1541279817466:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure 8: Anxiety Level by Quality of Sleep")
1541279872195:bar <- ggplot(sleep.survey, aes(qualslp, anxiety))
1541279872245:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure 9: Anxiety Level by Quality of Sleep")
1541279890148:num.na.ess <- sum(is.na(sleep.survey$ess)) #number of null values in ess
1541279890160:num.ess <- len.tot - num.na.ess
1541279890173:range.ess <- range(sleep.survey$ess, na.rm = TRUE)
1541280040104:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541280040119:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541280040167:gg <- gg + labs(x="HADS Anxiety Level")
1541280040212:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541280040237:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541280040260:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541280040289:gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1541280073939:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541280073947:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541280073967:gg <- gg + labs(x="Epworth Sleepiness Scale")
1541280073986:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1541280074019:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1541280074095:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$ess, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541280074140:gg+ggtitle('Figure X: Distribution Epworth Sleepiness Scale')
1541280117348:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541280117363:gg <- ggplot(sleep.survey, aes(x=sleep.survey$ess))
1541280117397:gg <- gg + labs(x="Epworth Sleepiness Scale")
1541280117430:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541280117718:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541280117741:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$ess, na.rm=TRUE), sd=sd(sleep.survey$ess, na.rm=TRUE)))
1541280117776:gg+ggtitle('Figure 1: Distribution Epworth Sleepiness Scale')
1541280153669:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541280153677:gg <- ggplot(sleep.survey, aes(x=sleep.survey$depress))
1541280153751:gg <- gg + labs(x="HADS Depression Level")
1541280153980:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1541280154095:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(sleep.survey$depress, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541280154240:gg+ggtitle('Figure X: Distribution HADS Depression')
1541280172555:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541280172719:gg <- ggplot(sleep.survey, aes(x=sleep.survey$depress))
1541280172740:gg <- gg + labs(x="Epworth Sleepiness Scale")
1541280172762:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541280172801:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541280172935:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$depress, na.rm=TRUE), sd=sd(sleep.survey$depress, na.rm=TRUE)))
1541280173116:gg+ggtitle('Figure 10: Distribution Epworth Sleepiness Scale')
1541280201804:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541280201821:gg <- ggplot(sleep.survey, aes(x=sleep.survey$depress))
1541280201867:gg <- gg + labs(x="Epworth Sleepiness Scale")
1541280202576:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541280202884:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541280202908:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$depress, na.rm=TRUE), sd=sd(sleep.survey$depress, na.rm=TRUE)))
1541280202935:gg+ggtitle('Figure X: Distribution HADS Depression')
1541280251767:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541280251778:gg <- ggplot(sleep.survey, aes(x=sleep.survey$ess))
1541280251801:gg <- gg + labs(x="Epworth Sleepiness Scale")
1541280252075:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541280252122:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541280252159:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$ess, na.rm=TRUE), sd=sd(sleep.survey$ess, na.rm=TRUE)))
1541280252186:gg+ggtitle('Figure 10: Distribution Epworth Sleepiness Scale')
1541280265993:qqnorm(sleep.survey$ess, main="Figure 11: QQPlot of Epworth Sleepiness Scale")
1541280266146:qqline(sleep.survey$ess, col=2)
1541280272121:tpskew.ess<-semTools::skew(sleep.survey$ess)
1541280272135:tpkurt.ess<-semTools::kurtosis(sleep.survey$ess)
1541280280188:scale.ess <-  scale(sleep.survey$ess)
1541280280204:range.scale.ess <- round(range(scale.ess, na.rm = TRUE), 2)
1541280280218:hist(scale.ess, breaks = 30)
1541280365549:scale.ess <-  scale(sleep.survey$ess)
1541280365563:range.scale.ess <- round(range(scale.ess, na.rm = TRUE), 2)
1541280365577:hist(scale.ess, breaks = 30, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled ESS Score', main='Figure 12: Histogram of Scaled ESS Score')
1541280365616:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541280444117:scale.depress <-  scale(sleep.survey$depress)
1541280444128:range.scale.depress <- round(range(scale.depress, na.rm = TRUE), 2)
1541280444137:hist(scale.depress, breaks = 30, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled ESS Score', main='Figure 12: Histogram of Scaled ESS Score')
1541280444323:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541280457118:scale.depress <-  scale(sleep.survey$depress)
1541280457138:range.scale.depress <- round(range(scale.depress, na.rm = TRUE), 2)
1541280457152:hist(scale.depress, breaks = 20, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled ESS Score', main='Figure 12: Histogram of Scaled ESS Score')
1541280457705:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541280471865:scale.ess <-  scale(sleep.survey$ess)
1541280471875:range.scale.ess <- round(range(scale.ess, na.rm = TRUE), 2)
1541280471884:hist(scale.ess, breaks = 20, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled ESS Score', main='Figure 12: Histogram of Scaled ESS Score')
1541280472165:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541280858322:num.tired <- summary(sleep.survey$tired)
1541280858341:perc.tired <- round(100*num.tired/len.tot, 2)
1541280858354:table.tired <- rbind(num.tired, perc.tired)
1541280858370:table.tired
1541280858521:plot(sleep.survey$tired, main='Figure 8: Histogram of Tiredness felt in previous Month', col='mediumorchid2', xlab='Reported Tiredness in Previous Month', ylab='Number of Responses')
1541280886944:sleep.survey$tired
1541282166246:plot(sleep.survey$tired, main='Figure 8: Histogram of Tiredness felt in previous Month', col='mediumorchid2', xlab='Reported Tiredness in Previous Month', ylab='Number of Responses')
1541282184264:plot(sleep.survey$tired, main='Figure 8: Histogram of Tiredness felt in previous Month', col='mediumorchid2', xlab='Reported Tiredness in Previous Month', ylab='Number of Responses')
1541282210619:hist(sleep.survey$tired, breaks = 20, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled ESS Score', main='Figure 12: Histogram of Scaled ESS Score')
1541282235076:hist(sleep.survey$tired, breaks = 20, col='mediumorchid2', xlab='Scaled ESS Score', main='Figure 12: Histogram of Scaled ESS Score')
1541282247962:hist(sleep.survey$tired, breaks = 10, col='mediumorchid2', xlab='Scaled ESS Score', main='Figure 12: Histogram of Scaled ESS Score')
1541323179808:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541323180067:desc.anx.qual <- psych::describeBy(sleep.survey$anxiety, sleep.survey$qualslp)
1541323180197:desc.anx.qual
1541323197256:bar <- ggplot(sleep.survey, aes(qualslp, anxiety))
1541323204256:library(foreign)
1541323204266:#library(car)
1541323204268:#library(gmodels)
1541323204271:library(pander)
1541323204319:library(ggplot2)
1541323204383:#library(psych)
1541323204436:#library(semTools)
1541323204439:#library(plyr)
1541323204442:library(dplyr)
1541323214815:bar <- ggplot(sleep.survey, aes(qualslp, anxiety))
1541323214832:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure 9: Anxiety Level by Quality of Sleep")
1541323305251:num.tired <- summary(sleep.survey$tired)
1541323305260:perc.tired <- round(100*num.tired/len.tot, 2)
1541323305264:table.tired <- rbind(num.tired, perc.tired)
1541323305268:table.tired
1541323305290:sleep.survey$tired
1541323305534:plot(sleep.survey$tired, main='Figure 8: Histogram of Tiredness felt in previous Month', col='mediumorchid2', xlab='Reported Tiredness in Previous Month', ylab='Number of Responses')
1541323305560:hist(sleep.survey$tired, breaks = 10, col='mediumorchid2', xlab='Scaled ESS Score', main='Figure 12: Histogram of Scaled ESS Score')
1541323370282:num.tired <- summary(sleep.survey$tired)
1541323370287:perc.tired <- round(100*num.tired/len.tot, 2)
1541323370291:table.tired <- rbind(num.tired, perc.tired)
1541323370295:table.tired
1541323370415:sleep.survey$tired
1541323370617:plot(sleep.survey$tired, main='Figure 8: Histogram of Tiredness felt in previous Month', col='mediumorchid2', xlab='Reported Tiredness in Previous Month', ylab='Number of Responses')
1541323370630:hist(sleep.survey$tired, breaks = 10, col='mediumorchid2', xlab='Tiredness felt in previous Month', main='Figure 13: Histogram of Tiredness felt in previous Month',, ylab='Number of Responses')
1541323446628:num.tired <- summary(sleep.survey$tired)
1541323446632:perc.tired <- round(100*num.tired/len.tot, 2)
1541323446637:table.tired <- rbind(num.tired, perc.tired)
1541323446642:table.tired
1541323446660:plot(sleep.survey$tired, main='Figure 8: Histogram of Tiredness felt in previous Month', col='mediumorchid2', xlab='Reported Tiredness in Previous Month', ylab='Number of Responses')
1541323446674:hist(sleep.survey$tired, breaks = 10, col='mediumorchid2', xlab='Tiredness felt in previous Month', main='Figure 13: Histogram of Tiredness felt in previous Month',, ylab='Number of Responses')
1541323484789:num.tired <- summary(sleep.survey$tired)
1541323484794:perc.tired <- round(100*num.tired/len.tot, 2)
1541323484798:table.tired <- rbind(num.tired, perc.tired)
1541323484802:table.tired
1541323484822:hist(sleep.survey$tired, breaks = 10, col='mediumorchid2', xlab='Tiredness felt in previous Month', main='Figure 13: Histogram of Tiredness felt in previous Month', ylab='Number of Responses')
1541323648253:num.tired <- summary(sleep.survey$tired)
1541323648256:perc.tired <- round(100*num.tired/len.tot, 2)
1541323648261:table.tired <- rbind(num.tired, perc.tired)
1541323648265:table.tired
1541323664284:num.tired <- summary(sleep.survey$tired)
1541323664289:num.tired
1541323664403:perc.tired <- round(100*num.tired/len.tot, 2)
1541323664408:table.tired <- rbind(num.tired, perc.tired)
1541323664413:table.tired
1541323683657:sleep.survey$tired
1541323683852:num.tired <- summary(sleep.survey$tired)
1541323683856:num.tired
1541323683869:perc.tired <- round(100*num.tired/len.tot, 2)
1541323683873:table.tired <- rbind(num.tired, perc.tired)
1541323683879:table.tired
1541323696940:?count
1541323717594:tally(sleep.survey$tired)
1541323725719:count(sleep.survey$tired)
1541323764032:sleep.survey$tired %>% tally()
1541323780938:mtcars %>% tally()
1541323801009:sleep.survey %>% tally(tired)
1541323807194:sleep.survey %>% count(tired)
1541323849134:sum.tired <- sleep.survey %>% count(tired)
1541323858879:sum.tired
1541323863133:sum.tired[1]
1541323877600:sum.tired
1541323895727:sum.tired[tired==1]
1541323909850:?is.na
1541323936909:is.na(sleep.survey$tired)
1541323944942:sum(is.na(sleep.survey$tired))
1541323996344:is.na.tired/len.tot
1541323999782:is.na.tired <- sum(is.na(sleep.survey$tired))
1541324001123:is.na.tired/len.tot
1541324056911:sum.tired <- sleep.survey %>% count(tired)
1541324058128:sum.tired
1541324063328:plot(sum.tired)
1541324070946:hist(sum.tired)
1541324076083:sum.tired
1541324093279:hist(sum.tired, breaks = 10, col='mediumorchid2', xlab='Tiredness felt in previous Month', main='Figure 13: Histogram of Tiredness felt in previous Month', ylab='Number of Responses')
1541324106906:?plot
1541324128094:plot(sum.tired, type='h')
1541324201533:is.na.tired <- sum(is.na(sleep.survey$tired))
1541324201536:is.na.tired/len.tot
1541324201541:sum.tired <- sleep.survey %>% count(tired)
1541324201548:sum.tired
1541324201554:plot(sum.tired, type='h',col='mediumorchid2', xlab='Tiredness felt in previous Month', main='Figure 13: Histogram of Tiredness felt in previous Month', ylab='Number of Responses')
1541324223784:plot(sum.tired, type='h',col='mediumorchid2', xlab='Tiredness felt in previous Month', main='Figure 13: Histogram of Tiredness felt in previous Month', ylab='Number of Responses', lwd = 2)
1541324231234:plot(sum.tired, type='h',col='mediumorchid2', xlab='Tiredness felt in previous Month', main='Figure 13: Histogram of Tiredness felt in previous Month', ylab='Number of Responses', lwd = 30)
1541324294537:is.na.tired <- sum(is.na(sleep.survey$tired))
1541324294541:is.na.tired/len.tot
1541324294545:sum.tired <- sleep.survey %>% count(tired)
1541324294551:sum.tired
1541324294710:plot(sum.tired, type='h',col='mediumorchid2', xlab='Tiredness felt in previous Month', main='Figure 13: Histogram of Tiredness felt in previous Month', ylab='Number of Responses', lwd = 30)
1541324320285:hist(sleep.survey$tired, breaks = 10, col='mediumorchid2', xlab='Tiredness felt in previous Month', main='Figure 13: Histogram of Tiredness felt in previous Month', ylab='Number of Responses')
1541324329657:is.na.tired <- sum(is.na(sleep.survey$tired))
1541324329661:is.na.tired/len.tot
1541324329665:sum.tired <- sleep.survey %>% count(tired)
1541324329672:sum.tired
1541324399975:is.na.tired <- sum(is.na(sleep.survey$tired))
1541324399979:is.na.tired/len.tot
1541324399983:sum.tired <- sleep.survey %>% count(tired)
1541324400142:hist(sleep.survey$tired, breaks = 10, col='mediumorchid2', xlab='Tiredness felt in previous Month', main='Figure 13: Histogram of Tiredness felt in previous Month', ylab='Number of Responses')
1541324406444:is.na.tired <- sum(is.na(sleep.survey$tired))
1541324406448:sum.tired <- sleep.survey %>% count(tired)
1541324406455:hist(sleep.survey$tired, breaks = 10, col='mediumorchid2', xlab='Tiredness felt in previous Month', main='Figure 13: Histogram of Tiredness felt in previous Month', ylab='Number of Responses')
1541324449846:desc.anx.tired <- psych::describeBy(sleep.survey$anxiety, sleep.survey$tired)
1541324449972:desc.anx.tired
1541324458413:bar <- ggplot(sleep.survey, aes(qualslp, anxiety))
1541324458579:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure 13: Anxiety Level by Quality of Sleep")
1541324496382:bar <- ggplot(sleep.survey, aes(tired, anxiety))
1541324496397:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Level of tiredness", y = "HADS Anxiety Score", title="Figure 13: Anxiety Level by Tiredness Felt in Past Month")
1541324713661:is.na.fatigue <- sum(is.na(sleep.survey$fatigue)) #number of NAs
1541324713665:is.na.fatigue
1541324713772:sum.fatigue <- sleep.survey %>% count(fatigue) #Number of each response
1541324713779:sum.fatigue
1541324713785:hist(sleep.survey$fatigue, breaks = 10, col='mediumorchid2', xlab='Fatigue felt in previous Month', main='Figure 13: Histogram of Fatigue felt in previous Month', ylab='Number of Responses')
1541324725939:desc.anx.fatigue <- psych::describeBy(sleep.survey$anxiety, sleep.survey$fatigue)
1541324726012:desc.anx.fatigue
1541324731601:bar <- ggplot(sleep.survey, aes(fatigue, anxiety))
1541324731720:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Level of Fatigue", y = "HADS Anxiety Score", title="Figure 13: Anxiety Level by Fatigue Felt in Past Month")
1541324978723:num.na.depress <- sum(is.na(sleep.survey$depress))
1541324978727:num.depress <- len.tot - num.na.depress
1541324978730:range.depress <- range(sleep.survey$depress, na.rm = TRUE)
1541324986068:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541324986074:gg <- ggplot(sleep.survey, aes(x=sleep.survey$depress))
1541324986087:gg <- gg + labs(x="Epworth Sleepiness Scale")
1541324986101:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541324986119:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541324986140:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$depress, na.rm=TRUE), sd=sd(sleep.survey$depress, na.rm=TRUE)))
1541324986159:gg+ggtitle('Figure X: Distribution HADS Depression')
1541324997005:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541324997010:gg <- ggplot(sleep.survey, aes(x=sleep.survey$depress))
1541324997024:gg <- gg + labs(x="Epworth Sleepiness Scale")
1541324997041:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541324997059:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541324997074:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$depress, na.rm=TRUE), sd=sd(sleep.survey$depress, na.rm=TRUE)))
1541324997092:gg+ggtitle('Figure 14: Distribution HADS Depression')
1541325027751:qqnorm(sleep.survey$depress, main="Figure 15: QQPlot of HADS Depression Score")
1541325027919:qqline(sleep.survey$depress, col=2)
1541325031289:tpskew.depress<-semTools::skew(sleep.survey$depress)
1541325031294:tpkurt.depress<-semTools::kurtosis(sleep.survey$depress)
1541325046317:scale.depress <-  scale(sleep.survey$depress)
1541325046326:range.scale.depress <- round(range(scale.depress, na.rm = TRUE), 2)
1541325046330:hist(scale.depress, breaks = 20, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled ESS Score', main='Figure 16: Histogram of Scaled ESS Score')
1541325046340:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541325161781:?geom_histogram
1541325199788:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541325199823:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541325199837:gg <- gg + labs(x="HADS Anxiety Level")
1541325199855:gg <- gg + geom_histogram(binwidth=1, colour="black"))#, aes(y=..density.., fill=..count..))
1541325205908:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541325205913:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541325205926:gg <- gg + labs(x="HADS Anxiety Level")
1541325205940:gg <- gg + geom_histogram(binwidth=1, colour="black")#, aes(y=..density.., fill=..count..))
1541325205956:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541325205972:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541325206096:gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1541325224567:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541325224573:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541325224587:gg <- gg + labs(x="HADS Anxiety Level")
1541325224599:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(fill=..count..))
1541325224620:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541325224636:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541325224808:gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1541325248510:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541325248516:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541325248530:gg <- gg + labs(x="HADS Anxiety Level")
1541325248543:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541325248724:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541325248742:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541325248761:gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1541325273132:tpskew.anx<-semTools::skew(sleep.survey$anxiety)
1541325273136:tpkurt.anx<-semTools::kurtosis(sleep.survey$anxiety)
1541325290959:num.trubslep <- summary(sleep.survey$trubslep)
1541325291114:perc.trubslep <- round(100*num.trubslep/len.tot, 2)
1541325291118:table.trubslep <- rbind(num.trubslep, perc.trubslep)
1541325291275:plot(sleep.survey$trubslep, main='Figure 4: Histogram of Trouble Falling Asleep', col='mediumorchid2', xlab='Trouble Falling Asleep', ylab='Number of Responses')
1541325344945:qqnorm(sleep.survey$ess, main="Figure 11: QQPlot of Epworth Sleepiness Scale")
1541325344958:qqline(sleep.survey$ess, col=2,  size=1,)
1541325353513:qqnorm(sleep.survey$ess, main="Figure 11: QQPlot of Epworth Sleepiness Scale")
1541325353526:qqline(sleep.survey$ess, col=2,  size=3)
1541325379065:qqnorm(sleep.survey$ess, main="Figure 11: QQPlot of Epworth Sleepiness Scale", colour='mediumorchid2')
1541325379081:qqline(sleep.survey$ess, col=2,  size=3)
1541325394224:qqnorm(sleep.survey$ess, main="Figure 11: QQPlot of Epworth Sleepiness Scale", fill='mediumorchid2')
1541325394239:qqline(sleep.survey$ess, col=2,  size=3)
1541328423034:lev.anx.fall <- leveneTest(anxiety ~ trubslep, data = sleep.survey)
1541328458681:??leveneTest
1541328471023:library(foreign)
1541328471035:library(car)
1541328471827:#library(gmodels)
1541328471834:library(pander)
1541328471842:library(ggplot2)
1541328471851:#library(psych)
1541328526277:scale.depress <-  scale(sleep.survey$depress)
1541328526290:range.scale.depress <- round(range(scale.depress, na.rm = TRUE), 2)
1541328526300:hist(scale.depress, breaks = 20, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled HADS Depression Score', main='Figure 16: Histogram of Scaled HADS Depression  Score')
1541328526330:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541328537376:lev.anx.fall <- leveneTest(anxiety ~ trubslep, data = sleep.survey)
1541328537728:lev.anx.fall
1541328564586:lev.anx.fall[[3]][1]
1541328835539:ttest.anx.fall <- t.test(anxiety ~ trubslep, var.equal = FALSE, data = sleep.survey, paired = FALSE)
1541328835585:ttest.anx.fall
1541328865114:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541328865405:lev_anx_med <- leveneTest(anxiety ~ medhelp, data = sleepsurvey)
1541328877148:lev_anx_med <- leveneTest(anxiety ~ medhelp, data = sleep.survey)
1541328893309:sleepsurvey<-select(sleepsurveyfull, id, anxiety, ess, depress, qualslp, medhelp)
1541328899060:sleepsurveyfull <- as.data.frame(read.spss("sleep5ED.sav"))
1541328904186:sleepsurvey<-select(sleepsurveyfull, id, anxiety, ess, depress, qualslp, medhelp)
1541328904229:head(sleepsurvey)
1541328919443:lev_anx_med <- leveneTest(anxiety ~ medhelp, data = sleepsurvey)
1541328919481:lev_anx_med
1541328925181:ttest_anx_med <- t.test(anxiety ~ medhelp, var.equal = FALSE, data = sleepsurvey, paired = FALSE)
1541328925220:ttest_anx_med
1541328925295:d <-  2*ttest_anx_med[[1]]/sqrt(ttest_anx_med[[2]])
1541328925301:d
1541329305212:ttest_anx_med[[5]][[1]]
1541329329042:ttest.anx.fall[[5]][[1]]
1541329413148:ttest.anx.fall[[5]][[1]]
1541329413160:sd(filter(sleepsurvey, sleepsurvey$trubslep == 'yes')$anxiety, na.rm=TRUE)
1541329426666:ttest.anx.fall[[5]][[1]]
1541329426686:sd(filter(sleep.survey, sleep.survey$trubslep == 'yes')$anxiety, na.rm=TRUE)
1541329469593:ttest.anx.fall[[5]][[1]]
1541329469608:sd(filter(sleep.survey, sleep.survey$trubslep == 'yes')$anxiety, na.rm=TRUE)
1541329469630:ttest.anx.fall[[5]][[2]]
1541329469898:sd(filter(sleep.survey, sleep.survey$trubslep == 'no')$anxiety, na.rm=TRUE)
1541329541437:d
1541329895722:lev.anx.stay <- leveneTest(anxiety ~ trubstay, data = sleep.survey)
1541329895734:lev.anx.stay
1541329927660:ttest.anx.stay <- t.test(anxiety ~ trubstay, var.equal = FALSE, data = sleep.survey, paired = FALSE)
1541329927695:ttest.anx.stay
1541329927915:d.stay <-  2*ttest.anx.stay[[1]]/sqrt(ttest.anx.stay[[2]])
1541329927924:d.stay
1541330245336:ttest.anx.stay <- t.test(anxiety ~ trubstay, var.equal = TRUE, data = sleep.survey, paired = FALSE)
1541330245352:ttest.anx.stay
1541330245398:d.stay <-  2*ttest.anx.stay[[1]]/sqrt(ttest.anx.stay[[2]])
1541330245407:d.stay
1541330441960:bar.anx.qual <- bartlett.test(sleep.survey$anxiety, sleep.survey$qualslp)
1541330441982:bar.anx.qual
1541330467250:aov.anx.qual <- aov(sleep.survey$anxiety ~ sleep.survey$qualslp, data = sleep.survey)
1541330467346:summary(aov.anx.qual)
1541330470177:round(summary(aov.anx.qual)[[1]][1,2], 0)/round(summary(aov.anx.qual)[[1]][2,2], 0)
1541330474464:avo.tur <- TukeyHSD(aov.anx.qual)
1541330474737:avo.tur
1541333630583:aov.anx.qual <- aov(sleep.survey$anxiety ~ sleep.survey$qualslp, data = sleep.survey)
1541333630612:summary(aov.anx.qual)
1541333646644:?aov
1541334520519:scatter.anx.ess <- ggplot(sleep.survey, aes(anxiety, ess))
1541334520786:scatter.anx.ess + geom_point() + geom_smooth(method = 'lm', colour = 'red', se = FALSE) + labs(x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1541334653302:scatter.anx.ess <- ggplot(sleep.survey, aes(anxiety, ess))
1541334653320:scatter.anx.ess + geom_point(col='mediumorchid2') + geom_smooth(method = 'lm', colour = 'red', se = FALSE) + labs(ain='Figure 17: Scatter plot of HADS Anxiety Score vs Epworth Sleepiness Score', x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1541334685021:scatter.anx.ess <- ggplot(sleep.survey, aes(anxiety, ess))
1541334685036:scatter.anx.ess + geom_point(col='darkorchid4') + geom_smooth(method = 'lm', colour = 'red', se = FALSE) + labs(ain='Figure 17: Scatter plot of HADS Anxiety Score vs Epworth Sleepiness Score', x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1541334704142:scatter.anx.ess <- ggplot(sleep.survey, aes(anxiety, ess))
1541334704158:scatter.anx.ess + geom_point(col='darkviolet') + geom_smooth(method = 'lm', colour = 'red', se = FALSE) + labs(ain='Figure 17: Scatter plot of HADS Anxiety Score vs Epworth Sleepiness Score', x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1541334719929:scatter.anx.ess <- ggplot(sleep.survey, aes(anxiety, ess))
1541334719944:scatter.anx.ess + geom_point(col='darkviolet') + geom_smooth(method = 'lm', colour = 'red', se = FALSE) + labs(main='Figure 17: Scatter plot of HADS Anxiety Score vs Epworth Sleepiness Score', x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1541334730427:?labs
1541334736957:scatter.anx.ess <- ggplot(sleep.survey, aes(anxiety, ess))
1541334736971:scatter.anx.ess + geom_point(col='darkviolet') + geom_smooth(method = 'lm', colour = 'red', se = FALSE) + labs(title='Figure 17: Scatter plot of HADS Anxiety Score vs Epworth Sleepiness Score', x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1541334758142:pear.anx.ess <- stats::cor.test(sleep.survey$anxiety, sleep.survey$ess,  method='pearson')
1541334758252:pear.anx.ess
1541334853301:round(pear.anx.ess[[4]]
1541334857896:round(pear.anx.ess[[4]])
1541334863448:pear.anx.ess[[4]]
1541335060585:bar.anx.tired <- bartlett.test(sleep.survey$anxiety, sleep.survey$tired)
1541335060594:bar.anx.tired
1541335312549:aov.anx.qual <- aov(sleep.survey$anxiety ~ sleep.survey$qualslp, data = sleep.survey)
1541335312629:summary(aov.anx.qual)
1541335835519:aov.anx.tired <- aov(sleep.survey$anxiety ~ sleep.survey$tired, data = sleep.survey)
1541335835648:summary(aov.anx.tired)
1541335856020:round(summary(aov.anx.tired)[[1]][1,2], 0)/round(summary(aov.anx.tired)[[1]][2,2]
1541335863240:round(summary(aov.anx.tired)[[1]][1,2], 0)/round(summary(aov.anx.tired)[[1]][2,2])
1541335888302:round(summary(aov.anx.tired)[[1]][1,2], 0)/
1541335888304:round(summary(aov.anx.tired)[[1]][2,2])
1541335892614:round(summary(aov.anx.tired)[[1]][1,2], 0)
1541335904426:round(summary(aov.anx.tired)[[1]][1,2], 0)/round(summary(aov.anx.tired)[[1]][2,2],0)
1541335980908:round(summary(aov.anx.qual)[[1]][1,2], 0)/round(summary(aov.anx.qual)[[1]][2,2], 0)
1541336012676:aov.anx.tired <- aov(sleep.survey$anxiety ~ sleep.survey$tired, data = sleep.survey)
1541336012905:summary(aov.anx.tired)
1541336027738:bar.anx.tired <- bartlett.test(sleep.survey$anxiety, sleep.survey$tired)
1541336027746:bar.anx.tired
1541339985472:library(foreign)
1541339985477:library(car)
1541339985480:#library(gmodels)
1541339985483:library(pander)
1541339985486:library(ggplot2)
1541339985489:#library(psych)
1541339985492:#library(semTools)
1541339985494:#library(plyr)
1541339985598:library(dplyr)
1541339985601:library(userfriendlyscience)
1541339999032:install.packages('userfriendlyscience')
1541340019006:library(foreign)
1541340019010:library(car)
1541340019013:#library(gmodels)
1541340019015:library(pander)
1541340019018:library(ggplot2)
1541340019021:#library(psych)
1541340019023:#library(semTools)
1541340019026:#library(plyr)
1541340019028:library(dplyr)
1541340019031:library(userfriendlyscience)
1541340299390:userfriendlyscience::oneway(sleep.survey$anxiety, y = sleep.survey$tired, posthoc = 'games-howell')
1541340343571:posthocTGH(sleep.survey$anxiety, y = sleep.survey$tired)
1541340364942:posthocTGH(sleep.survey$tired, y = sleep.survey$anxiety)
1541340397712:userfriendlyscience::oneway(sleep.survey$tired, y = sleep.survey$anxiety, posthoc = 'games-howell')
1541340473688:userfriendlyscience::posthocTGH(sleep.survey$tired, y = sleep.survey$anxiety)
1541340492911:userfriendlyscience::posthocTGH(sleep.survey$tired, y = sleep.survey$anxiety)
1541340493078:avo.tur <- TukeyHSD(aov.anx.tired)
1541340518033:posthoc.tired <- userfriendlyscience::posthocTGH(sleep.survey$tired, y = sleep.survey$anxiety)
1541340518182:posthoc.tired
1541340550846:posthoc.tired <- userfriendlyscience::posthocTGH(sleep.survey$tired, y = sleep.survey$anxiety,  method="games-howell")
1541340551003:posthoc.tired
1541340588816:posthoc.tired <- userfriendlyscience::posthocTGH(sleep.survey$tired, y = sleep.survey$anxiety,  method="games-howell",conf.level = 0.95, digits=2, p.adjust="none", formatPvalue = TRUE)
1541340589160:posthoc.tired
1541340616174:posthoc.tired[1]
1541340623188:posthoc.tired[[1]]
1541340631000:posthoc.tired[[1]][1]
1541340674563:?posthocTGH
1541340724028:posthoc.tired <- userfriendlyscience::posthocTGH(sleep.survey$tired, y = sleep.survey$anxiety,  method="games-howell",conf.level = 0.95, digits=2, p.adjust="none", formatPvalue = TRUE)
1541340724179:posthoc.tired
1541340737284:posthoc.tired <- userfriendlyscience::posthocTGH(sleep.survey$tired, sleep.survey$anxiety,  method="games-howell", conf.level = 0.95, digits=2, p.adjust="none", formatPvalue = TRUE)
1541340737924:posthoc.tired
1541340756629:posthoc.tired <- userfriendlyscience::posthocTGH(x=sleep.survey$tired, y=sleep.survey$anxiety,  method="games-howell", conf.level = 0.95, digits=2, p.adjust="none", formatPvalue = TRUE)
1541340756778:posthoc.tired
1541340766948:posthoc.tired <- userfriendlyscience::posthocTGH(y=sleep.survey$tired, x=sleep.survey$anxiety,  method="games-howell", conf.level = 0.95, digits=2, p.adjust="none", formatPvalue = TRUE)
1541340767728:posthoc.tired
1541341414002:?oneway
1541341454460:#one.way <-
1541341454463:oneway(sleep.survey$anxiety, sleep.survey$qualslp, posthoc = 'Tukey')
1541341489506:#one.way <-
1541341489539:oneway(sleep.survey$anxiety, sleep.survey$qualslp, posthoc = 'Tukey', conf.level=.95)
1541341546319:#one.way <-
1541341546322:oneway(sleep.survey$anxiety, sleep.survey$qualslp, posthoc = 'Tukey', conf.level=.95, posthocLetterAlpha = .05)
1541341572284:#one.way <-
1541341572287:oneway(sleep.survey$anxiety, sleep.survey$qualslp, posthoc = 'Tukey', conf.level=.95, posthocLetters = TRUE, posthocLetterAlpha = .05)
1541341589656:install.packages('multcompView')
1541341594033:#one.way <-
1541341594036:oneway(sleep.survey$anxiety, sleep.survey$qualslp, posthoc = 'Tukey', conf.level=.95, posthocLetters = TRUE, posthocLetterAlpha = .05)
1541341663160:#one.way <-
1541341663163:oneway(sleep.survey$anxiety, sleep.survey$qualslp, posthoc = 'Tukey', conf.level=.95, posthocLetterAlpha = .05)
1541341775565:posthoc.qual <- oneway(sleep.survey$anxiety, sleep.survey$qualslp, posthoc = 'Tukey', conf.level=.95, posthocLetterAlpha = .05)
1541341775692:posthoc.qual
1541342013411:posthoc.qual <- oneway(x = sleep.survey$qualslp, y = sleep.survey$anxiety, posthoc = 'Tukey')
1541342013586:posthoc.qual
1541342187696:posthoc.tired <- oneway(x = sleep.survey$tired, y = sleep.survey$anxiety, posthoc = 'games-howell')
1541342187953:posthoc.tirec
1541342193752:posthoc.tired <- oneway(x = sleep.survey$tired, y = sleep.survey$anxiety, posthoc = 'games-howell')
1541342194026:posthoc.tired
1541342518101:scatter.anx.ess <- ggplot(sleep.survey, aes(anxiety, tired))
1541342518115:scatter.anx.ess + geom_point(col='darkviolet') + geom_smooth(method = 'lm', colour = 'red', se = FALSE) + labs(title='Figure 17: Scatter plot of HADS Anxiety Score vs Epworth Sleepiness Score', x = 'HADS Anxiety Score', y = 'Epworth Sleepiness Score')
1541342631658:pear.anx.ess <- stats::cor.test(sleep.survey$anxiety, sleep.survey$tired,  method='pearson')
1541342631668:pear.anx.ess
1541342716627:desc.anx.tired
1541342755353:desc.anx.tired[[9]]
1541342818877:desc.anx.tired
1541342833971:desc.anx.tired[[2]]
1541342895131:scatter.anx.ess <- ggplot(sleep.survey, aes(anxiety, depress))
1541342895247:scatter.anx.ess + geom_point() + geom_smooth(method = 'lm', colour = 'red', se = FALSE) + labs(x = 'HADS Anxiety Score', y = 'HADS Depression Score')
1541342926352:pear.anx.depress <- stats::cor.test(sleep.survey$anxiety, sleep.survey$depress,  method='pearson')
1541342926464:pear.anx.depress
1541343195586:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541343195592:gg <- ggplot(sleep.survey, aes(x=sleep.survey$tired))
1541343195656:gg <- gg + labs(x="HADS Anxiety Level")
1541343195671:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541343195691:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541343195708:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$tired, na.rm=TRUE), sd=sd(sleep.survey$tired, na.rm=TRUE)))
1541343195780:gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1541343225068:qqnorm(sleep.survey$tired, main="Figure 2: QQPlot of HADS Anxiety Score")
1541343225086:qqline(sleep.survey$tired, col=2)
1541343262851:tpskew.tired2<-semTools::skew(sleep.survey$tired)
1541343262855:tpskew.tired2
1541343262865:tpkurt.tired2<-semTools::kurtosis(sleep.survey$tired)
1541343263072:tpkurt.tired2
1541343289762:tpkurt.tired2[1]/tpkurt.tired2[2][[1]]
1541343344976:scale.tired <-  scale(sleep.survey$tired)
1541343344985:range.scale.tired <- round(range(scale.tired, na.rm = TRUE), 2)
1541343344991:hist(scale.tired, breaks = 30, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', main='Figure 3: Histogram of Scaled Anxiety Score')
1541343345104:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541343474689:bar <- ggplot(sleep.survey, aes(fatigue, anxiety))
1541343474704:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Level of Fatigue", y = "HADS Anxiety Score", title="Figure 16: Anxiety Level by Fatigue Felt in Previous Month")
1541343625225:aov.anx.fatigue <- aov(sleep.survey$anxiety ~ sleep.survey$fatigue, data = sleep.survey)
1541343625352:summary(aov.anx.fatigue)
1541343649784:aov.anx.fatigue <- aov(sleep.survey$anxiety ~ sleep.survey$fatigue, data = sleep.survey)
1541343649962:summary(aov.anx.fatigue)
1541343649985:round(summary(aov.anx.fatigue)[[1]][1,2], 0)/round(summary(aov.anx.fatigue)[[1]][2,2], 0)
1541343671724:bar.anx.fatigue <- bartlett.test(sleep.survey$anxiety, sleep.survey$fatigue)
1541343671732:bar.anx.fatigue
1541343685658:posthoc.fatigue <- oneway(x = sleep.survey$fatigue, y = sleep.survey$anxiety, posthoc = 'games-howell')
1541343685931:posthoc.fatigue
1541348430333:round((tpkurt.ess[1]/tpkurt.ess[2])[[1]], 2)
1541349029101:typeof(lev.anx.fall)
1541349039766:is.data.frame(lev.anx.fall)
1541349088395:knit_print(lev.anx.fall)
1541349104988:?knit_print
1541349131074:print(lev.anx.fall)
1541349159801:lev.anx.fall <- leveneTest(anxiety ~ trubslep, data = sleep.survey)
1541349159810:lev.anx.fall
1541349176377:print(desc.anx.tired)
1541349281958:desc.anx.tired <- psych::describeBy(sleep.survey$anxiety, sleep.survey$tired)
1541349282130:kable(desc.anx.tired)
1541349307459:?kable
1541349322176:library(foreign)
1541349322178:library(car)
1541349322239:library(ggplot2)
1541349322242:#library(psych)
1541349322245:#library(semTools)
1541349322248:#library(plyr)
1541349322251:library(dplyr)
1541349322254:library(userfriendlyscience)
1541349322258:library(knitr)
1541349345832:desc.anx.tired <- psych::describeBy(sleep.survey$anxiety, sleep.survey$tired)
1541349346010:kable(desc.anx.tired)
1541349359622:is.data.frame(desc.anx.tired)
1541349367588:typeof(desc.anx.tired)
1541349374986:is.list(desc.anx.tired)
1541349566553:prettyPrint(desc.anx.tired)
1541349572770:?prettyPrint
1541349575426:??prettyPrint
1541354522536:pear.anx.ess <- stats::cor.test(sleep.survey$anxiety, sleep.survey$ess,  method='pearson')
1541354522691:pear.anx.ess
1541354594800:round(pear.anx.ess[[4]]
1541354605396:pear.anx.ess <- stats::cor.test(sleep.survey$anxiety, sleep.survey$ess,  method='pearson')
1541354616051:pear.anx.ess <- stats::cor.test(sleep.survey$anxiety, sleep.survey$ess,  method='pearson')
1541354618335:pear.anx.ess
1541354620616:pear.anx.ess[[4]]
1541354626082:pear.anx.ess[[4]][1]
1541354630696:pear.anx.ess[[4]]
1541354637553:pear.anx.ess[[4]][1]
1541354649301:(pear.anx.ess[[4]][1])^2
1541354656860:100*(pear.anx.ess[[4]][1])^2
1541354754082:share.var.anx.ess <- 100*(pear.anx.ess[[4]][1])^2
1541354758270:100*(pear.anx.ess[[4]][1])^2
1541354761867:100*(pear.anx.ess[[4]][1])^2
1541354765339:pear.anx.ess <- stats::cor.test(sleep.survey$anxiety, sleep.survey$ess,  method='pearson')
1541354765352:pear.anx.ess
1541354765375:100*(pear.anx.ess[[4]][1])^2
1541354798808:pear.anx.ess <- stats::cor.test(sleep.survey$anxiety, sleep.survey$ess,  method='pearson')
1541354798817:pear.anx.ess
1541354798839:round(100*(pear.anx.ess[[4]][1])^2, 2)
1541354881272:pear.anx.depress <- stats::cor.test(sleep.survey$anxiety, sleep.survey$depress,  method='pearson')
1541354881281:pear.anx.depress
1541354881304:round(100*(pear.anx.depress[[4]][1])^2, 2)
1541358213681:aov.anx.fatigue <- aov(sleep.survey$anxiety ~ sleep.survey$fatigue, data = sleep.survey)
1541358213951:summary(aov.anx.fatigue)
1541358213973:round(summary(aov.anx.fatigue)[[1]][1,2]/summary(aov.anx.fatigue)[[1]][2,2], 0)
1541358219380:aov.anx.fatigue <- aov(sleep.survey$anxiety ~ sleep.survey$fatigue, data = sleep.survey)
1541358219508:summary(aov.anx.fatigue)
1541358219532:round(summary(aov.anx.fatigue)[[1]][1,2]/summary(aov.anx.fatigue)[[1]][2,2], 3)
1541358978914:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav")) #read in the dataset
1541358978941:sleep.survey<-select(sleep.survey.full, id, anxiety, trubslep, trubstay, qualslp, ess, fatigue, depress) #select variables of interest
1541358978950:panderOptions('table.split.table', Inf)
1541358978953:var.desc <- "
1541358978955:Concept                             |Variable Name |Statistical Type  | Possible Values
1541358978958:Anxiety Level                       |anxiety       |Scale             | Range from 0=no anxiety to 21=severe anxiety
1541358978960:Trouble falling asleep?             |trubslep      |Nominal           | 1=yes 2=no
1541358978962:Trouble staying asleep?             |trubstay      |Nominal           | 1=yes 2=no
1541358978964:Quality of Sleep                    |qualslp       |Ordinal           | 1=very poor, 2=poor, 3=fair, 4=good, 5=very good, 6=excellent
1541358978966:Sleepiness Level                    |ess           |Scale             | Range from 0=low to 24=high daytime sleepiness
1541358978969:Rate level of fatigue over last week|fatigue       |Ordinal           | 1=not at all 10=to a great extent
1541358978971:Depression Level                    |depress       |Scale             | Range from 0=no depression to 21=severe depression
1541358978973:"
1541358978976:var.desc.df <- read.delim(textConnection(var.desc),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1541358978982:names(var.desc.df) <- unname(as.list(var.desc.df[1,])) # put headers on
1541358978988:var.desc.df <- var.desc.df[-1,] # remove first row
1541358979147:row.names(var.desc.df)<-NULL
1541358979153:pander(var.desc.df, style = 'rmarkdown')
1541359004064:len.tot <- count(sleep.survey)[[1]] #number of surveys
1541359107036:bar <- ggplot(sleep.survey, aes(fatigue, anxiety))
1541359107050:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Level of Fatigue", y = "HADS Anxiety Score", title="Figure 14: Anxiety Level by Fatigue Felt in Previous Month")
1541359489286:detach("package:knitr", unload=TRUE)
1541359516135:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541359516265:len.tot <- count(sleep.survey)[[1]] #number of surveys
1541359537252:?count
1541359544569:??count
1541359576283:library(dplyr)
1541359576699:#library(foreign)
1541359576702:#library(car)
1541359576799:#library(gmodels)
1541359576802:#library(pander)
1541359576806:#library(ggplot2)
1541359576809:#library(psych)
1541359576811:#library(semTools)
1541359576813:#library(plyr)
1541359576816:#library(userfriendlyscience)
1541359576818:#library(knitr)
1541359582694:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav")) #read in the dataset
1541359617383:library(foreign)
1541359617448:library(dplyr)
1541359617451:#library(car)
1541359617454:#library(gmodels)
1541359617457:#library(pander)
1541359617460:#library(ggplot2)
1541359617463:#library(psych)
1541359617466:#library(semTools)
1541359617468:#library(plyr)
1541359617470:#library(userfriendlyscience)
1541359617472:#library(knitr)
1541359621972:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav")) #read in the dataset
1541359621991:sleep.survey<-select(sleep.survey.full, id, anxiety, trubslep, trubstay, qualslp, ess, fatigue, depress) #select variables of interest
1541359622157:panderOptions('table.split.table', Inf)
1541359633322:library(foreign)
1541359633324:library(dplyr)
1541359633327:library(pander)
1541359633360:#library(car)
1541359633363:#library(gmodels)
1541359633365:#library(ggplot2)
1541359633367:#library(psych)
1541359633369:#library(semTools)
1541359633371:#library(plyr)
1541359633374:#library(userfriendlyscience)
1541359633376:#library(knitr)
1541359638511:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav")) #read in the dataset
1541359638705:sleep.survey<-select(sleep.survey.full, id, anxiety, trubslep, trubstay, qualslp, ess, fatigue, depress) #select variables of interest
1541359638713:panderOptions('table.split.table', Inf)
1541359638716:var.desc <- "
1541359638718:Concept                             |Variable Name |Statistical Type  | Possible Values
1541359638720:Anxiety Level                       |anxiety       |Scale             | Range from 0=no anxiety to 21=severe anxiety
1541359638722:Trouble falling asleep?             |trubslep      |Nominal           | 1=yes 2=no
1541359638724:Trouble staying asleep?             |trubstay      |Nominal           | 1=yes 2=no
1541359638729:Quality of Sleep                    |qualslp       |Ordinal           | 1=very poor, 2=poor, 3=fair, 4=good, 5=very good, 6=excellent
1541359638731:Sleepiness Level                    |ess           |Scale             | Range from 0=low to 24=high daytime sleepiness
1541359638733:Rate level of fatigue over last week|fatigue       |Ordinal           | 1=not at all 10=to a great extent
1541359638735:Depression Level                    |depress       |Scale             | Range from 0=no depression to 21=severe depression
1541359638737:"
1541359638740:var.desc.df <- read.delim(textConnection(var.desc),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1541359638747:names(var.desc.df) <- unname(as.list(var.desc.df[1,])) # put headers on
1541359638752:var.desc.df <- var.desc.df[-1,] # remove first row
1541359638757:row.names(var.desc.df)<-NULL
1541359638762:pander(var.desc.df, style = 'rmarkdown')
1541359643064:len.tot <- count(sleep.survey)[[1]] #number of surveys
1541359647658:num.na.anxiety <- sum(is.na(sleep.survey$anxiety)) #number of null values in anxiety
1541359647662:num.anx <- len.tot - num.na.anxiety #number of non-null values in anxiety
1541359647665:range.anx <- range(sleep.survey$anxiety, na.rm = TRUE) #range of anxiety values excluding nulls
1541359649848:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541359663350:library(foreign)
1541359663352:library(dplyr)
1541359663355:library(pander)
1541359663358:library(ggplot2)
1541359663453:#library(car)
1541359663455:#library(gmodels)
1541359663459:#library(psych)
1541359663462:#library(semTools)
1541359663465:#library(plyr)
1541359663467:#library(userfriendlyscience)
1541359663469:#library(knitr)
1541359669631:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541359669637:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541359669804:gg <- gg + labs(x="HADS Anxiety Level")
1541359669817:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541359669837:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541359669855:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541359669874:gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1541359673564:qqnorm(sleep.survey$anxiety, main="Figure 2: QQPlot of HADS Anxiety Score")
1541359673636:qqline(sleep.survey$anxiety, col=2)
1541359676476:tpskew.anx<-semTools::skew(sleep.survey$anxiety)
1541359676480:tpkurt.anx<-semTools::kurtosis(sleep.survey$anxiety)
1541359679849:scale.anx <-  scale(sleep.survey$anxiety)
1541359679854:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541359679858:hist(scale.anx, breaks = 30, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', main='Figure 3: Histogram of Scaled Anxiety Score')
1541359679970:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541359683815:num.trubslep <- summary(sleep.survey$trubslep)
1541359683820:perc.trubslep <- round(100*num.trubslep/len.tot, 2)
1541359683823:table.trubslep <- rbind(num.trubslep, perc.trubslep)
1541359683929:plot(sleep.survey$trubslep, main='Figure 4: Histogram of Trouble Falling Asleep', col='mediumorchid2', xlab='Trouble Falling Asleep', ylab='Number of Responses')
1541359687877:psych::describeBy(sleep.survey$anxiety, sleep.survey$trubslep)
1541359691944:num.trubstay <- summary(sleep.survey$trubstay)
1541359691948:perc.trubstay <- round(100*num.trubstay/len.tot, 2)
1541359691952:table.trubstay <- rbind(num.trubstay, perc.trubstay)
1541359691957:plot(sleep.survey$trubstay, main='Figure 6: Histogram of Trouble Staying Asleep', col='mediumorchid2', xlab='Trouble Staying Asleep', ylab='Number of Responses')
1541359694915:psych::describeBy(sleep.survey$anxiety, sleep.survey$trubstay)
1541359697631:bar <- ggplot(sleep.survey, aes(trubstay, anxiety))
1541359697747:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "mediumorchid2") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Trouble Falling Asleep", y = "HADS Anxiety Score", title="Figure 7: Anxiety Level by Trouble Staying Asleep")
1541359701189:num.qual <- summary(sleep.survey$qualslp)
1541359701193:perc.qual <- round(100*num.qual/len.tot, 2)
1541359701197:table.qual <- rbind(num.qual, perc.qual)
1541359701303:table.qual
1541359701321:plot(sleep.survey$qualslp, main='Figure 8: Histogram of Quality of Sleep', col='mediumorchid2', xlab='Reported Quality of Sleep', ylab='Number of Responses')
1541359704662:desc.anx.qual <- psych::describeBy(sleep.survey$anxiety, sleep.survey$qualslp)
1541359704759:desc.anx.qual
1541359710040:bar <- ggplot(sleep.survey, aes(qualslp, anxiety))
1541359710054:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure 9: Anxiety Level by Quality of Sleep")
1541359713597:num.na.ess <- sum(is.na(sleep.survey$ess))
1541359713601:num.ess <- len.tot - num.na.ess
1541359713604:range.ess <- range(sleep.survey$ess, na.rm = TRUE)
1541359716474:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541359716479:gg <- ggplot(sleep.survey, aes(x=sleep.survey$ess))
1541359716595:gg <- gg + labs(x="Epworth Sleepiness Scale")
1541359716613:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541359716635:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541359716650:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$ess, na.rm=TRUE), sd=sd(sleep.survey$ess, na.rm=TRUE)))
1541359716823:gg+ggtitle('Figure 10: Distribution Epworth Sleepiness Scale')
1541359719689:qqnorm(sleep.survey$ess, main="Figure 11: QQPlot of Epworth Sleepiness Scale")
1541359719753:qqline(sleep.survey$ess, col=2)
1541359722727:tpskew.ess<-semTools::skew(sleep.survey$ess)
1541359722731:tpkurt.ess<-semTools::kurtosis(sleep.survey$ess)
1541359725949:scale.ess <-  scale(sleep.survey$ess)
1541359725954:range.scale.ess <- round(range(scale.ess, na.rm = TRUE), 2)
1541359725958:hist(scale.ess, breaks = 20, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled ESS Score', main='Figure 12: Histogram of Scaled ESS Score')
1541359726073:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541359729883:is.na.fatigue <- sum(is.na(sleep.survey$fatigue)) #number of NAs
1541359729892:sum.fatigue <- sleep.survey %>% count(fatigue) #Number of each response
1541359730002:hist(sleep.survey$fatigue, breaks = 10, col='mediumorchid2', xlab='Fatigue felt in previous Month', main='Figure 13: Histogram of Fatigue felt in Previous Month', ylab='Number of Responses')
1541359733542:desc.anx.fatigue <- psych::describeBy(sleep.survey$anxiety, sleep.survey$fatigue)
1541359733609:desc.anx.fatigue
1541359737600:bar <- ggplot(sleep.survey, aes(fatigue, anxiety))
1541359737613:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Level of Fatigue", y = "HADS Anxiety Score", title="Figure 14: Anxiety Level by Fatigue Felt in Previous Month")
1541359740565:num.na.depress <- sum(is.na(sleep.survey$depress))
1541359740567:num.depress <- len.tot - num.na.depress
1541359740570:range.depress <- range(sleep.survey$depress, na.rm = TRUE)
1541359743564:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541359743573:gg <- ggplot(sleep.survey, aes(x=sleep.survey$depress))
1541359743688:gg <- gg + labs(x="Epworth Sleepiness Scale")
1541359743701:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541359743718:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541359743734:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$depress, na.rm=TRUE), sd=sd(sleep.survey$depress, na.rm=TRUE)))
1541359743905:gg+ggtitle('Figure 15: Distribution HADS Depression')
1541359746720:qqnorm(sleep.survey$depress, main="Figure 16: QQPlot of HADS Depression Score")
1541359746785:qqline(sleep.survey$depress, col=2)
1541359749506:tpskew.depress<-semTools::skew(sleep.survey$depress)
1541359749511:tpkurt.depress<-semTools::kurtosis(sleep.survey$depress)
1541359776816:library(foreign)
1541359776830:library(dplyr)
1541359776852:library(pander)
1541359776885:library(ggplot2)
1541359776951:library(psych)
1541359777023:library(semTools)
1541359777198:#library(car)
1541359777201:#library(gmodels)
1541359777205:#library(plyr)
1541359777208:#library(userfriendlyscience)
1541359777210:#library(knitr)
1541359777721:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541359777737:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav")) #read in the dataset
1541359777784:sleep.survey<-select(sleep.survey.full, id, anxiety, trubslep, trubstay, qualslp, ess, fatigue, depress) #select variables of interest
1541359777796:panderOptions('table.split.table', Inf)
1541359777799:var.desc <- "
1541359777801:Concept                             |Variable Name |Statistical Type  | Possible Values
1541359777803:Anxiety Level                       |anxiety       |Scale             | Range from 0=no anxiety to 21=severe anxiety
1541359777805:Trouble falling asleep?             |trubslep      |Nominal           | 1=yes 2=no
1541359777807:Trouble staying asleep?             |trubstay      |Nominal           | 1=yes 2=no
1541359777812:Quality of Sleep                    |qualslp       |Ordinal           | 1=very poor, 2=poor, 3=fair, 4=good, 5=very good, 6=excellent
1541359777814:Sleepiness Level                    |ess           |Scale             | Range from 0=low to 24=high daytime sleepiness
1541359777817:Rate level of fatigue over last week|fatigue       |Ordinal           | 1=not at all 10=to a great extent
1541359777819:Depression Level                    |depress       |Scale             | Range from 0=no depression to 21=severe depression
1541359777821:"
1541359777825:var.desc.df <- read.delim(textConnection(var.desc),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1541359777832:names(var.desc.df) <- unname(as.list(var.desc.df[1,])) # put headers on
1541359777838:var.desc.df <- var.desc.df[-1,] # remove first row
1541359777843:row.names(var.desc.df)<-NULL
1541359777849:pander(var.desc.df, style = 'rmarkdown')
1541359778177:len.tot <- count(sleep.survey)[[1]] #number of surveys
1541359778191:num.na.anxiety <- sum(is.na(sleep.survey$anxiety)) #number of null values in anxiety
1541359778194:num.anx <- len.tot - num.na.anxiety #number of non-null values in anxiety
1541359778198:range.anx <- range(sleep.survey$anxiety, na.rm = TRUE) #range of anxiety values excluding nulls
1541359778208:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541359778875:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541359778889:gg <- gg + labs(x="HADS Anxiety Level")
1541359778902:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541359778921:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541359778945:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541359778969:gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1541359779364:qqnorm(sleep.survey$anxiety, main="Figure 2: QQPlot of HADS Anxiety Score")
1541359779387:qqline(sleep.survey$anxiety, col=2)
1541359779409:tpskew.anx<-semTools::skew(sleep.survey$anxiety)
1541359779414:tpkurt.anx<-semTools::kurtosis(sleep.survey$anxiety)
1541359779424:scale.anx <-  scale(sleep.survey$anxiety)
1541359779429:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541359779433:hist(scale.anx, breaks = 30, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', main='Figure 3: Histogram of Scaled Anxiety Score')
1541359779444:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541359779464:num.trubslep <- summary(sleep.survey$trubslep)
1541359779469:perc.trubslep <- round(100*num.trubslep/len.tot, 2)
1541359779473:table.trubslep <- rbind(num.trubslep, perc.trubslep)
1541359779477:plot(sleep.survey$trubslep, main='Figure 4: Histogram of Trouble Falling Asleep', col='mediumorchid2', xlab='Trouble Falling Asleep', ylab='Number of Responses')
1541359779503:psych::describeBy(sleep.survey$anxiety, sleep.survey$trubslep)
1541359779591:bar <- ggplot(sleep.survey, aes(trubslep, anxiety))
1541359779609:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "mediumorchid2") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Trouble Falling Asleep", y = "HADS Anxiety Score", title="Figure 5: Anxiety Level by Trouble Falling Asleep")
1541359780531:num.trubstay <- summary(sleep.survey$trubstay)
1541359780687:perc.trubstay <- round(100*num.trubstay/len.tot, 2)
1541359780691:table.trubstay <- rbind(num.trubstay, perc.trubstay)
1541359780696:plot(sleep.survey$trubstay, main='Figure 6: Histogram of Trouble Staying Asleep', col='mediumorchid2', xlab='Trouble Staying Asleep', ylab='Number of Responses')
1541359780822:psych::describeBy(sleep.survey$anxiety, sleep.survey$trubstay)
1541359781005:bar <- ggplot(sleep.survey, aes(trubstay, anxiety))
1541359781122:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "mediumorchid2") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Trouble Falling Asleep", y = "HADS Anxiety Score", title="Figure 7: Anxiety Level by Trouble Staying Asleep")
1541359781383:num.qual <- summary(sleep.survey$qualslp)
1541359781387:perc.qual <- round(100*num.qual/len.tot, 2)
1541359781394:table.qual <- rbind(num.qual, perc.qual)
1541359781399:table.qual
1541359781418:plot(sleep.survey$qualslp, main='Figure 8: Histogram of Quality of Sleep', col='mediumorchid2', xlab='Reported Quality of Sleep', ylab='Number of Responses')
1541359781448:desc.anx.qual <- psych::describeBy(sleep.survey$anxiety, sleep.survey$qualslp)
1541359781490:desc.anx.qual
1541359781673:bar <- ggplot(sleep.survey, aes(qualslp, anxiety))
1541359781688:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure 9: Anxiety Level by Quality of Sleep")
1541359782373:num.na.ess <- sum(is.na(sleep.survey$ess))
1541359782377:num.ess <- len.tot - num.na.ess
1541359782381:range.ess <- range(sleep.survey$ess, na.rm = TRUE)
1541359782391:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541359782397:gg <- ggplot(sleep.survey, aes(x=sleep.survey$ess))
1541359782462:gg <- gg + labs(x="Epworth Sleepiness Scale")
1541359782476:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541359782494:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541359782510:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$ess, na.rm=TRUE), sd=sd(sleep.survey$ess, na.rm=TRUE)))
1541359782532:gg+ggtitle('Figure 10: Distribution Epworth Sleepiness Scale')
1541359783412:qqnorm(sleep.survey$ess, main="Figure 11: QQPlot of Epworth Sleepiness Scale")
1541359783425:qqline(sleep.survey$ess, col=2)
1541359783642:tpskew.ess<-semTools::skew(sleep.survey$ess)
1541359783646:tpkurt.ess<-semTools::kurtosis(sleep.survey$ess)
1541359783658:scale.ess <-  scale(sleep.survey$ess)
1541359783664:range.scale.ess <- round(range(scale.ess, na.rm = TRUE), 2)
1541359783667:hist(scale.ess, breaks = 20, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled ESS Score', main='Figure 12: Histogram of Scaled ESS Score')
1541359783677:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541359783697:is.na.fatigue <- sum(is.na(sleep.survey$fatigue)) #number of NAs
1541359783700:sum.fatigue <- sleep.survey %>% count(fatigue) #Number of each response
1541359783707:hist(sleep.survey$fatigue, breaks = 10, col='mediumorchid2', xlab='Fatigue felt in previous Month', main='Figure 13: Histogram of Fatigue felt in Previous Month', ylab='Number of Responses')
1541359783740:desc.anx.fatigue <- psych::describeBy(sleep.survey$anxiety, sleep.survey$fatigue)
1541359783816:desc.anx.fatigue
1541359784088:bar <- ggplot(sleep.survey, aes(fatigue, anxiety))
1541359784102:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Level of Fatigue", y = "HADS Anxiety Score", title="Figure 14: Anxiety Level by Fatigue Felt in Previous Month")
1541359784881:num.na.depress <- sum(is.na(sleep.survey$depress))
1541359784886:num.depress <- len.tot - num.na.depress
1541359784889:range.depress <- range(sleep.survey$depress, na.rm = TRUE)
1541359784901:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541359784908:gg <- ggplot(sleep.survey, aes(x=sleep.survey$depress))
1541359784922:gg <- gg + labs(x="Epworth Sleepiness Scale")
1541359784935:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541359785043:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541359785065:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$depress, na.rm=TRUE), sd=sd(sleep.survey$depress, na.rm=TRUE)))
1541359785084:gg+ggtitle('Figure 15: Distribution HADS Depression')
1541359785431:qqnorm(sleep.survey$depress, main="Figure 16: QQPlot of HADS Depression Score")
1541359785445:qqline(sleep.survey$depress, col=2)
1541359785465:tpskew.depress<-semTools::skew(sleep.survey$depress)
1541359785469:tpkurt.depress<-semTools::kurtosis(sleep.survey$depress)
1541359785478:scale.depress <-  scale(sleep.survey$depress)
1541359785483:range.scale.depress <- round(range(scale.depress, na.rm = TRUE), 2)
1541359785487:hist(scale.depress, breaks = 20, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled HADS Depression Score', main='Figure 17: Histogram of Scaled HADS Depression  Score')
1541359785496:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541359785514:lev.anx.fall <- leveneTest(anxiety ~ trubslep, data = sleep.survey)
1541359849693:??leveneTest
1541359862285:library(foreign)
1541359862350:library(dplyr)
1541359862380:library(pander)
1541359862454:library(psych)
1541359862910:library(semTools)
1541359863061:library(car)
1541359863356:#library(gmodels)
1541359863361:#library(plyr)
1541359863364:#library(userfriendlyscience)
1541359863367:#library(knitr)
1541359863448:knitr::opts_chunk$set(echo = TRUE, include=TRUE, warning=FALSE)
1541359863469:sleep.survey.full <- as.data.frame(read.spss("sleep5ED.sav")) #read in the dataset
1541359863511:sleep.survey<-select(sleep.survey.full, id, anxiety, trubslep, trubstay, qualslp, ess, fatigue, depress) #select variables of interest
1541359863522:panderOptions('table.split.table', Inf)
1541359863526:var.desc <- "
1541359863528:Concept                             |Variable Name |Statistical Type  | Possible Values
1541359863530:Anxiety Level                       |anxiety       |Scale             | Range from 0=no anxiety to 21=severe anxiety
1541359863532:Trouble falling asleep?             |trubslep      |Nominal           | 1=yes 2=no
1541359863535:Trouble staying asleep?             |trubstay      |Nominal           | 1=yes 2=no
1541359863540:Quality of Sleep                    |qualslp       |Ordinal           | 1=very poor, 2=poor, 3=fair, 4=good, 5=very good, 6=excellent
1541359863542:Sleepiness Level                    |ess           |Scale             | Range from 0=low to 24=high daytime sleepiness
1541359863544:Rate level of fatigue over last week|fatigue       |Ordinal           | 1=not at all 10=to a great extent
1541359863546:Depression Level                    |depress       |Scale             | Range from 0=no depression to 21=severe depression
1541359863549:"
1541359863553:var.desc.df <- read.delim(textConnection(var.desc),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
1541359863560:names(var.desc.df) <- unname(as.list(var.desc.df[1,])) # put headers on
1541359863565:var.desc.df <- var.desc.df[-1,] # remove first row
1541359863571:row.names(var.desc.df)<-NULL
1541359863577:pander(var.desc.df, style = 'rmarkdown')
1541359863593:len.tot <- count(sleep.survey)[[1]] #number of surveys
1541359863656:num.na.anxiety <- sum(is.na(sleep.survey$anxiety)) #number of null values in anxiety
1541359863661:num.anx <- len.tot - num.na.anxiety #number of non-null values in anxiety
1541359863666:range.anx <- range(sleep.survey$anxiety, na.rm = TRUE) #range of anxiety values excluding nulls
1541359863676:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541359863682:gg <- ggplot(sleep.survey, aes(x=sleep.survey$anxiety))
1541359864409:gg <- gg + labs(x="HADS Anxiety Level")
1541359864426:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541359864448:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541359864528:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$anxiety, na.rm=TRUE), sd=sd(sleep.survey$anxiety, na.rm=TRUE)))
1541359864551:gg+ggtitle('Figure 1: Distribution HADS Anxiety')
1541359864997:qqnorm(sleep.survey$anxiety, main="Figure 2: QQPlot of HADS Anxiety Score")
1541359865020:qqline(sleep.survey$anxiety, col=2)
1541359865040:tpskew.anx<-semTools::skew(sleep.survey$anxiety)
1541359865044:tpkurt.anx<-semTools::kurtosis(sleep.survey$anxiety)
1541359865055:scale.anx <-  scale(sleep.survey$anxiety)
1541359865059:range.scale.anx <- round(range(scale.anx, na.rm = TRUE), 2)
1541359865063:hist(scale.anx, breaks = 30, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled Anxiety Score', main='Figure 3: Histogram of Scaled Anxiety Score')
1541359865074:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541359865094:num.trubslep <- summary(sleep.survey$trubslep)
1541359865098:perc.trubslep <- round(100*num.trubslep/len.tot, 2)
1541359865102:table.trubslep <- rbind(num.trubslep, perc.trubslep)
1541359865107:plot(sleep.survey$trubslep, main='Figure 4: Histogram of Trouble Falling Asleep', col='mediumorchid2', xlab='Trouble Falling Asleep', ylab='Number of Responses')
1541359865136:psych::describeBy(sleep.survey$anxiety, sleep.survey$trubslep)
1541359865876:bar <- ggplot(sleep.survey, aes(trubslep, anxiety))
1541359865895:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "mediumorchid2") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Trouble Falling Asleep", y = "HADS Anxiety Score", title="Figure 5: Anxiety Level by Trouble Falling Asleep")
1541359866195:num.trubstay <- summary(sleep.survey$trubstay)
1541359866300:perc.trubstay <- round(100*num.trubstay/len.tot, 2)
1541359866304:table.trubstay <- rbind(num.trubstay, perc.trubstay)
1541359866308:plot(sleep.survey$trubstay, main='Figure 6: Histogram of Trouble Staying Asleep', col='mediumorchid2', xlab='Trouble Staying Asleep', ylab='Number of Responses')
1541359866335:psych::describeBy(sleep.survey$anxiety, sleep.survey$trubstay)
1541359866421:bar <- ggplot(sleep.survey, aes(trubstay, anxiety))
1541359866470:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "mediumorchid2") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Trouble Falling Asleep", y = "HADS Anxiety Score", title="Figure 7: Anxiety Level by Trouble Staying Asleep")
1541359867039:num.qual <- summary(sleep.survey$qualslp)
1541359867044:perc.qual <- round(100*num.qual/len.tot, 2)
1541359867049:table.qual <- rbind(num.qual, perc.qual)
1541359867055:table.qual
1541359867075:plot(sleep.survey$qualslp, main='Figure 8: Histogram of Quality of Sleep', col='mediumorchid2', xlab='Reported Quality of Sleep', ylab='Number of Responses')
1541359867106:desc.anx.qual <- psych::describeBy(sleep.survey$anxiety, sleep.survey$qualslp)
1541359867214:desc.anx.qual
1541359867291:bar <- ggplot(sleep.survey, aes(qualslp, anxiety))
1541359867307:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Quality of Sleep", y = "HADS Anxiety Score", title="Figure 9: Anxiety Level by Quality of Sleep")
1541359867553:num.na.ess <- sum(is.na(sleep.survey$ess))
1541359867556:num.ess <- len.tot - num.na.ess
1541359867560:range.ess <- range(sleep.survey$ess, na.rm = TRUE)
1541359867570:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541359867575:gg <- ggplot(sleep.survey, aes(x=sleep.survey$ess))
1541359867589:gg <- gg + labs(x="Epworth Sleepiness Scale")
1541359867605:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541359867623:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541359867638:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$ess, na.rm=TRUE), sd=sd(sleep.survey$ess, na.rm=TRUE)))
1541359867657:gg+ggtitle('Figure 10: Distribution Epworth Sleepiness Scale')
1541359868589:qqnorm(sleep.survey$ess, main="Figure 11: QQPlot of Epworth Sleepiness Scale")
1541359868606:qqline(sleep.survey$ess, col=2)
1541359868676:tpskew.ess<-semTools::skew(sleep.survey$ess)
1541359868681:tpkurt.ess<-semTools::kurtosis(sleep.survey$ess)
1541359868693:scale.ess <-  scale(sleep.survey$ess)
1541359868699:range.scale.ess <- round(range(scale.ess, na.rm = TRUE), 2)
1541359868703:hist(scale.ess, breaks = 20, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled ESS Score', main='Figure 12: Histogram of Scaled ESS Score')
1541359868713:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541359868737:is.na.fatigue <- sum(is.na(sleep.survey$fatigue)) #number of NAs
1541359868740:sum.fatigue <- sleep.survey %>% count(fatigue) #Number of each response
1541359868747:hist(sleep.survey$fatigue, breaks = 10, col='mediumorchid2', xlab='Fatigue felt in previous Month', main='Figure 13: Histogram of Fatigue felt in Previous Month', ylab='Number of Responses')
1541359868855:desc.anx.fatigue <- psych::describeBy(sleep.survey$anxiety, sleep.survey$fatigue)
1541359868975:desc.anx.fatigue
1541359869537:bar <- ggplot(sleep.survey, aes(fatigue, anxiety))
1541359869553:bar + stat_summary(fun.y = mean, geom = "bar", fill = "mediumorchid2", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Level of Fatigue", y = "HADS Anxiety Score", title="Figure 14: Anxiety Level by Fatigue Felt in Previous Month")
1541359869787:num.na.depress <- sum(is.na(sleep.survey$depress))
1541359869791:num.depress <- len.tot - num.na.depress
1541359869794:range.depress <- range(sleep.survey$depress, na.rm = TRUE)
1541359869805:theme_update(plot.title = element_text(hjust = 0.5, face="bold"))
1541359869810:gg <- ggplot(sleep.survey, aes(x=sleep.survey$depress))
1541359869822:gg <- gg + labs(x="Epworth Sleepiness Scale")
1541359869835:gg <- gg + geom_histogram(binwidth=1, colour="black", aes(y=..density.., fill=..count..))
1541359869852:gg <- gg + scale_fill_gradient("Count", low="gray96", high="darkviolet")
1541359869868:gg <- gg + stat_function(fun=dnorm, color="red", size=1, args=list(mean=mean(sleep.survey$depress, na.rm=TRUE), sd=sd(sleep.survey$depress, na.rm=TRUE)))
1541359869887:gg+ggtitle('Figure 15: Distribution HADS Depression')
1541359870713:qqnorm(sleep.survey$depress, main="Figure 16: QQPlot of HADS Depression Score")
1541359870732:qqline(sleep.survey$depress, col=2)
1541359870908:tpskew.depress<-semTools::skew(sleep.survey$depress)
1541359870912:tpkurt.depress<-semTools::kurtosis(sleep.survey$depress)
1541359870923:scale.depress <-  scale(sleep.survey$depress)
1541359870928:range.scale.depress <- round(range(scale.depress, na.rm = TRUE), 2)
1541359870932:hist(scale.depress, breaks = 20, col='mediumorchid2', xlim=range(-3.35, 3.35), xlab='Scaled HADS Depression Score', main='Figure 17: Histogram of Scaled HADS Depression  Score')
1541359870942:abline(v=c(-3.29, 3.29), col='red', lwd = 2)
1541359870961:lev.anx.fall <- leveneTest(anxiety ~ trubslep, data = sleep.survey)
1541359871071:lev.anx.fall
1541359871195:ttest.anx.fall <- t.test(anxiety ~ trubslep, var.equal = FALSE, data = sleep.survey, paired = FALSE)
1541359871206:ttest.anx.fall
1541359871231:d.fall <-  2*ttest.anx.fall[[1]]/sqrt(ttest.anx.fall[[2]]) #Cohen's d
1541359871304:lev.anx.stay <- leveneTest(anxiety ~ trubstay, data = sleep.survey)
1541359871606:lev.anx.stay
1541359871726:ttest.anx.stay <- t.test(anxiety ~ trubstay, var.equal = TRUE, data = sleep.survey, paired = FALSE)
1541359871737:ttest.anx.stay
1541359871763:d.stay <-  2*ttest.anx.stay[[1]]/sqrt(ttest.anx.stay[[2]])
1541359871771:aov.anx.qual <- aov(sleep.survey$anxiety ~ sleep.survey$qualslp, data = sleep.survey)
1541359871857:summary(aov.anx.qual)
1541359871888:bar.anx.qual <- bartlett.test(sleep.survey$anxiety, sleep.survey$qualslp)
1541359871895:bar.anx.qual
1541359871910:posthoc.qual <- oneway(x = sleep.survey$qualslp, y = sleep.survey$anxiety, posthoc = 'Tukey')
1541359886189:library(foreign)
1541359886193:library(dplyr)
1541359886255:library(psych)
1541359886259:library(semTools)
1541359886263:library(car)
1541359886267:library(userfriendlyscience)
1541359887616:#library(gmodels)
1541359887621:#library(plyr)
1541359887624:#library(knitr)
1541444988476:knitr::opts_chunk$set(echo = TRUE)
1541444988651:prop_read <- read_tsv('dublin property trends.txt')
1541444992970:library('ggplot2')
1541444993046:library('rnoaa')
1541444997452:employ_read <- read_delim('dublin employment trends.txt', ':')
1541445002921:knitr::opts_chunk$set(echo = TRUE)
1541445007081:library('ggplot2')
1541445007081:library('rnoaa')
1541445009545:employ_read <- read_delim('dublin employment trends.txt', ':')
1541445018745:?read.delim
1541445052002:library('utils')
1541445052002:library('ggplot2')
1541445052002:library('rnoaa')
1541445055624:employ_read <- read_delim('dublin employment trends.txt', ':')
1541445068552:?read.delim
1541445085734:employ_read <- read.delim('dublin employment trends.txt', ':')
1541445099691:?read_delim
1541445106193:??read_delim
1541445116259:library('readr')
1541445116292:library('ggplot2')
1541445116292:library('rnoaa')
1541445120213:employ_read <- read_delim('dublin employment trends.txt', ':')
1541445120326:qplot(data = employ_read , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006???2016") + facet_grid ( .~ Sector)
1541445149428:employ.read <- read_delim('dublin employment trends.txt', ':')
1541445149438:qplot(data = employ.read , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006???2016") + facet_grid ( .~ Sector)
1541445152730:prop.read <- read_tsv('dublin property trends.txt')
1541445152851:qplot(data = prop.read , x = Time , y = Trend, geom = 'line', colour = Category, xlab = "Time", ylab = "Trend", main = "Dublin Property Trends: 2007 - 2016")
1541445165231:library('httr')
1541445165231:library('plyr')
1541445165354:library('jsonlite')
1541445165364:stations <- GET('https://api.jcdecaux.com/vls/v1/stations?apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541445165845:http_type(stations)
1541445165861:stations.df <- jsonlite::fromJSON(content(stations, "text"), simplifyVector = TRUE)
1541445165975:count(stations.df, vars = 'contract_name')
1541445246395:?qplot
1541445338513:qplot(bike_stands, available_bike_stands, bike.df)
1541445344948:bike <- GET('https://api.jcdecaux.com/vls/v1/stations?contract=Dublin&apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541445345298:http_type(bike)
1541445345303:bike.df <- jsonlite::fromJSON(content(bike, "text"), simplifyVector = TRUE)
1541445345340:bike.df
1541445352735:qplot(bike_stands, available_bike_stands, bike.df)
1541445358403:str(bike.df)
1541445370783:qplot(bike_stands, available_bike_stands,data = bike.df)
1541445389929:qplot(bike_stands, available_bike_stands, status, data = bike.df)
1541445480988:qplot(bike_stands, name, data = bike.df)
1541445502319:qplot(bike_stands, name, data = bike.df, colour = available_bike_stands)
1541445566535:bike <- GET('https://api.jcdecaux.com/vls/v1/stations?contract=Vilnius&apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541445566765:http_type(bike)
1541445566771:bike.df <- jsonlite::fromJSON(content(bike, "text"), simplifyVector = TRUE)
1541445566790:bike.df
1541445572504:str(bike.df)
1541445577332:qplot(bike_stands, name, data = bike.df, colour = available_bike_stands)
1541445609387:qplot(bike_stands, name, data = bike.df, colour = available_bikes)
1541445724285:qplot(available_bikes, name, data = bike.df, colour = status)
1541445767294:qplot(available_bikes, name, data = bike.df, colour = available_bike_stands)
1541445789284:str(bike.df)
1541445840122:qplot(available_bikes, name, data = bike.df, colour = status)
1541445859971:bike <- GET('https://api.jcdecaux.com/vls/v1/stations?contract=Santander&apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541445862308:http_type(bike)
1541445862323:bike.df <- jsonlite::fromJSON(content(bike, "text"), simplifyVector = TRUE)
1541445862389:bike.df
1541445867243:str(bike.df)
1541445871361:qplot(available_bikes, name, data = bike.df, colour = status)
1541445951566:head(bike.df)
1541445969757:bike.df[order(name),]
1541445978082:head(bike.df)
1541445994850:bike.df[order(bike.df$name),]
1541446016163:bike.df <- bike.df[order(bike.df$name),]
1541446020922:qplot(available_bikes, name, data = bike.df, colour = status)
1541446035480:qplot(available_bikes, name, data = bike.df[order(bike.df$name),] , colour = status)
1541446193740:?qplot
1541446229893:qplot(available_bikes, name, data = bike.df , colour = status)
1541446236579:qplot(available_bikes, name, data = bike.df , colour = status, with x = seq_along(y))
1541446408520:qplot(available_bikes, name, data = bike.df , colour = status)
1541446612925:unzip('DublinBus')
1541447028866:unzip('DublinBus.zip')
1541447068159:setwd("C:/Users/Kate/OneDrive/Documents/R/Working with Data/wd_assign1/WWD_Assignment_Oct_2018")
1541447072066:unzip('DublinBus.zip')
1541449130337:trips.read <- read_csv('googletransitdublinbusp20130315-1546\trips.txt')
1541449148410:trips.read <- read_csv('C:\Users\Kate\OneDrive\Documents\R\Working with Data\wd_assign1\WWD_Assignment_Oct_2018\trips.txt')
1541449257963:knitr::opts_chunk$set(echo = TRUE)
1541449258029:trips.read <- read_csv('C:\Users\Kate\OneDrive\Documents\R\WorkingwithData\wd_assign1\WWD_Assignment_Oct_2018\trips.txt')
1541449290444:trips.read <- read_csv('C:/Users/Kate/OneDrive/Documents/R/WorkingwithData/wd_assign1/WWD_Assignment_Oct_2018/trips.txt')
1541449295909:library('readr')
1541449295995:library('ggplot2')
1541449296036:library('rnoaa')
1541449296450:library('httr')
1541449296458:library('plyr')
1541449296464:library('jsonlite')
1541449299640:trips.read <- read_csv('C:/Users/Kate/OneDrive/Documents/R/WorkingwithData/wd_assign1/WWD_Assignment_Oct_2018/trips.txt')
1541449328246:trips.read <- read_csv('C:\Users\Kate\OneDrive\Documents\R\WorkingwithData\wd_assign1\WWD_Assignment_Oct_2018\googletransitdublinbusp20130315-1546\trips.txt')
1541449392473:trips.read <- read_csv('C:\\Users\\Kate\\OneDrive\\Documents\\R\\WorkingwithData\\wd_assign1\\WWD_Assignment_Oct_2018\\googletransitdublinbusp20130315-1546\\trips.txt')
1541449403927:trips.read
1541449444024:trips.read <- read_csv('C:\\Users\\Kate\\OneDrive\\Documents\\R\\WorkingwithData\\wd_assign1\\WWD_Assignment_Oct_2018\\googletransitdublinbusp20130315-1546\\trips.txt')
1541449444096:agency <- read_csv('googletransitdublinbusp20130315-1546\\agency.txt')
1541449570100:trips.df <- read_csv('googletransitdublinbusp20130315-1546\\trips.txt')
1541449570173:routes.df <- read_csv('googletransitdublinbusp20130315-1546\\routes.txt')
1541449570199:calendar.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar.txt')
1541449570222:calendar_dates.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar_dates.txt')
1541449570236:shapes.df <- read_csv('googletransitdublinbusp20130315-1546\\shapes.txt')
1541449570341:stop_times.df <- read_csv('googletransitdublinbusp20130315-1546\\stop_times.txt')
1541449572168:stops.df <- read_csv('googletransitdublinbusp20130315-1546\\stops.txt')
1541449572199:transfers.df <- read_csv('googletransitdublinbusp20130315-1546\\transfers.txt')
1541449572317:agency.df <- read_csv('googletransitdublinbusp20130315-1546\\agency.txt')
1541449617520:trips.df <- read_csv('googletransitdublinbusp20130315-1546\\trips.txt')
1541449617591:routes.df <- read_csv('googletransitdublinbusp20130315-1546\\routes.txt')
1541449617615:calendar.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar.txt')
1541449617637:calendar_dates.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar_dates.txt')
1541449617651:shapes.df <- read_csv('googletransitdublinbusp20130315-1546\\shapes.txt')
1541449617768:stops.df <- read_csv('googletransitdublinbusp20130315-1546\\stops.txt')
1541449617792:transfers.df <- read_csv('googletransitdublinbusp20130315-1546\\transfers.txt')
1541449617804:agency.df <- read_csv('googletransitdublinbusp20130315-1546\\agency.txt')
1541449625076:stop_times.df <- read_csv('googletransitdublinbusp20130315-1546\\stop_times.txt')
1541449653923:problems(...)
1541449745876:head(stop_times.df)
1541449836463:summary(trip.df)
1541449844699:trips.df <- read_csv('googletransitdublinbusp20130315-1546\\trips.txt')
1541449844816:routes.df <- read_csv('googletransitdublinbusp20130315-1546\\routes.txt')
1541449844846:calendar.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar.txt')
1541449844868:calendar_dates.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar_dates.txt')
1541449844882:shapes.df <- read_csv('googletransitdublinbusp20130315-1546\\shapes.txt')
1541449844990:stops.df <- read_csv('googletransitdublinbusp20130315-1546\\stops.txt')
1541449845012:transfers.df <- read_csv('googletransitdublinbusp20130315-1546\\transfers.txt')
1541449845025:agency.df <- read_csv('googletransitdublinbusp20130315-1546\\agency.txt')
1541449845042:stop_times.df <- read_csv('googletransitdublinbusp20130315-1546\\stop_times.txt') #might be issues with stop_times
1541449852890:summary(trips.df)
1541449900353:left_join(trips.df, routes.df, by = 'route_id)
1541449909964:left_join(trips.df, routes.df, by = 'route_id')
1541449928829:?left_join
1541449946268:library('readr')
1541449946268:library('ggplot2')
1541449946268:library('rnoaa')
1541449946268:library('httr')
1541449946280:library('plyr')
1541449946334:library('jsonlite')
1541449946334:library('dplyr)
1541449951208:library('readr')
1541449951208:library('ggplot2')
1541449951208:library('rnoaa')
1541449951208:library('httr')
1541449951310:library('plyr')
1541449951312:library('jsonlite')
1541449951315:library('dplyr')
1541449962141:left_join(trips.df, routes.df, by = 'route_id')
1541450657945:head(routes.df)
1541450699776:count(routes.df, route_short_name)
1541450713891:count(routes.df$route_short_name)
1541529449197:knitr::opts_chunk$set(echo = TRUE)
1541529451498:library('readr')
1541529451715:library('ggplot2')
1541529451865:library('rnoaa')
1541529452623:library('httr')
1541529452640:library('plyr')
1541529452653:library('jsonlite')
1541529452667:library('dplyr')
1541529456545:employ.read <- read_delim('dublin employment trends.txt', ':')
1541529456790:qplot(data = employ.read , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006???2016") + facet_grid ( .~ Sector)
1541529463246:stations <- GET('https://api.jcdecaux.com/vls/v1/stations?apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541529463643:http_type(stations)
1541529463652:stations.df <- jsonlite::fromJSON(content(stations, "text"), simplifyVector = TRUE)
1541529463966:count(stations.df, vars = 'contract_name')
1541529470855:stations <- GET('https://api.jcdecaux.com/vls/v1/stations?apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541529471103:http_type(stations)
1541529471114:stations.df <- jsonlite::fromJSON(content(stations, "text"), simplifyVector = TRUE)
1541529471469:count(stations.df, vars = 'contract_name')
1541529483272:stations.df
1541621300134:# Chunk 1: setup
1541621300138:knitr::opts_chunk$set(echo = TRUE)
1541621300141:# Chunk 2
1541621300144:library(corpcor)
1541621300147:library(GPArotation)
1541621300169:library(psych)
1541621300301:library(REdaS)
1541621300338:library(Hmisc)
1541621300340:library(corrplot)
1541621300342:library(ggcorrplot)
1541621300345:library(factoextra)
1541621300347:library(nFactors)
1541621300350:# Chunk 3
1541621300351:#We are using a .dat file from Field, Miles and Field Discovering Statistics with R, a survey on fear of statistics - raq.dat
1541621300353:#load data
1541621300354:raqData<-read.delim("raq.dat", header = TRUE)
1541621300359:#create a correlation matrix (these are just some methods)
1541621300360:raqMatrix<-cor(raqData)
1541621300362:round(raqMatrix, 2)
1541621300364:Hmisc::rcorr(as.matrix(raqData))
1541621300368:# Chunk 4
1541621300369:#Using ggcorrplot
1541621300371:p.mat <- ggcorrplot::cor_pmat(raqData)
1541621300374:ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data")
1541621300377:#Showing Xs for non-significant correlations
1541621300379:ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data", p.mat = p.mat, sig.level = .05)
1541621300382:#Showing lower diagonal
1541621300383:ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data", p.mat = p.mat, sig.level = .05, type="lower")
1541621300388:#Showing the co-efficients
1541621300389:ggcorrplot::ggcorrplot(raqMatrix, lab=TRUE, title = "Correlation matrix for RAQ data",  type="lower")
1541621300394:# Chunk 5
1541621300395:#Visualisation of correlations using circles
1541621300397:#corrplot parameters method = c("circle", "square", "ellipse", "number", "shade",
1541621300398:#"color", "pie")
1541621300399:#type = c("full", "lower", "upper"),
1541621300401:corrplot::corrplot(raqMatrix, method="circle")
1541621300404:corrplot::corrplot(raqMatrix, method="circle", type="upper")
1541621300408:#Visualisation using numbers
1541621300410:corrplot::corrplot(raqMatrix, method="number")
1541621300414:#Visualisation of significance levels at 0.05
1541621300415:res1 <- corrplot::cor.mtest(raqMatrix, conf.level = .95)
1541621300419:corrplot::corrplot(raqMatrix, p.mat = res1$p, type="lower", sig.level = .05)
1541621300424:#Showing p-value for non-significant results
1541621300425:corrplot(raqMatrix, p.mat = res1$p, type="lower",insig = "p-value")
1541621300428:# Chunk 6
1541621300430:# Chunk 7
1541621300431:#Bartlett's test
1541621300433:psych::cortest.bartlett(raqData)
1541621300436:psych::cortest.bartlett(raqMatrix, n = 2571)
1541621300439:#KMO (execute one of these):
1541621300440:REdaS::KMOS(raqData)
1541621300444:psych::KMO(raqData)
1541621300447:#Determinent (execute one of these):
1541621300448:det(raqMatrix)
1541621300450:det(cor(raqData))
1541621300453:# Chunk 8
1541621300454:#pcModel<-principal(dataframe/R-matrix, nfactors = number of factors, rotate = "method of rotation", scores = TRUE)
1541621300455:#On raw data using principal components analysis
1541621300457:#For PCA we know how many factors if is possible to find
1541621300458:#principal will work out our loadings of each variable onto each component, the proportion each component explained and the cummulative proportion of variance explai
1541621300459:pc1 <-  principal(raqData, nfactors = 23, rotate = "none")
1541621300462:pc1 <-  principal(raqData, nfactors = length(raqData), rotate = "none")
1541621300463:pc1#output all details of the PCA
1541621300465:psych::print.psych(pc1, cut = 0.3, sort = TRUE)
1541621300471:fa.diagram(pc1) #create a diagram showing the components and how the manifest variables load
1541621300473:fa.sort(pc1$loading) #Loadings of variables on to components
1541621300476:pc1$communality #Communalities of variables across components (will be one for PCA since all the variance is used)
1541621300478:plot(pc1$values, type = "b") #scree plot
1541621300480:pc1$Vaccounted
1541621300481:pc1$values #output eigenvalues
1541621300483:#Another way to look at eigen values plus variance explained (need to use princomp function fof PCA to get right class for use with factoextra dunctions)
1541621300484:pcf=princomp(raqData)
1541621300486:factoextra::get_eigenvalue(pcf)
1541621300489:factoextra::fviz_eig(pcf, addlabels = TRUE, ylim = c(0, 50))#Visualise the Eigenvalues
1541621300493:factoextra::fviz_pca_var(pcf, col.var = "black")
1541621300495:factoextra::fviz_pca_var(pcf, col.var = "cos2",
1541621300497:gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
1541621300498:repel = TRUE # Avoid text overlapping
1541621300499:)
1541621300506:#VIsualise contribution of variables
1541621300507:var <- factoextra::get_pca_var(pcf)
1541621300511:corrplot::corrplot(var$contrib, is.corr=FALSE)
1541621300515:# Contributions of variables to PC1
1541621300516:factoextra::fviz_contrib(pcf, choice = "var", axes = 1, top = 10)
1541621300519:# Contributions of variables to PC2
1541621300520:factoextra::fviz_contrib(pcf, choice = "var", axes = 2, top = 10)
1541621300524:#PCA with rotation
1541621300525:pc2 <-  principal(raqData, nfactors = 4, rotate = "varimax")#Extracting 4 factors
1541621300527:psych::print.psych(pc2, cut = 0.3, sort = TRUE)
1541621300529:pc2$communality
1541621300532:# Chunk 9
1541621300534:#Factor Analysis
1541621300535:#Principal Axis Factoring
1541621300536:pc3 <- fa(raqMatrix, nfactors=4, obs=NA, n.iter=1, rotate="varimax", fm="pa")
1541621300539:psych::print.psych(pc3,cut=0.3, sort=TRUE)
1541621300542:fa.sort(pc3$loading)
1541621300543:fa.diagram(pc3)#create a diagram showing the factors and how the manifest variables load
1541621300546:plot(pc3$values, type = "b") #scree plot
1541621300548:pc3$Vaccounted#Variance accounted for
1541621300550:pc3$values #output eigenvalues
1541621300552:# Chunk 10
1541621300554:computerFear<-raqData[,c(6, 7, 10, 13, 14, 15, 18)]
1541621300556:statisticsFear <- raqData[, c(1, 3, 4, 5, 12, 16, 20, 21)]
1541621300557:mathFear <- raqData[, c(8, 11, 17)]
1541621300559:peerEvaluation <- raqData[, c(2, 9, 19, 22, 23)]
1541621300561:psych::alpha(computerFear)
1541621300564:psych::alpha(statisticsFear, keys = c(1, -1, 1, 1, 1, 1, 1, 1))
1541621300566:psych::alpha(mathFear)
1541621300568:psych::alpha(peerEvaluation)
1541621300570:psych::alpha(statisticsFear) #for illustrative pruposes
1541844601439:knitr::opts_chunk$set(echo = TRUE)
1541844601521:library('readr')
1541844601891:library('ggplot2')
1541844602182:library('rnoaa')
1541844602574:library('httr')
1541844602583:library('plyr')
1541844602617:library('jsonlite')
1541844602626:library('dplyr')
1541844602649:employ.read <- read_delim('dublin employment trends.txt', ':')
1541844602710:qplot(data = employ.read , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006???2016") + facet_grid ( .~ Sector)
1541844603497:prop.read <- read_tsv('dublin property trends.txt')
1541844603647:qplot(data = prop.read , x = Time , y = Trend, geom = 'line', colour = Category, xlab = "Time", ylab = "Trend", main = "Dublin Property Trends: 2007 - 2016")
1541844604070:stations <- GET('https://api.jcdecaux.com/vls/v1/stations?apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541844604746:http_type(stations)
1541844604753:stations.df <- jsonlite::fromJSON(content(stations, "text"), simplifyVector = TRUE)
1541844604857:count(stations.df, vars = 'contract_name')
1541844663084:stations <- GET('https://api.jcdecaux.com/vls/v1/stations?apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541844663330:http_type(stations)
1541844663335:stations.df <- jsonlite::fromJSON(content(stations, "text"), simplifyVector = TRUE)
1541844663661:count(stations.df, vars = 'contract_name')
1541844671619:stations <- GET('https://api.jcdecaux.com/vls/v1/stations?apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541844671970:http_type(stations)
1541844671975:stations.df <- jsonlite::fromJSON(content(stations, "text"), simplifyVector = TRUE)
1541844672078:#count(stations.df, vars = 'contract_name')
1541844677286:bike <- GET('https://api.jcdecaux.com/vls/v1/stations?contract=Santander&apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1541844677575:http_type(bike)
1541844677582:bike.df <- jsonlite::fromJSON(content(bike, "text"), simplifyVector = TRUE)
1541844677596:bike.df
1541844680851:bike.df <- bike.df[order(bike.df$name),]
1541844683072:str(bike.df)
1541844685683:qplot(available_bikes, name, data = bike.df , colour = status)
1541844688473:unzip('DublinBus.zip')
1541844692347:#loc.files=
1541844692349:trips.df <- read_csv('googletransitdublinbusp20130315-1546\\trips.txt')
1541844692476:routes.df <- read_csv('googletransitdublinbusp20130315-1546\\routes.txt')
1541844692504:calendar.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar.txt')
1541844692525:calendar_dates.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar_dates.txt')
1541844692539:shapes.df <- read_csv('googletransitdublinbusp20130315-1546\\shapes.txt')
1541844692704:stops.df <- read_csv('googletransitdublinbusp20130315-1546\\stops.txt')
1541844692729:transfers.df <- read_csv('googletransitdublinbusp20130315-1546\\transfers.txt')
1541844692742:agency.df <- read_csv('googletransitdublinbusp20130315-1546\\agency.txt')
1541844692757:stop_times.df <- read_csv('googletransitdublinbusp20130315-1546\\stop_times.txt') #might be issues with stop_times
1541845075863:left_join(routes.df, agency.df, by = "agency_id")
1541845091111:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(routes.df, agency.df, by = "agency_id")
1541845163041:stop_times.df
1541845831010:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id") %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id") %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541846082142:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id") %>%  #left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id") %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541846082148:#what to do about transfers?
1541846091903:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id")# %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id") %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541846092587:#what to do about transfers?
1541846101404:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id") %>%  left_join(., calendar.df, by = "service_id") #%>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id") %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541846102769:#what to do about transfers?
1541846109803:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id") %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id")# %>% left_join(., shapes.df, by = "shape_id") %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541846111792:#what to do about transfers?
1541846118457:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id") %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id")# %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541846170146:shape.id
1541846190298:shapes.id
1541846198863:shapes.df
1541846224771:trips.df
1541846249549:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id") %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") #%>% left_join(., shapes.df, by = "shape_id")# %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541846252065:#what to do about transfers?
1541846288620:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id") #%>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") #%>% left_join(., shapes.df, by = "shape_id")# %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541846288903:#what to do about transfers?
1541846319706:#loc.files=
1541846319708:trips.df <- read_csv('googletransitdublinbusp20130315-1546\\trips.txt')
1541846319803:routes.df <- read_csv('googletransitdublinbusp20130315-1546\\routes.txt')
1541846319834:calendar.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar.txt')
1541846319855:calendar_dates.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar_dates.txt')
1541846319868:shapes.df <- read_csv('googletransitdublinbusp20130315-1546\\shapes.txt')
1541846320096:stops.df <- read_csv('googletransitdublinbusp20130315-1546\\stops.txt')
1541846320124:transfers.df <- read_csv('googletransitdublinbusp20130315-1546\\transfers.txt')
1541846320137:agency.df <- read_csv('googletransitdublinbusp20130315-1546\\agency.txt')
1541846320155:stop_times.df <- read_csv('googletransitdublinbusp20130315-1546\\stop_times.txt') #might be issues with stop_times
1541846352808:left_join(trips.df, routes.df, by = 'route_id')# %>% left_join(., stop_times.df, by = "trip_id") #%>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") #%>% left_join(., shapes.df, by = "shape_id")# %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541846352976:#what to do about transfers?
1541846365830:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id") #%>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") #%>% left_join(., shapes.df, by = "shape_id")# %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541846366156:#what to do about transfers?
1541848001780:?left_join
1541848040618:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id") %>%  left_join(., calendar.df, by = "service_id") #%>% left_join(., calendar_dates.df, by = "service_id") #%>% left_join(., shapes.df, by = "shape_id")# %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541848040999:#what to do about transfers?
1541848046955:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id") %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") #%>% left_join(., shapes.df, by = "shape_id")# %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541848048969:#what to do about transfers?
1541848087206:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id") %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c("",".shp"))# %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541848125303:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id") %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") #%>% left_join(., shapes.df, by = "shape_id", suffix = c("",".shp"))# %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541848128456:#what to do about transfers?
1541848178362:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., stop_times.df, by = "trip_id") %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))# %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")
1541849084040:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))# %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")  %>% left_join(., stop_times.df, by = "trip_id")
1541849093026:#what to do about transfers?
1541849106728:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp")) %>% left_join(., stops.df, by = "stop_id") %>% left_join(., agency.df, by = "agency_id")#  %>% left_join(., stop_times.df, by = "trip_id")
1541849144197:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp")) %>% left_join(., agency.df, by = "agency_id")#  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id")
1541849205693:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp")) #%>% left_join(., agency.df, by = "agency_id")#  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id")
1541849221413:left_join(trips.df, routes.df, by = 'route_id')# %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1541849221749:#%>% left_join(., agency.df, by = "agency_id")#  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id")
1541849221752:#what to do about transfers?
1541849228543:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id")# %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1541849228694:#%>% left_join(., agency.df, by = "agency_id")#  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id")
1541849228699:#what to do about transfers?
1541849235751:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") #%>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1541849235922:#%>% left_join(., agency.df, by = "agency_id")#  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id")
1541849235928:#what to do about transfers?
1541849244212:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1541849253819:#%>% left_join(., agency.df, by = "agency_id")#  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id")
1541849253828:#what to do about transfers?
1541849280225:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id")
1541849290625:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1541849305685:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") #%>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1541849305863:#%>% left_join(., agency.df, by = "agency_id")#  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id")
1541849305865:#what to do about transfers?
1541849311031:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1541849319963:#%>% left_join(., agency.df, by = "agency_id")#  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id")
1541849319967:#what to do about transfers?
1541849329392:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id")
1541849338627:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1541849342953:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1541849352265:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") #%>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1541849352448:#%>% left_join(., agency.df, by = "agency_id")#  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id")
1541849352450:#what to do about transfers?
1541849356950:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1541849364491:#%>% left_join(., agency.df, by = "agency_id")#  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id")
1541849364502:#what to do about transfers?
1541849389078:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))  %>% left_join(., stop_times.df, by = "trip_id")
1541849396521:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))  %>% left_join(., stop_times.df, by = "trip_id")
1542050101010:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))  %>% left_join(., stop_times.df, by = "trip_id")
1542050132641:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id")  %>% left_join(., stop_times.df, by = "trip_id") #%>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1542050145748:stop_times.df
1542050173900:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id") # %>% left_join(., stop_times.df, by = "trip_id") #%>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1542050175301:#%>% left_join(., agency.df, by = "agency_id")#   %>% left_join(., stops.df, by = "stop_id")
1542050175303:#what to do about transfers?
1542050211393:dim(stop_times.df)
1542050224162:dim(trips.df)
1542050233743:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id")  %>% left_join(., stop_times.df, by = "trip_id") #%>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1542050261986:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id")  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id") #%>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1542050264672:#%>% left_join(., agency.df, by = "agency_id")#
1542050264675:#what to do about transfers?
1542050272839:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id")  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id") %>% left_join(., shapes.df, by = "shape_id", suffix = c(".x",".shp"))
1542050299499:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id")  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id") %>% left_join(., shapes.df, by = "shape_id")
1542050334535:dim(shapes.df)
1542050341436:left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id")  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id")# %>% left_join(., shapes.df, by = "shape_id")
1542050345389:#%>% left_join(., agency.df, by = "agency_id")#
1542050345397:#what to do about transfers?
1542050347675:shapes.df
1542050786377:#loc.files=
1542050786379:trips.df <- read_csv('googletransitdublinbusp20130315-1546\\trips.txt')
1542050786515:routes.df <- read_csv('googletransitdublinbusp20130315-1546\\routes.txt')
1542050786544:calendar.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar.txt')
1542050786566:calendar_dates.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar_dates.txt')
1542050786580:shapes.df <- read_csv('googletransitdublinbusp20130315-1546\\shapes.txt')
1542050786766:stops.df <- read_csv('googletransitdublinbusp20130315-1546\\stops.txt')
1542050786794:transfers.df <- read_csv('googletransitdublinbusp20130315-1546\\transfers.txt')
1542050786807:agency.df <- read_csv('googletransitdublinbusp20130315-1546\\agency.txt')
1542050786825:stop_times.df <- read_csv('googletransitdublinbusp20130315-1546\\stop_times.txt') #might be issues with stop_times
1542050831397:bus.df <- left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id")  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id")# %>% left_join(., shapes.df, by = "shape_id")
1542050838294:#%>% left_join(., agency.df, by = "agency_id")#
1542050838296:#what to do about transfers?
1542050883535:bus.df
1542050972499:routes.df
1542050992616:?count
1542051069567:unique(routes.df$route_id)
1542051170777:count(routes.df$route_id)
1542051185760:length(unique(routes.df$route_id))
1542051232407:routes.df
1542051353491:count(routes.df,route_type)
1542051475740:routes.df
1542051491956:trips.df
1542051536745:trips.df
1542051541111:trips.df
1542051651674:length(unique(trips.df$trip_id))
1542051713520:trips.df
1542051746858:count(trips.df, route_id)
1542051866455:count(left_join(trips.df, routes.df, route_id) route_short_name)
1542051884682:left_join(trips.df, routes.df, route_id)
1542051908380:left_join(trips.df, routes.df, by = 'route_id')
1542051926447:count(left_join(trips.df, routes.df, by = 'route_id'), route_short_name)
1542051944416:count(left_join(trips.df, routes.df, by = 'route_id'), c(route_short_name, route_long_name)
1542051953317:count(left_join(trips.df, routes.df, by = 'route_id'), c(route_short_name, route_long_name))
1542051991595:count(left_join(trips.df, routes.df, by = 'route_id'), route_long_name)
1542052014817:count(left_join(trips.df, routes.df, by = 'route_id'), route_short_name)
1542052022128:plot(count(left_join(trips.df, routes.df, by = 'route_id'), route_short_name))
1542052036099:plot(count(left_join(trips.df, routes.df, by = 'route_id'), route_long_name))
1542052062224:plot(count(left_join(trips.df, routes.df, by = 'route_id'), route_short_name))
1542052089658:count(left_join(trips.df, routes.df, by = 'route_id'), route_short_name, sort = TRUE)
1542052119970:hist(count(left_join(trips.df, routes.df, by = 'route_id'), route_short_name, sort = TRUE))
1542052127942:count(left_join(trips.df, routes.df, by = 'route_id'), route_short_name, sort = TRUE)
1542052285660:count(left_join(trips.df, routes.df, by = 'route_id'), route_short_name, , route_long_name, sort = TRUE)
1542052294549:count(left_join(trips.df, routes.df, by = 'route_id'), route_short_name, route_long_name, sort = TRUE)
1542052460831:length(unique(routes.df$route_id))
1542052467994:unique(routes.df$route_type)
1542052475830:length(unique(trips.df$trip_id)
1542052685501:calendar.df
1542052701815:calendar.df
1542052780849:count(left_join(trips.df, routes.df, by = 'route_id'), route_short_name, route_long_name, service_id, sort = TRUE)
1542052867709:calendar_dates.df
1542054143065:calendar.df
1542054156136:trips.df
1542054373686:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., shapes.df, by = 'shape_id')
1542054603098:count(left_join(trips.df, routes.df, by = 'route_id'), route_short_name, route_long_name, sort = TRUE)
1542054636553:calendar_dates.df
1542054949630:routes.df
1542054969473:?filter
1542054995534:filter(routes.df, route_short_name == '16)
1542055003501:filter(routes.df, route_short_name == 16)
1542055013379:filter(routes.df, route_short_name == 16)
1542055104954:left_join(trips.df, routes.df, by = 'route_id)
1542055110615:left_join(trips.df, routes.df, by = 'route_id')
1542055126785:left_join(trips.df, routes.df, by = 'route_id') %>% filter(., route_short_name == 16)
1542055227758:left_join(trips.df, routes.df, by = 'route_id') %>% filter(., route_short_name == 16) %>% count(., service_id)
1542055235846:left_join(trips.df, routes.df, by = 'route_id') %>% filter(., route_short_name == 16)# %>% count(., service_id)
1542055249506:left_join(trips.df, routes.df, by = 'route_id') %>% filter(., route_short_name == 16) %>% count(., service_id, direction_id)
1542055499550:stop_times.df
1542055596315:left_join(trips.df, stop_times.df, by = 'trip_id') %>% left_join(., routes.df, by = 'route_id') %>% filter(., route_short_name == 16)
1542055815914:left_join(trips.df, stop_times.df, by = 'trip_id') %>% left_join(., routes.df, by = 'route_id') %>% left_join(. ,stops.df, by = 'stop_id') %>% filter(., route_short_name == 16)
1542055867068:left_join(trips.df, stop_times.df, by = 'trip_id') %>% left_join(., routes.df, by = 'route_id') %>% left_join(. ,stops.df, by = 'stop_id') %>% filter(., route_short_name == 16) %>% select(., route_short_name, route_long_name)
1542055874188:left_join(trips.df, stop_times.df, by = 'trip_id') %>% left_join(., routes.df, by = 'route_id') %>% left_join(. ,stops.df, by = 'stop_id') %>% filter(., route_short_name == 16) #%>% select(., route_short_name, route_long_name)
1542056030039:route.16 <- left_join(trips.df, stop_times.df, by = 'trip_id') %>% left_join(., routes.df, by = 'route_id') %>% left_join(. ,stops.df, by = 'stop_id') %>% filter(., route_short_name == 16)
1542056038692:route.16 %>% select(., route_short_name, route_long_name)
1542056047752:route.16 <- left_join(trips.df, stop_times.df, by = 'trip_id') %>% left_join(., routes.df, by = 'route_id') %>% left_join(. ,stops.df, by = 'stop_id') %>% filter(., route_short_name == 16)
1542056048131:route.16
1542056106378:unique(route.16$pickup_type, route.16$drop_off_type)
1542056116568:unique(route.16$pickup_type)#, route.16$drop_off_type)
1542056132255:unique(route.16$pickup_type)
1542056132261:unique(route.16$drop_off_type)
1542057117361:install.packages('readODS')
1542057153052:library('readr')
1542057153054:library('ggplot2')
1542057153057:library('rnoaa')
1542057153060:library('httr')
1542057153063:library('plyr')
1542057153066:library('jsonlite')
1542057153068:library('dplyr')
1542057153071:library('readODS')
1542057161298:?readDS
1542057164865:?readODS
1542057168907:??readODS
1542057196337:url <- 'https://data.smartdublin.ie/dataset/8204be0a-6348-459e-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5-8e61899951e9/download/pedestrianfootfall2013.ods'
1542057196341:read_ods(path = url)
1542057246345:url <- 'https://data.smartdublin.ie/dataset/8204be0a-6348-459e-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5-8e61899951e9/download/pedestrianfootfall2013.ods'
1542057246350:download.file(url)
1542057253311:?download.file
1542057266742:url.footfall <- 'https://data.smartdublin.ie/dataset/8204be0a-6348-459e-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5-8e61899951e9/download/pedestrianfootfall2013.ods'
1542057266746:download.file(url.footfall)
1542057309149:url.footfall <- 'https://data.smartdublin.ie/dataset/8204be0a-6348-459e-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5-8e61899951e9/download/pedestrianfootfall2013.ods'
1542057309154:download.file(url.footfall, 'footfall_ods')
1542057310329:#read_ods(path = url)
1542057354949:read_ods(footfall_ods)
1542057371288:?read_ods
1542057419016:url.footfall <- 'https://data.smartdublin.ie/dataset/8204be0a-6348-459e-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5-8e61899951e9/download/pedestrianfootfall2013.ods'
1542057419019:download.file(url.footfall, 'footfall_ods.ods')
1542057427173:read_ods(footfall_ods.ods)
1542057433807:read_ods('footfall_ods.ods')
1542057609087:setwd("C:/Users/Kate/OneDrive/Documents/R/WorkingwithData/wd_assign1/WWD_Assignment_Oct_2018/googletransitdublinbusp20130315-1546")
1542057616941:read_ods('footfall_ods.ods')
1542058259743:read_ods('pedestrianfootfall2013')
1542058266786:read_ods('pedestrianfootfall2013.ods')
1542139189068:download.packages('XLConnect')
1542139200541:install.packages('XLConnect')
1542139228117:library('XLConnect')
1542191664591:knitr::opts_chunk$set(echo = TRUE)
1542191664754:employ.read <- read_delim('dublin employment trends.txt', ':')
1542191670854:knitr::opts_chunk$set(echo = TRUE)
1542191672296:library('readr')
1542191672330:library('ggplot2')
1542191672330:library('rnoaa')
1542191672625:library('httr')
1542191672634:library('plyr')
1542191672638:library('jsonlite')
1542191672638:library('dplyr')
1542191672722:library('readODS')
1542191675782:employ.read <- read_delim('dublin employment trends.txt', ':')
1542191675953:qplot(data = employ.read , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006???2016") + facet_grid ( .~ Sector)
1542191726350:employ.read <- read_delim('dublin employment trends.txt', ':')
1542191726366:qplot(data = employ.read , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006 - 2016") + facet_grid ( .~ Sector)
1542191733726:employ.read <- read_delim('dublin employment trends.txt', ':')
1542191733874:qplot(data = employ.read , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006 - 2016") + facet_grid ( .~ Sector)
1542191740980:employ.read <- read_delim('dublin employment trends.txt', ':')
1542191740995:qplot(data = employ.read , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006 - 2016") + facet_grid ( .~ Sector)
1542191772161:employ.read <- read_delim('dublin employment trends.txt', ':')
1542191772177:qplot(data = employ.read , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006 - 2016") + facet_grid ( .~ Sector)
1542191956915:employ.read <- read_delim('dublin employment trends.txt', ':')
1542191956930:qplot(data = employ.read , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006 - 2016") + facet_grid ( .~ Sector)
1542191986023:head(employ.read)
1542191999470:max(employ.read)
1542192007941:max(employ.read$Time)
1542192119051:filter(employ.read, Time=43)
1542192123133:filter(employ.read, Time==43)
1542192161151:employ.read$QuarterYear
1542192182678:select(employ.read, Time, QuarterYear)
1542192273803:head(employ.read)
1542192322716:?max
1542192420162:employ.read %>% group_by(Employment) #%>% summarise(Value = max(Value))
1542192440453:employ.read %>% group_by(Sector) %>% summarise(Employment = max(Employment))
1542192468275:employ.read %>% group_by(Sector) #%>% summarise(Employment = max(Employment))
1542192477559:?summarise
1542192509926:employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542192736332:employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542192760026:employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542192760034:employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542192861775:?mutate
1542193041752:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542193041872:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542193041893:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector')
1542193049568:employ.extreme
1542193072537:?left_join
1542193111234:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542193111250:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542193111265:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))
1542193111281:employ.extreme
1542193254866:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542193254882:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542193254897:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))
1542193254913:employ.extreme <-employ.extreme[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542193254928:employ.extreme
1542193273620:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542193273791:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542193273811:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542193273825:employ.extreme
1542193550693:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542193550703:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542193550719:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542193550735:pretty(employ.extreme)
1542193619397:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542193619416:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542193619434:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542193619600:print(employ.extreme)x
1542193625978:print(employ.extreme)
1542193652112:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542193652133:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542193652153:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542193652167:print.data.frame(employ.extreme)
1542193820799:print.table(employ.extreme)
1542193840680:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542193840699:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542193840721:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542193840734:print.data.frame(employ.extreme)
1542193893417:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542193893593:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542193893612:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542193893624:knit_print(employ.extreme)
1542193904976:?knit_print
1542193953752:knit_print.data.frame = function(x, ...) {
1542193953752:res = paste(c("", "", kable(x, output = FALSE)), collapse = "\n")
1542193953752:asis_output(res)
1542193953752:}
1542193960571:knit_print.data.frame = function(x, ...) {
1542193960572:res = paste(c("", "", kable(x, output = FALSE)), collapse = "\n")
1542193960572:asis_output(res)
1542193960572:}
1542193966573:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542193966746:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542193966766:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542193966779:knit_print.data.frame(employ.extreme)
1542193981024:knit_print.data.frame = function(x, ...) {
1542193981024:res = paste(c("", "", kable(x, output = FALSE)), collapse = "\n")
1542193981024:asis_output(res)
1542193981024:}
1542193986809:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542193986982:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542193987020:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542193987033:knit_print.data.frame(employ.extreme)
1542194045468:library('readr')
1542194045468:library('ggplot2')
1542194045468:library('rnoaa')
1542194045468:library('httr')
1542194045468:library('plyr')
1542194045483:library('jsonlite')
1542194045585:library('dplyr')
1542194045588:library('readODS')
1542194045590:library('knitr')
1542194050716:knit_print.data.frame = function(x, ...) {
1542194050721:res = paste(c("", "", kable(x, output = FALSE)), collapse = "\n")
1542194050721:asis_output(res)
1542194050721:}
1542194053319:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542194053335:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542194053612:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542194053626:knit_print.data.frame(employ.extreme)
1542194070563:?kable
1542194083145:kable(employ.extreme)
1542194189379:rount(employ.extreme, 2)
1542194195751:round(employ.extreme, 2)
1542194200809:kable(employ.extreme)
1542194253126:?mutate
1542194390423:employ.extreme %<% mutate(Employment.diff = Employment.max-Employment.min)
1542194399741:employ.extreme %>% mutate(Employment.diff = Employment.max-Employment.min)
1542194415388:employ.extreme %>% mutate(Employment.diff = round(Employment.max-Employment.min, 2)
1542194422565:employ.extreme %>% mutate(Employment.diff = round(Employment.max-Employment.min, 2))
1542194433695:employ.extreme %>% mutate(Employment.diff = round(Employment.max-Employment.min, 2))
1542194542554:?kable
1542194573415:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542194573589:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542194573618:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542194573631:employ.extreme %>% mutate(Employment.diff = Employment.max-Employment.min)
1542194573641:kable(employ.extreme, digits = 2)
1542194595424:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542194596653:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542194597986:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542194600286:employ.extreme %>% mutate(Employment.diff = Employment.max-Employment.min)
1542194607042:kable(employ.extreme, digits = 2)
1542194624654:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542194624669:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542194624846:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542194624859:employ.extreme <- employ.extreme %>% mutate(Employment.diff = Employment.max-Employment.min)
1542194624872:kable(employ.extreme, digits = 2)
1542199239861:qplot(data = employ.read , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006 - 2016")
1542199248475:?qplot
1542199557820:?ggplot
1542199670888:ggplot(employ.read, aes(Time, Employment)) + geom_point()
1542199704939:ggplot(employ.read, aes(Time, Employment))
1542199711938:ggplot(employ.read, aes(Time, Employment)) + geom_line()
1542199761734:ggplot(employ.read, aes(Time, Employment)) + geom_line(colour=factor(Sector))
1542199769473:ggplot(employ.read, aes(Time, Employment)) + geom_line(colour=factor('Sector'))
1542199794163:ggplot(employ.read, aes(Time, Employment)) + geom_line(aes(colour=factor('Sector')))
1542199800159:ggplot(employ.read, aes(Time, Employment)) + geom_line(aes(colour=factor(Sector)))
1542199884739:ggplot(filter(employ.read, Sector == c('Construction, Finance', 'Retail', 'Transport') , aes(Time, Employment)) + geom_line(aes(colour=factor(Sector)))
1542199901822:filter(employ.read, Sector == c('Construction, Finance', 'Retail', 'Transport')
1542199909759:filter(employ.read, Sector == c('Construction, Finance', 'Retail', 'Transport'))
1542199919176:ggplot(filter(employ.read, Sector == c('Construction, Finance', 'Retail', 'Transport')) , aes(Time, Employment)) + geom_line(aes(colour=factor(Sector)))
1542199932350:ggplot(filter(employ.read, Sector == c('Construction', 'Finance', 'Retail', 'Transport')) , aes(Time, Employment)) + geom_line(aes(colour=factor(Sector)))
1542199948791:ggplot(filter(employ.read, Sector == c('Construction', 'Finance', 'Retail', 'Transport')) , aes(Time, Employment)) + geom_point(aes(colour=factor(Sector)))
1542199958020:qplot(data = employ.read , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006 - 2016")
1542199958142:ggplot(filter(employ.read, Sector == c('Construction', 'Finance', 'Retail', 'Transport')) , aes(Time, Employment)) + geom_line(aes(colour=factor(Sector)))
1542202180221:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542202180253:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542202180282:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542202180301:employ.extreme <- employ.extreme %>% mutate(Employment.diff = Employment.max-Employment.min)
1542202180321:kable(employ.extreme, digits = 2)
1542202504737:prop.read <- read_tsv('dublin property trends.txt')
1542202504796:qplot(data = prop.read , x = Time , y = Trend, geom = 'line', colour = Category, xlab = "Time", ylab = "Trend", main = "Dublin Property Trends: 2007 - 2016")
1542202526139:prop.read
1542202641604:employ.read
1542202641651:prop.read
1542203064436:employ.read.cons <- filter(employ.read, Sector == 'Construction')
1542203075653:qplot(data = employ.read.cons , x = Time , y = Trend, geom = 'line', colour = Category, xlab = "Time", ylab = "Trend", main = "Dublin Property Trends: 2007 - 2016")
1542203085154:qplot(data = employ.read.cons , x = Time , y = Employment, geom = 'line', colour = Category, xlab = "Time", ylab = "Trend", main = "Dublin Property Trends: 2007 - 2016")
1542203093458:qplot(data = employ.read.cons , x = Time , y = Employment, geom = 'line', colour = Sector, xlab = "Time", ylab = "Trend", main = "Dublin Property Trends: 2007 - 2016")
1542203270143:min.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == min(Trend))
1542203271705:max.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == max(Trend))
1542203307914:min.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == min(Trend))
1542203307997:max.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == max(Trend))
1542203308028:prop.extreme <- left_join(min.prop, max.prop, by = 'Category', suffix = c('.min', '.max'))[c('Category', 'QuarterYear.min', 'Trend.min', 'Time.min', 'QuarterYear.max', 'Trend.max', 'Time.max')]
1542203320372:min.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == min(Trend))
1542203320641:max.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == max(Trend))
1542203320679:prop.extreme <- left_join(min.prop, max.prop, by = 'Category', suffix = c('.min', '.max'))#[c('Category', 'QuarterYear.min', 'Trend.min', 'Time.min', 'QuarterYear.max', 'Trend.max', 'Time.max')]
1542203320694:kable(prop.extreme, digits = 2)
1542203351152:min.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == min(Trend))
1542203351216:max.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == max(Trend))
1542203351279:prop.extreme <- left_join(min.prop, max.prop, by = 'Category', suffix = c('.min', '.max'))[c('Category', 'Year.min', 'Trend.min', 'Time.min', 'Year.max', 'Trend.max', 'Time.max')]
1542203351297:kable(prop.extreme, digits = 2)
1542203429729:prop.read <- read_tsv('dublin property trends.txt')
1542203429868:qplot(data = prop.read , x = Time , y = Trend, geom = 'line', colour = Category, xlab = "Time", ylab = "Trend", main = "Dublin Property Trends: 2007 - 2016")
1542208042301:filter(employ.extreme, Sector == 'Construction')
1542208047925:kable(prop.extreme, digits = 2)
1542208073306:employ.extreme %>% filter(., Sector == 'Construction')
1542208089678:?rename
1542208162620:min.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == min(Trend))
1542208162652:max.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == max(Trend))
1542208162672:prop.extreme <- left_join(min.prop, max.prop, by = 'Category', suffix = c('.min', '.max'))[c('Category', 'Year.min', 'Trend.min', 'Time.min', 'Year.max', 'Trend.max', 'Time.max')]
1542208162684:employ.extreme <- employ.extreme %>% mutate(Trend.diff = Trend.max-Trend.min)
1542208181431:min.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == min(Trend))
1542208181602:max.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == max(Trend))
1542208181621:prop.extreme <- left_join(min.prop, max.prop, by = 'Category', suffix = c('.min', '.max'))[c('Category', 'Year.min', 'Trend.min', 'Time.min', 'Year.max', 'Trend.max', 'Time.max')]
1542208181633:prop.extreme <- prop.extreme %>% mutate(Trend.diff = Trend.max-Trend.min)
1542208181645:kable(prop.extreme, digits = 2)
1542208693714:?merge
1542208713986:employ.extreme.con <- employ.extreme %>% filter(., Sector == 'Construction')
1542208740747:merge(prop.extreme, employ.extreme.con)
1542208777336:employ.extreme.con
1542208866646:employ.extreme.con <- employ.extreme %>% filter(., Sector == 'Construction') %>% rename(., Sector = Category, QuarterYear.min = Year.min, QuarterYear.max = Year.max, Employment.min = Trend.min, Employment.max = Trend.max, Employment.diff = Trend.diff)
1542208883523:?rename
1542208917492:employ.extreme.con <- employ.extreme %>% filter(., Sector == 'Construction') %>% rename(., Sector = Category)#, QuarterYear.min = Year.min, QuarterYear.max = Year.max, Employment.min = Trend.min, Employment.max = Trend.max, Employment.diff = Trend.diff)
1542208931455:employ.extreme %>% filter(., Sector == 'Construction') %>% rename(., Sector = Category)
1542208987199:rename(employ.extreme, Sector = Category)
1542208996549:rename(employ.extreme, Sector = 'Category')
1542209007521:employ.extreme
1542209018986:rename(employ.extreme, Sector=Category)
1542209058960:employ.extreme <- rename(employ.extreme, Sector=Category)
1542209064268:employ.extreme2 <- rename(employ.extreme, Sector=Category)
1542209081278:employ.extreme2 <- dplyr::rename(employ.extreme, Sector=Category)
1542209137162:employ.extreme.con <- employ.extreme %>% filter(., Sector == 'Construction') %>% rename(Sector = Category)#, QuarterYear.min = Year.min, QuarterYear.max = Year.max, Employment.min = Trend.min, Employment.max = Trend.max, Employment.diff = Trend.diff)
1542209150640:employ.extreme.con <- employ.extreme %>% filter(., Sector == 'Construction') %>% dplyr::rename(Sector = Category)#, QuarterYear.min = Year.min, QuarterYear.max = Year.max, Employment.min = Trend.min, Employment.max = Trend.max, Employment.diff = Trend.diff)
1542209233742:employ.extreme.con <- employ.extreme %>% filter(., Sector == 'Construction') %>% setNames(c('Category', 'Year.min', 'Year.max', 'Trend.min', 'Trend.max', 'Trend.diff')) #dplyr::rename(Sector = Category)#, QuarterYear.min = Year.min, QuarterYear.max = Year.max, Employment.min = Trend.min, Employment.max = Trend.max, Employment.diff = Trend.diff)
1542209236079:employ.extreme.con
1542209324427:employ.extreme.con <- employ.extreme %>% filter(., Sector == 'Construction') %>% setNames(c('Category', 'Year.min', 'Trend.min', 'Time.min', 'Year.max',  'Trend.max', 'Time.max', 'Trend.diff'))
1542209331329:employ.extreme.con
1542209345714:merge(prop.extreme, employ.extreme.con)
1542209361836:employ.extreme.con
1542209361851:prop.extreme
1542209376923:merge(prop.extreme, employ.extreme.con)
1542209383549:?merge
1542209418368:m0 <- merge(prop.extreme, employ.extreme.con)
1542209418376:m0
1542209427648:prop.extreme
1542209432746:employ.extreme.con
1542209735527:concat([prop.extreme, employ.extreme.con])
1542209742272:concat(prop.extreme, employ.extreme.con)
1542209756024:install.packages('pandas')
1542209768049:install.packages('Pandas')
1542209789273:m0 <- dplyr::merge(prop.extreme, employ.extreme.con)
1542209795741:?merge
1542209908737:m0 <- bind_rows(prop.extreme, employ.extreme.con)
1542209909991:m0
1542209940049:kable(bind_rows(prop.extreme, employ.extreme.con), digits = 2)
1542209962954:kable(bind_rows(employ.extreme.con, prop.extreme), digits = 2)
1542209977421:min.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == min(Trend))
1542209977591:max.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == max(Trend))
1542209977609:prop.extreme <- left_join(min.prop, max.prop, by = 'Category', suffix = c('.min', '.max'))[c('Category', 'Year.min', 'Trend.min', 'Time.min', 'Year.max', 'Trend.max', 'Time.max')]
1542209977621:prop.extreme <- prop.extreme %>% mutate(Trend.diff = Trend.max-Trend.min)
1542209977633:kable(bind_rows(prop.extreme, employ.extreme.con), digits = 2)
1542210043397:min.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == min(Trend))
1542210043414:max.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == max(Trend))
1542210043431:prop.extreme <- left_join(min.prop, max.prop, by = 'Category', suffix = c('.min', '.max'))[c('Category', 'Year.min', 'Trend.min', 'Time.min', 'Year.max', 'Trend.max', 'Time.max')]
1542210043443:prop.extreme <- prop.extreme %>% mutate(Trend.diff = Trend.max-Trend.min)
1542210043454:employ.extreme.con <- employ.extreme %>% filter(., Sector == 'Construction') %>% setNames(c('Category', 'Year.min', 'Trend.min', 'Time.min', 'Year.max',  'Trend.max', 'Time.max', 'Trend.diff'))
1542210043464:kable(bind_rows(prop.extreme, employ.extreme.con), digits = 2)
1542210424990:prop.read <- read_tsv('dublin property trends.txt')
1542210425114:qplot(data = prop.read , x = Time , y = Trend, geom = 'line', colour = Category, xlab = "Time", ylab = "Trend", main = "Dublin Property Trends: 2007 - 2016")
1542210425397:prop.read
1542210578023:filter(prop.read, Category == 'Houses Built')
1542210636407:?split
1542210664771:split(prop.read, Category)
1542210676049:split(prop.read, prop.read$Category)
1542210760306:x <- split(prop.read, prop.read$Category)
1542210763579:x
1542210768673:x[1]
1542210871213:?select
1542210889031:prop.split <- split(prop.read, prop.read$Category)
1542210903931:prop.apt <- prop.split[1][c('Category', 'Year', 'Time.min')]
1542210908302:prop.apt
1542210920457:prop.split[1]
1542210932153:prop.split[[1]]
1542211000027:prop.apt <- rename(prop.split[[1]], Trend=Trend.apt.rental)
1542211010898:prop.apt <- dplyr::rename(prop.split[[1]], Trend=Trend.apt.rental)
1542211035021:prop.apt
1542211051164:prop.apt <- prop.split[[1]]
1542211052578:prop.apt
1542211060611:dplyr::rename(prop.apt, Trend=Trend.apt.rental)
1542211092958:prop.split[[1]]
1542211249024:prop.split
1542211305330:prop.apt.rent <- prop.split[[1]]
1542211305336:prop.house.price <- prop.split[[2]]
1542211305342:prop.house.rent <- prop.split[[3]]
1542211305349:prop.house.built <- prop.split[[4]]
1542211316896:prop.apt.rent
1542211387867:left join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price'))
1542211392595:left_join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price'))
1542211448767:left_join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('', '.house.rent'))
1542211475705:left_join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) #%>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('', '.house.rent'))
1542211487146:left_join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('', '.house.rent'))
1542211503021:left_join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.', '.house.rent'))
1542211541864:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend)
1542211565865:prop.split <- split(prop.read, prop.read$Category)
1542211565889:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend)
1542211565899:prop.house.price <- select(prop.split[[2]], Time, Year, Trend)
1542211565905:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend)
1542211566011:prop.house.built <- select(prop.split[[4]], Time, Year, Trend)
1542211566018:left_join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.', '.house.rent'))
1542211618832:prop.split <- split(prop.read, prop.read$Category)
1542211618847:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend)
1542211618854:prop.house.price <- select(prop.split[[2]], Time, Year, Trend)
1542211618861:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend)
1542211618867:prop.house.built <- select(prop.split[[4]], Time, Year, Trend)
1542211618875:left_join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.', '.house.rent')) %>% left_join(., prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built'))
1542211669298:left_join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.')) %>% left_join(., prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built'))
1542211708244:left_join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join(., prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built'))#%>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542211727051:prop.split <- split(prop.read, prop.read$Category)
1542211727070:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend)
1542211727228:prop.house.price <- select(prop.split[[2]], Time, Year, Trend)
1542211727234:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend)
1542211727240:prop.house.built <- select(prop.split[[4]], Time, Year, Trend)
1542211727247:left_join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price'))# %>% left_join(., prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built'))#%>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542211737148:prop.split <- split(prop.read, prop.read$Category)
1542211737163:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend)
1542211737170:prop.house.price <- select(prop.split[[2]], Time, Year, Trend)
1542211737328:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend)
1542211737334:prop.house.built <- select(prop.split[[4]], Time, Year, Trend)
1542211737442:left_join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join(., prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built'))#%>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542211742521:prop.split <- split(prop.read, prop.read$Category)
1542211742536:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend)
1542211742542:prop.house.price <- select(prop.split[[2]], Time, Year, Trend)
1542211742548:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend)
1542211742656:prop.house.built <- select(prop.split[[4]], Time, Year, Trend)
1542211742662:left_join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built'))#%>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542211897492:prop.split <- split(prop.read, prop.read$Category)
1542211897507:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend)
1542211897513:prop.house.price <- select(prop.split[[2]], Time, Year, Trend)
1542211897519:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend)
1542211897526:prop.house.built <- select(prop.split[[4]], Time, Year, Trend)
1542211897531:left_join(prop.apt.rent, prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542211918998:prop.split <- split(prop.read, prop.read$Category)
1542211919166:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend)
1542211919172:prop.house.price <- select(prop.split[[2]], Time, Year, Trend)
1542211919178:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend)
1542211919185:prop.house.built <- select(prop.split[[4]], Time, Year, Trend)
1542211919191:prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542211952460:prop.split <- split(prop.read, prop.read$Category)
1542211952475:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend)
1542211952482:prop.house.price <- select(prop.split[[2]], Time, Year, Trend)
1542211952488:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend)
1542211952494:prop.house.built <- select(prop.split[[4]], Time, Year, Trend)
1542211952500:prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.house.built', '.')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542212163674:prop.split <- split(prop.read, prop.read$Category)
1542212163689:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend)
1542212163695:prop.house.price <- select(prop.split[[2]], Time, Year, Trend)
1542212163702:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend)
1542212163708:prop.house.built <- select(prop.split[[4]], Time, Year, Trend)
1542212163714:prop.cols <- prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.house.built', '.')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542212163723:prop.cols
1542212179226:prop.cols$Trend.apt.rent
1542212193396:prop.cols
1542212258561:filter(prop.cols, Trend.house.price > Trend.house.rent)
1542212285430:filter(prop.cols, Trend.house.price > (Trend.house.rent & Trend.apt.rent))
1542212306007:filter(prop.cols, Trend.house.price > (Trend.house.rent & Trend.apt.rent) & Trend. > (Trend.house.rent & Trend.apt.rent))
1542212355519:prop.split <- split(prop.read, prop.read$Category)
1542212355534:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend)
1542212355541:prop.house.price <- select(prop.split[[2]], Time, Year, Trend)
1542212355548:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend)
1542212355554:prop.house.built <- select(prop.split[[4]], Time, Year, Trend)
1542212355562:prop.cols <- prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.house.built', '.')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542212355571:prop.cols
1542212355579:filter(prop.cols, Trend.house.price > (Trend.house.rent & Trend.apt.rent) & Trend. > (Trend.house.rent & Trend.apt.rent))
1542212355588:filter(prop.cols, Trend.house.price < (Trend.house.rent & Trend.apt.rent) & Trend. < (Trend.house.rent & Trend.apt.rent))
1542212394560:prop.read
1542212429835:filter(prop.read, Time == min(Time))
1542212440423:filter(prop.read, Time == min(Time))$Year
1542212451360:unique(filter(prop.read, Time == min(Time))$Year))
1542212458330:unique(filter(prop.read, Time == min(Time))$Year)))
1542212471254:unique(filter(prop.read, Time == min(Time))$Year)
1542212487861:prop.read <- read_tsv('dublin property trends.txt')
1542212488036:qplot(data = prop.read , x = Time , y = Trend, geom = 'line', colour = Category, xlab = "Time", ylab = "Trend", main = "Dublin Property Trends: 2007 - 2016")
1542212488285:prop.read
1542212592521:prop.split <- split(prop.read, prop.read$Category)
1542212592536:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend)
1542212592542:prop.house.price <- select(prop.split[[2]], Time, Year, Trend)
1542212592548:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend)
1542212592707:prop.house.built <- select(prop.split[[4]], Time, Year, Trend)
1542212592714:prop.cols <- prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.house.built', '.')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542212592723:prop.cols
1542212592731:filter(prop.cols, Trend.house.price > (Trend.house.rent & Trend.apt.rent) & Trend. > (Trend.house.rent & Trend.apt.rent))
1542212592742:filter(prop.cols, Trend.house.price < (Trend.house.rent & Trend.apt.rent) & Trend. < (Trend.house.rent & Trend.apt.rent))
1542212739114:prop.apt.rent
1542212739126:prop.house.price
1542212739132:prop.house.rent
1542212739295:prop.house.built
1542212762888:prop.split <- split(prop.read, prop.read$Category)
1542212762902:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend)
1542212762909:prop.house.price <- select(prop.split[[2]], Time, Year, Trend)
1542212762916:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend)
1542212762922:prop.house.built <- select(prop.split[[4]], Time, Year, Trend)
1542212762929:prop.split
1542212762956:prop.apt.rent
1542212762962:prop.house.price
1542212762968:prop.house.rent
1542212762975:prop.house.built
1542212762981:prop.cols <- prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.house.built', '.')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542212762992:prop.cols
1542212762999:filter(prop.cols, Trend.house.price > (Trend.house.rent & Trend.apt.rent) & Trend. > (Trend.house.rent & Trend.apt.rent))
1542212763006:filter(prop.cols, Trend.house.price < (Trend.house.rent & Trend.apt.rent) & Trend. < (Trend.house.rent & Trend.apt.rent))
1542212781925:prop.split
1542212781962:prop.apt.rent
1542212781970:prop.house.price
1542212781976:prop.house.rent
1542212781983:prop.house.built
1542212781988:prop.cols <- prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.house.built', '.')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542212781999:prop.cols
1542212855321:prop.split <- split(prop.read, prop.read$Category)
1542212855336:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend, Category)
1542212855343:prop.house.price <- select(prop.split[[2]], Time, Year, Trend, Category)
1542212855350:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend, Category)
1542212855357:prop.house.built <- select(prop.split[[4]], Time, Year, Trend, Category)
1542212855365:prop.split
1542212855546:prop.apt.rent
1542212855553:prop.house.price
1542212855559:prop.house.rent
1542212855566:prop.house.built
1542212855573:prop.cols <- prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.house.built', '.')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542212855587:prop.cols
1542212855596:filter(prop.cols, Trend.house.price > (Trend.house.rent & Trend.apt.rent) & Trend. > (Trend.house.rent & Trend.apt.rent))
1542212855603:filter(prop.cols, Trend.house.price < (Trend.house.rent & Trend.apt.rent) & Trend. < (Trend.house.rent & Trend.apt.rent))
1542212887590:prop.split <- split(prop.read, prop.read$Category)
1542212887606:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend, Category)
1542212887613:prop.house.price <- select(prop.split[[2]], Time, Year, Trend, Category)
1542212887621:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend, Category)
1542212887628:prop.house.built <- select(prop.split[[4]], Time, Year, Trend, Category)
1542212887636:prop.split
1542212887816:prop.apt.rent
1542212887823:prop.house.price
1542212887829:prop.house.rent
1542212887836:prop.house.built
1542212887843:prop.cols <- prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.house.built', '.')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.house.rent', '.'))
1542212887859:prop.cols
1542212887868:filter(prop.cols, Trend.house.price > (Trend.house.rent & Trend.apt.rent) & Trend. > (Trend.house.rent & Trend.apt.rent))
1542212887886:filter(prop.cols, Trend.house.price < (Trend.house.rent & Trend.apt.rent) & Trend. < (Trend.house.rent & Trend.apt.rent))
1542212991552:prop.split <- split(prop.read, prop.read$Category)
1542212991566:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend, Category)
1542212991573:prop.house.price <- select(prop.split[[2]], Time, Year, Trend, Category)
1542212991581:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend, Category)
1542212991588:prop.house.built <- select(prop.split[[4]], Time, Year, Trend, Category)
1542212991596:prop.split
1542212991623:prop.apt.rent
1542212991630:prop.house.price
1542212991636:prop.house.rent
1542212991643:prop.house.built
1542212991650:prop.cols <- prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.', '.house.rent'))
1542212991664:prop.cols
1542212991674:filter(prop.cols, Trend.house.price > (Trend.house.rent & Trend.apt.rent) & Trend. > (Trend.house.rent & Trend.apt.rent))
1542212991684:filter(prop.cols, Trend.house.price < (Trend.house.rent & Trend.apt.rent) & Trend. < (Trend.house.rent & Trend.apt.rent))
1542213038789:prop.split <- split(prop.read, prop.read$Category)
1542213038804:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend, Category)
1542213038811:prop.house.price <- select(prop.split[[2]], Time, Year, Trend, Category)
1542213038819:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend, Category)
1542213038826:prop.house.built <- select(prop.split[[4]], Time, Year, Trend, Category)
1542213038833:prop.cols <- prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.', '.house.rent'))
1542213038848:prop.cols
1542213038858:filter(prop.cols, Trend.house.price > (Trend.house.rent & Trend.apt.rent) & Trend. > (Trend.house.rent & Trend.apt.rent))
1542213038868:filter(prop.cols, Trend.house.price < (Trend.house.rent & Trend.apt.rent) & Trend. < (Trend.house.rent & Trend.apt.rent))
1542213192488:filter(prop.cols, (Trend.house.price > Trend.house.rent & Trend.house.price > Trend.apt.rent) & Trend. > Trend.house.rent & Trend. > Trend.apt.rent))
1542213201181:filter(prop.cols, Trend.house.price > Trend.house.rent & Trend.house.price > Trend.apt.rent) & Trend. > Trend.house.rent & Trend. > Trend.apt.rent)
1542213208187:filter(prop.cols, Trend.house.price > Trend.house.rent & Trend.house.price > Trend.apt.rent & Trend. > Trend.house.rent & Trend. > Trend.apt.rent)
1542213223360:?filter
1542213301456:prop.split <- split(prop.read, prop.read$Category)
1542213301474:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend, Category)
1542213301481:prop.house.price <- select(prop.split[[2]], Time, Year, Trend, Category)
1542213301489:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend, Category)
1542213301496:prop.house.built <- select(prop.split[[4]], Time, Year, Trend, Category)
1542213301503:prop.cols <- prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.', '.house.rent'))
1542213301518:prop.cols
1542213301527:filter(prop.cols, (Trend.house.price > Trend.house.rent & Trend.house.price > Trend.apt.rent & Trend. > Trend.house.rent & Trend. > Trend.apt.rent))
1542213301538:filter(prop.cols, (Trend.house.price < Trend.house.rent & Trend.house.price < Trend.apt.rent & Trend. < Trend.house.rent & Trend. < Trend.apt.rent))
1542213526116:prop.split <- split(prop.read, prop.read$Category)
1542213526131:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend, Category)
1542213526139:prop.house.price <- select(prop.split[[2]], Time, Year, Trend, Category)
1542213526146:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend, Category)
1542213526153:prop.house.built <- select(prop.split[[4]], Time, Year, Trend, Category)
1542213526161:prop.cols <- prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.', '.house.rent'))
1542213526187:prop.filter.buy <- filter(prop.cols, (Trend.house.price > Trend.house.rent & Trend.house.price > Trend.apt.rent & Trend. > Trend.house.rent & Trend. > Trend.apt.rent))
1542213526196:prop.filter.rent <- filter(prop.cols, (Trend.house.price < Trend.house.rent & Trend.house.price < Trend.apt.rent & Trend. < Trend.house.rent & Trend. < Trend.apt.rent))
1542213534955:prop.filter.buy
1542213578563:filter(prop.filter.buy, Year = min(Year))
1542213588298:filter(prop.filter.buy, Year == min(Year))
1542213607740:filter(prop.filter.buy, Time == min(Time))
1542213615710:filter(prop.filter.buy, Time == min(Time))$Year
1542213644454:filter(prop.filter.buy, Time == min(Time))$Year
1542213644461:filter(prop.filter.buy, Time == max(Time))$Year
1542213644466:filter(prop.filter.rent, Time == min(Time))$Year
1542213644472:filter(prop.filter.rent, Time == max(Time))$Year
1542213867926:prop.split <- split(prop.read, prop.read$Category)
1542213867951:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend, Category)
1542213868110:prop.house.price <- select(prop.split[[2]], Time, Year, Trend, Category)
1542213868117:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend, Category)
1542213868125:prop.house.built <- select(prop.split[[4]], Time, Year, Trend, Category)
1542213868132:prop.cols <- prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.', '.house.rent'))
1542213868148:prop.filter.buy <- filter(prop.cols, (Trend.house.price > Trend.house.rent & Trend.house.price > Trend.apt.rent & Trend. > Trend.house.rent & Trend. > Trend.apt.rent))
1542213868156:prop.filter.rent <- filter(prop.cols, (Trend.house.price < Trend.house.rent & Trend.house.price < Trend.apt.rent & Trend. < Trend.house.rent & Trend. < Trend.apt.rent))
1542213868165:filter(prop.filter.buy, Time == min(Time))$Year
1542213868171:filter(prop.filter.buy, Time == max(Time))$Year
1542213868177:filter(prop.filter.rent, Time == min(Time))$Year
1542213868182:filter(prop.filter.rent, Time == max(Time))$Year
1542214407081:employ.read
1542214564930:knitr::opts_chunk$set(echo = TRUE)
1542214565022:library('readr')
1542214565705:library('ggplot2')
1542214565977:library('rnoaa')
1542214566361:library('httr')
1542214566370:library('plyr')
1542214566430:library('jsonlite')
1542214566439:library('dplyr')
1542214566453:library('readODS')
1542214566562:library('knitr')
1542214566580:employ.read <- read_delim('dublin employment trends.txt', ':')
1542214566631:qplot(data = employ.read , x = Time , y = Employment, geom = 'line', xlab = "Quarterly Figures", ylab = "Trend", main = "Dublin Employment Trends Per Sector: 2006 - 2016") + facet_grid ( .~ Sector)
1542214567232:min.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == min(Employment))
1542214567294:max.employ <- employ.read %>% group_by(Sector) %>% filter(., Employment == max(Employment))
1542214567447:employ.extreme <- left_join(min.employ, max.employ, by = 'Sector', suffix = c('.min', '.max'))[c('Sector', 'QuarterYear.min', 'Employment.min', 'Time.min', 'QuarterYear.max', 'Employment.max', 'Time.max')]
1542214567522:employ.extreme <- employ.extreme %>% mutate(Employment.diff = Employment.max-Employment.min)
1542214567535:kable(employ.extreme, digits = 2)
1542214567914:prop.read <- read_tsv('dublin property trends.txt')
1542214567931:qplot(data = prop.read , x = Time , y = Trend, geom = 'line', colour = Category, xlab = "Time", ylab = "Trend", main = "Dublin Property Trends: 2007 - 2016")
1542214568139:prop.read
1542214568330:prop.split <- split(prop.read, prop.read$Category)
1542214568345:prop.apt.rent <- select(prop.split[[1]], Time, Year, Trend, Category)
1542214568356:prop.house.price <- select(prop.split[[2]], Time, Year, Trend, Category)
1542214568364:prop.house.rent <- select(prop.split[[3]], Time, Year, Trend, Category)
1542214568518:prop.house.built <- select(prop.split[[4]], Time, Year, Trend, Category)
1542214568527:prop.cols <- prop.apt.rent %>% left_join(prop.house.price, by = c('Time', 'Year'), suffix = c('.apt.rent', '.house.price')) %>% left_join( prop.house.built, by = c('Time', 'Year'), suffix = c('.', '.house.built')) %>% left_join(., prop.house.rent, by = c('Time', 'Year'), suffix = c('.', '.house.rent'))
1542214568543:prop.filter.buy <- filter(prop.cols, (Trend.house.price > Trend.house.rent & Trend.house.price > Trend.apt.rent & Trend. > Trend.house.rent & Trend. > Trend.apt.rent))
1542214568552:prop.filter.rent <- filter(prop.cols, (Trend.house.price < Trend.house.rent & Trend.house.price < Trend.apt.rent & Trend. < Trend.house.rent & Trend. < Trend.apt.rent))
1542214568567:min.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == min(Trend))
1542214568584:max.prop <- prop.read %>% group_by(Category) %>% filter(., Trend == max(Trend))
1542214568605:prop.extreme <- left_join(min.prop, max.prop, by = 'Category', suffix = c('.min', '.max'))[c('Category', 'Year.min', 'Trend.min', 'Time.min', 'Year.max', 'Trend.max', 'Time.max')]
1542214568629:prop.extreme <- prop.extreme %>% mutate(Trend.diff = Trend.max-Trend.min)
1542214568641:employ.extreme.con <- employ.extreme %>% filter(., Sector == 'Construction') %>% setNames(c('Category', 'Year.min', 'Trend.min', 'Time.min', 'Year.max',  'Trend.max', 'Time.max', 'Trend.diff'))
1542214568652:kable(bind_rows(prop.extreme, employ.extreme.con), digits = 2)
1542214568773:stations <- GET('https://api.jcdecaux.com/vls/v1/stations?apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1542214569234:http_type(stations)
1542214569240:stations.df <- jsonlite::fromJSON(content(stations, "text"), simplifyVector = TRUE)
1542214569342:#count(stations.df, vars = 'contract_name')
1542214569351:bike <- GET('https://api.jcdecaux.com/vls/v1/stations?contract=Santander&apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1542214569524:http_type(bike)
1542214569529:bike.df <- jsonlite::fromJSON(content(bike, "text"), simplifyVector = TRUE)
1542214569541:bike.df
1542214569610:bike.df <- bike.df[order(bike.df$name),]
1542214569628:str(bike.df)
1542214569798:qplot(available_bikes, name, data = bike.df , colour = status)
1542214570223:unzip('DublinBus.zip')
1542214570947:#loc.files=
1542214570949:trips.df <- read_csv('googletransitdublinbusp20130315-1546\\trips.txt')
1542214571127:routes.df <- read_csv('googletransitdublinbusp20130315-1546\\routes.txt')
1542214571206:calendar.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar.txt')
1542214571277:calendar_dates.df <- read_csv('googletransitdublinbusp20130315-1546\\calendar_dates.txt')
1542214571341:shapes.df <- read_csv('googletransitdublinbusp20130315-1546\\shapes.txt')
1542214571451:stops.df <- read_csv('googletransitdublinbusp20130315-1546\\stops.txt')
1542214571526:transfers.df <- read_csv('googletransitdublinbusp20130315-1546\\transfers.txt')
1542214571643:agency.df <- read_csv('googletransitdublinbusp20130315-1546\\agency.txt')
1542214571666:stop_times.df <- read_csv('googletransitdublinbusp20130315-1546\\stop_times.txt') #might be issues with stop_times
1542214573574:count(left_join(trips.df, routes.df, by = 'route_id'), route_short_name, route_long_name, sort = TRUE)
1542214573598:calendar_dates.df
1542214573763:count(left_join(trips.df, routes.df, by = 'route_id'), route_short_name, route_long_name, service_id, sort = TRUE)
1542214573784:left_join(trips.df, routes.df, by = 'route_id') %>% left_join(., shapes.df, by = 'shape_id')
1542214574863:#bus.df <- left_join(trips.df, routes.df, by = 'route_id') %>%  left_join(., calendar.df, by = "service_id") %>% left_join(., calendar_dates.df, by = "service_id")  %>% left_join(., stop_times.df, by = "trip_id")  %>% left_join(., stops.df, by = "stop_id")# %>% left_join(., shapes.df, by = "shape_id")
1542214574866:#%>% left_join(., agency.df, by = "agency_id")#
1542214574870:#what to do about transfers?
1542214574879:filter(routes.df, route_short_name == 16)
1542214574892:left_join(trips.df, routes.df, by = 'route_id') %>% filter(., route_short_name == 16) %>% count(., service_id, direction_id)
1542214574911:route.16 <- left_join(trips.df, stop_times.df, by = 'trip_id') %>% left_join(., routes.df, by = 'route_id') %>% left_join(. ,stops.df, by = 'stop_id') %>% filter(., route_short_name == 16)
1542214575423:route.16
1542214575584:unique(route.16$pickup_type)
1542214575589:unique(route.16$drop_off_type)
1542214575754:route.16 %>% select(., route_short_name, route_long_name)
1542214575795:url.footfall <- 'https://data.smartdublin.ie/dataset/8204be0a-6348-459e-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5-8e61899951e9/download/pedestrianfootfall2013.ods'
1542214575801:download.file(url.footfall, 'footfall_ods.ods')
1542214577232:read_ods('pedestrianfootfall2013.ods')
1542214694397:bike <- GET('https://api.jcdecaux.com/vls/v1/stations?contract=Dublin&apiKey=174980a157364085f718726daecb380b7aeaf5b4')
1542214694656:http_type(bike)
1542214694661:bike.df <- jsonlite::fromJSON(content(bike, "text"), simplifyVector = TRUE)
1542214694682:bike.df
1542214701830:bike.df <- bike.df[order(bike.df$name),]
1542214707024:str(bike.df)
1542214711049:qplot(available_bikes, name, data = bike.df , colour = status)
1542214794432:bike.df <- bike.df[order(bike.df$name),]
1542214794448:bike.df
1542214844011:length(bike.df)
1542214863838:row_number(bike.df)
1542214877176:?row
1542214899808:nrow(bike.df)
1542214932772:unique(bike.df$number)
1542214943240:nrow(bike.df)
1542214943244:max(bike.df$number)
1542214992398:bike.df <- bike.df[order(bike.df$number),]
1542214992414:bike.df
1542216095676:bike.df[order(bike.df$available_bikes),]
1542216107553:?order
1542216124481:bike.df[order(bike.df$available_bikes), decreasing = TRUE]
1542216161866:bike.df[order(bike.df$available_bikes, decreasing = TRUE),]
1542216205488:bike.df[order(bike.df$available_bikes, decreasing = TRUE),][1:10]
1542216217552:bike.df[order(bike.df$available_bikes, decreasing = TRUE),][1:10, 20:40]
1542216233824:bike.df[order(bike.df$available_bikes, decreasing = TRUE),][1:10,20:40]
1542216239394:bike.df[order(bike.df$available_bikes, decreasing = TRUE),][1:10]
1542216276173:bike.df[order(bike.df$available_bikes, decreasing = TRUE),][1:10]
1542216281677:bike.df[order(bike.df$available_bikes, decreasing = TRUE),][,1:10]
1542216550994:bike.df[order(bike.df$available_bikes, decreasing = TRUE),][1:10,]
1542216612887:bike.df[order(bike.df$available_bikes, decreasing = TRUE),][c(1:10, 20:30),]
1542216649702:bike.df[order(bike.df$available_bikes, decreasing = TRUE),][c(1:10, nrow(bike.df)-10:nrow(bike.df)),]
1542216662947:bike.df[order(bike.df$available_bikes, decreasing = TRUE),][c(1:10, (nrow(bike.df)-10):nrow(bike.df)),]
1542216716580:qplot(available_bikes, name, data = bike.df.extreme , colour = available_bikes)
1542216720049:bike.df.extreme <- bike.df[order(bike.df$available_bikes, decreasing = TRUE),][c(1:10, (nrow(bike.df)-10):nrow(bike.df)),]
1542216720211:qplot(available_bikes, name, data = bike.df.extreme , colour = available_bikes)
1542216759906:qplot(available_bikes, name, data = bike.df.extreme , colour = Status)
1542216769303:qplot(available_bikes, name, data = bike.df.extreme , colour = status)
1542216790426:bike.df.extreme <- bike.df[order(bike.df$available_bikes, decreasing = TRUE),][c(1:10, (nrow(bike.df)-15):nrow(bike.df)),]
1542216790428:qplot(available_bikes, name, data = bike.df.extreme , colour = status)
1542216970435:bike.df.extreme <- bike.df[order(bike.df$available_bikes, decreasing = TRUE),][c(1:15, (nrow(bike.df)-15):nrow(bike.df)),]
1542216970435:qplot(available_bikes, name, data = bike.df.extreme , colour = status)
1542216999987:bike.df.extreme <- bike.df[order(bike.df$available_bikes, decreasing = TRUE),][c(1:15, (nrow(bike.df)-15):nrow(bike.df)),]
1542216999998:qplot(available_bikes, name, data = bike.df.extreme , colour = status)
1542217010926:bike.df.extreme <- bike.df[order(bike.df$available_bikes, decreasing = TRUE),]#[c(1:15, (nrow(bike.df)-15):nrow(bike.df)),]
1542217010942:qplot(available_bikes, name, data = bike.df.extreme , colour = status)
1542217019940:bike.df.extreme <- bike.df[order(bike.df$available_bikes, decreasing = TRUE),]#[c(1:15, (nrow(bike.df)-15):nrow(bike.df)),]
1542217019956:qplot(available_bikes, name, data = bike.df.extreme , colour = status)
1542217025815:bike.df.extreme <- bike.df[order(bike.df$available_bikes, decreasing = TRUE),]#[c(1:15, (nrow(bike.df)-15):nrow(bike.df)),]
1542217025830:qplot(available_bikes, name, data = bike.df.extreme , colour = status)
1542217129529:qplot(available_bikes, name, data = bike.df , colour = available_bike_stands)
1542217141765:?qplot
1542217235803:qplot(available_bikes, name, data = bike.df , colour = available_bike_stands, size=I(0.2))
1542217244960:qplot(available_bikes, name, data = bike.df , colour = available_bike_stands, size=I(1))
1542217267927:qplot(available_bikes, name, data = bike.df , colour = available_bike_stands, size=I(10))
1542217277184:qplot(available_bikes, name, data = bike.df , colour = available_bike_stands, size=I(3))
1542217598332:unique(bike.df$banking)
1542217643462:unique(bike.df$bonus)
1542217655955:qplot(available_bikes, name, data = bike.df , colour = banking, size=I(3))
1542217885113:summary(bike.df, banking)
